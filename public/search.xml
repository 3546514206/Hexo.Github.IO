<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++基础教程</title>
    <url>/2023/09/02/C-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>原文来自：<a href="https://github.com/GrindGold/CppGuide">https://github.com/GrindGold/CppGuide</a></strong></p>
<h1 id="C-教程"><a href="#C-教程" class="headerlink" title="C++ 教程"></a>C++ 教程</h1><p><img src="https://edu.aliyun.com/files/course/2017/09-24/1539291c8853274278.png"></p>
<p>C++ 是一种中级语言，它是由 Bjarne Stroustrup 于 1979 年在贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，是一种面向对象的程序设计语言。C++ 可运行于多种平台上，如 Windows、MAC 操作系统以及 UNIX 的各种版本。</p>
<p>本教程通过通俗易懂的语言来讲解 C++ 编程语言。</p>
<p><strong>现在开始学习 C++ 编程！</strong></p>
<h2 id="谁适合阅读本教程？"><a href="#谁适合阅读本教程？" class="headerlink" title="谁适合阅读本教程？"></a>谁适合阅读本教程？</h2><p>本教程是专门为初学者打造的，帮助他们理解与 C++ 编程语言相关的基础到高级的概念。</p>
<h2 id="阅读本教程前，您需要了解的知识："><a href="#阅读本教程前，您需要了解的知识：" class="headerlink" title="阅读本教程前，您需要了解的知识："></a>阅读本教程前，您需要了解的知识：</h2><p>在您开始练习本教程中所给出的各种实例之前，您需要对计算机程序和计算机程序设计语言有基本的了解。</p>
<h2 id="编译-执行-C-程序"><a href="#编译-执行-C-程序" class="headerlink" title="编译&#x2F;执行 C++ 程序"></a>编译&#x2F;执行 C++ 程序</h2><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main()&#123;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>

<p>你可以用 “\n” 代替以上代码里的 “endl”。</p>
<h1 id="C-简介"><a href="#C-简介" class="headerlink" title="C++ 简介"></a>C++ 简介</h1><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p>
<p>C++ 被认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p>
<p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p>
<p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p>
<p><strong>注意：</strong>使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。</p>
<h2 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h2><p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：</p>
<ul>
<li>封装</li>
<li>抽象</li>
<li>继承</li>
<li>多态</li>
</ul>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>标准的 C++ 由三个重要部分组成：</p>
<ul>
<li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li>
<li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li>
<li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li>
</ul>
<h2 id="ANSI-标准"><a href="#ANSI-标准" class="headerlink" title="ANSI 标准"></a>ANSI 标准</h2><p>ANSI 标准是为了确保 C++ 的便携性 —— 您所编写的代码在 Mac、UNIX、Windows、Alpha 计算机上都能通过编译。</p>
<p>由于 ANSI 标准已稳定使用了很长的时间，所有主要的 C++ 编译器的制造商都支持 ANSI 标准。</p>
<h2 id="学习-C"><a href="#学习-C" class="headerlink" title="学习 C++"></a>学习 C++</h2><p>学习 C++，关键是要理解概念，而不应过于深究语言的技术细节。</p>
<p>学习程序设计语言的目的是为了成为一个更好的程序员，也就是说，是为了能更有效率地设计和实现新系统，以及维护旧系统。</p>
<p>C++ 支持多种编程风格。您可以使用 Fortran、C、Smalltalk 等任意一种语言的编程风格来编写代码。每种风格都能有效地保证运行时间效率和空间效率。</p>
<h2 id="C-的使用"><a href="#C-的使用" class="headerlink" title="C++ 的使用"></a>C++ 的使用</h2><p>基本上每个应用程序领域的程序员都有使用 C++。</p>
<p>C++ 通常用于编写设备驱动程序和其他要求实时性的直接操作硬件的软件。</p>
<p>C++ 广泛用于教学和研究。</p>
<p>任何一个使用苹果电脑或 Windows PC 机的用户都在间接地使用 C++，因为这些系统的主要用户接口是使用 C++ 编写的。</p>
<hr>
<h2 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h2><table>
<thead>
<tr>
<th align="left">发布时间</th>
<th align="left">文档</th>
<th align="left">通称</th>
<th align="left">备注</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">2015</td>
<td align="left">ISO&#x2F;IEC TS 19570:2015</td>
<td align="left">-</td>
<td align="left">用于并行计算的扩展</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2015</td>
<td align="left">ISO&#x2F;IEC TS 18822:2015</td>
<td align="left">-</td>
<td align="left">文件系统</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2014</td>
<td align="left">ISO&#x2F;IEC 14882:2014</td>
<td align="left">C++14</td>
<td align="left">第四个C++标准</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2011</td>
<td align="left">ISO&#x2F;IEC TR 24733:2011</td>
<td align="left">-</td>
<td align="left">十进制浮点数扩展</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2011</td>
<td align="left">ISO&#x2F;IEC 14882:2011</td>
<td align="left">C++11</td>
<td align="left">第三个C++标准</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2010</td>
<td align="left">ISO&#x2F;IEC TR 29124:2010</td>
<td align="left">-</td>
<td align="left">数学函数扩展</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2007</td>
<td align="left">ISO&#x2F;IEC TR 19768:2007</td>
<td align="left">C++TR1</td>
<td align="left">C++技术报告：库扩展</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2006</td>
<td align="left">ISO&#x2F;IEC TR 18015:2006</td>
<td align="left">-</td>
<td align="left">C++性能技术报告</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2003</td>
<td align="left">ISO&#x2F;IEC 14882:2003</td>
<td align="left">C++03</td>
<td align="left">第二个C++标准</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">1998</td>
<td align="left">ISO&#x2F;IEC 14882:1998</td>
<td align="left">C++98</td>
<td align="left">第一个C++标准</td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="C-环境设置"><a href="#C-环境设置" class="headerlink" title="C++ 环境设置"></a>C++ 环境设置</h1><h2 id="本地环境设置"><a href="#本地环境设置" class="headerlink" title="本地环境设置"></a>本地环境设置</h2><p>如果您想要设置 C++ 语言环境，您需要确保电脑上有以下两款可用的软件，文本编辑器和 C++ 编译器。</p>
<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>这将用于输入您的程序。文本编辑器包括 Windows Notepad、OS Edit command、Brief、Epsilon、EMACS 和 vim&#x2F;vi。</p>
<p>文本编辑器的名称和版本在不同的操作系统上可能会有所不同。例如，Notepad 通常用于 Windows 操作系统上，vim&#x2F;vi 可用于 Windows 和 Linux&#x2F;UNIX 操作系统上。</p>
<p>通过编辑器创建的文件通常称为源文件，源文件包含程序源代码。C++ 程序的源文件通常使用扩展名 .cpp、.cp 或 .c。</p>
<p>在开始编程之前，请确保您有一个文本编辑器，且有足够的经验来编写一个计算机程序，然后把它保存在一个文件中，编译并执行它。</p>
<h2 id="C-编译器"><a href="#C-编译器" class="headerlink" title="C++ 编译器"></a>C++ 编译器</h2><p>写在源文件中的源代码是人类可读的源。它需要”编译”，转为机器语言，这样 CPU 可以按给定指令执行程序。</p>
<p>C++ 编译器用于把源代码编译成最终的可执行程序。</p>
<p>大多数的 C++ 编译器并不在乎源文件的扩展名，但是如果您未指定扩展名，则默认使用 .cpp。</p>
<p>最常用的免费可用的编译器是 GNU 的 C&#x2F;C++ 编译器，如果您使用的是 HP 或 Solaris，则可以使用各自操作系统上的编译器。</p>
<p>以下部分将指导您如何在不同的操作系统上安装 GNU 的 C&#x2F;C++ 编译器。这里同时提到 C&#x2F;C++，主要是因为 GNU 的 gcc 编译器适合于 C 和 C++ 编程语言。</p>
<h2 id="安装-GNU-的-C-C-编译器"><a href="#安装-GNU-的-C-C-编译器" class="headerlink" title="安装 GNU 的 C&#x2F;C++ 编译器"></a>安装 GNU 的 C&#x2F;C++ 编译器</h2><h3 id="UNIX-Linux-上的安装"><a href="#UNIX-Linux-上的安装" class="headerlink" title="UNIX&#x2F;Linux 上的安装"></a>UNIX&#x2F;Linux 上的安装</h3><p>如果您使用的是 <strong>Linux 或 UNIX</strong>，请在命令行使用下面的命令来检查您的系统上是否安装了 GCC：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ -v</span><br></pre></td></tr></table></figure>

<p>如果您的计算机上已经安装了 GNU 编译器，则会显示如下消息：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Using built-in specs.Target: i386-redhat-linuxConfigured with: ../configure --prefix=/usr .......Thread model: posix</span><br><span class="line">gcc version <span class="number">4.1</span><span class="number">.2</span> <span class="number">20080704</span> (Red Hat <span class="number">4.1</span><span class="number">.2</span><span class="number">-46</span>)</span><br></pre></td></tr></table></figure>

<p>如果未安装 GCC，那么请按照 <a href="http://gcc.gnu.org/install/">http://gcc.gnu.org/install/</a> 上的详细说明安装 GCC。</p>
<h3 id="Mac-OS-X-上的安装"><a href="#Mac-OS-X-上的安装" class="headerlink" title="Mac OS X 上的安装"></a>Mac OS X 上的安装</h3><p>如果您使用的是 Mac OS X，最快捷的获取 GCC 的方法是从苹果的网站上下载 Xcode 开发环境，并按照安装说明进行安装。一旦安装上 Xcode，您就能使用 GNU 编译器。</p>
<p>Xcode 目前可从 developer.apple.com&#x2F;technologies&#x2F;tools&#x2F; 上下载。</p>
<h3 id="Windows-上的安装"><a href="#Windows-上的安装" class="headerlink" title="Windows 上的安装"></a>Windows 上的安装</h3><p>为了在 Windows 上安装 GCC，您需要安装 MinGW。为了安装 MinGW，请访问 MinGW 的主页 <a href="http://www.mingw.org,进入/">www.mingw.org，进入</a> MinGW 下载页面，下载最新版本的 MinGW 安装程序，命名格式为 MinGW-<version>.exe。</p>
<p>当安装 MinGW 时，您至少要安装 gcc-core、gcc-g++、binutils 和 MinGW runtime，但是一般情况下都会安装更多其他的项。</p>
<p>添加您安装的 MinGW 的 bin 子目录到您的 <strong>PATH</strong> 环境变量中，这样您就可以在命令行中通过简单的名称来指定这些工具。</p>
<p>当完成安装时，您可以从 Windows 命令行上运行 gcc、g++、ar、ranlib、dlltool 和其他一些 GNU 工具。</p>
<hr>
<h2 id="使用-Visual-Studio-Graphical-Interface-编译"><a href="#使用-Visual-Studio-Graphical-Interface-编译" class="headerlink" title="使用 Visual Studio (Graphical Interface) 编译"></a>使用 Visual Studio (Graphical Interface) 编译</h2><p>1、下载及安装 Visual Studio Community 2015。</p>
<p>2、打开 Visual Studio Community</p>
<p>3、点击 File -&gt; New -&gt; Project</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/154425967c4e731874.png" alt="img"></p>
<p>4、左侧列表选择 Templates -&gt; Visual C++ -&gt; Win32 Console Application，并设置项目名为 MyFirstProgram。</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/154430e60ee9018384.png" alt="img"></p>
<p>5、点击 OK。</p>
<p>6、在以下窗口中点击 Next</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/15444190dd2e989801.png" alt="img"></p>
<p>7、在弹出的窗口中选择 Empty project 选项后，点击 Finish 按钮：</p>
<p>8、右击文件夹 Source File 并点击 Add –&gt; New Item… :</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/15445135154c170829.png" alt="img"></p>
<p>9、选择 C++ File 然后设置文件名为 main.cpp，然后点击 Add：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/154459b03a55098499.png" alt="img"></p>
<p>10、拷贝以下代码到 main.cpp 中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>int main()&#123;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>界面如下所示：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/15450518149e040143.png" alt="img"></p>
<p>11、点击菜单上的 Debug -&gt; Start Without Debugging (或按下 ctrl + F5) :</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/154511746480630632.png" alt="img"></p>
<p>12、完成以上操作后，你可以看到以下输出：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/154519fb938f394280.png" alt="img"></p>
<hr>
<h2 id="g-应用说明"><a href="#g-应用说明" class="headerlink" title="g++ 应用说明"></a>g++ 应用说明</h2><p>程序 g++ 是将 gcc 默认语言设为 C++ 的一个特殊的版本，链接时它自动使用 C++ 标准库而不用 C 标准库。通过遵循源码的命名规范并指定对应库的名字，用 gcc 来编译链接 C++ 程序是可行的，如下例所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ gcc main.cpp -lstdc++ -o main</span><br></pre></td></tr></table></figure>

<p>下面是一个保存在文件 helloworld.cpp 中一个简单的 C++ 程序的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main()&#123;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>最简单的编译方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ helloworld.cpp</span><br></pre></td></tr></table></figure>

<p>由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ ./a.outHello, world!</span><br></pre></td></tr></table></figure>

<p>通常我们使用 <strong>-o</strong> 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ helloworld.cpp -o helloworld</span><br></pre></td></tr></table></figure>

<p>执行 helloworld:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ ./helloworldHello, world!</span><br></pre></td></tr></table></figure>

<p>如果是多个 C++ 代码文件，如 runoob1.cpp、runoob2.cpp，编译命令如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ runoob1.cpp cpp、runoob2.cpp -o runoob</span><br></pre></td></tr></table></figure>

<p>生成一个 runoob 可执行文件。</p>
<p>g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">g++ -g -Wall -std=c++<span class="number">11</span> main.cpp</span><br></pre></td></tr></table></figure>

<h3 id="g-常用命令选项"><a href="#g-常用命令选项" class="headerlink" title="g++ 常用命令选项"></a>g++ 常用命令选项</h3><table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-ansi</td>
<td align="left">只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">只编译并生成目标文件。</td>
</tr>
<tr>
<td align="left">-DMACRO</td>
<td align="left">以字符串”1”定义 MACRO 宏。</td>
</tr>
<tr>
<td align="left">-DMACRO&#x3D;DEFN</td>
<td align="left">以字符串”DEFN”定义 MACRO 宏。</td>
</tr>
<tr>
<td align="left">-E</td>
<td align="left">只运行 C 预编译器。</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">生成调试信息。GNU 调试器可利用该信息。</td>
</tr>
<tr>
<td align="left">-IDIRECTORY</td>
<td align="left">指定额外的头文件搜索路径DIRECTORY。</td>
</tr>
<tr>
<td align="left">-LDIRECTORY</td>
<td align="left">指定额外的函数库搜索路径DIRECTORY。</td>
</tr>
<tr>
<td align="left">-lLIBRARY</td>
<td align="left">连接时搜索指定的函数库LIBRARY。</td>
</tr>
<tr>
<td align="left">-m486</td>
<td align="left">针对 486 进行代码优化。</td>
</tr>
<tr>
<td align="left">-o</td>
<td align="left">FILE 生成指定的输出文件。用在生成可执行文件时。</td>
</tr>
<tr>
<td align="left">-O0</td>
<td align="left">不进行优化处理。</td>
</tr>
<tr>
<td align="left">-O</td>
<td align="left">或 -O1 优化生成代码。</td>
</tr>
<tr>
<td align="left">-O2</td>
<td align="left">进一步优化。</td>
</tr>
<tr>
<td align="left">-O3</td>
<td align="left">比 -O2 更进一步优化，包括 inline 函数。</td>
</tr>
<tr>
<td align="left">-shared</td>
<td align="left">生成共享目标文件。通常用在建立共享库时。</td>
</tr>
<tr>
<td align="left">-static</td>
<td align="left">禁止使用共享连接。</td>
</tr>
<tr>
<td align="left">-UMACRO</td>
<td align="left">取消对 MACRO 宏的定义。</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">不生成任何警告信息。</td>
</tr>
<tr>
<td align="left">-Wall</td>
<td align="left">生成所有警告信息。</td>
</tr>
</tbody></table>
<h1 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C++ 基本语法"></a>C++ 基本语法</h1><p>C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。现在让我们简要地看一下什么是类、对象，方法、即时变量。</p>
<ul>
<li><strong>对象 -</strong> 对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例。</li>
<li><strong>类 -</strong> 类可以定义为描述对象行为&#x2F;状态的模板&#x2F;蓝图。</li>
<li><strong>方法 -</strong> 从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作。</li>
<li><strong>即时变量 -</strong> 每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的。</li>
</ul>
<h2 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C++ 程序结构"></a>C++ 程序结构</h2><p>让我们看一段简单的代码，可以输出单词 <em>Hello World</em>。</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; <span class="comment">// main() 是程序开始执行的地方 </span></span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;   </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span>; <span class="comment">// 输出 Hello World   return 0;</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们讲解一下上面这段程序：</p>
<ul>
<li>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 **<iostream>**。</li>
<li>行 <strong>using namespace std;</strong> 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</li>
<li>下一行 <strong>&#x2F;&#x2F; main() 是程序开始执行的地方</strong> 是一个单行注释。单行注释以 &#x2F;&#x2F; 开头，在行末结束。</li>
<li>下一行 <strong>int main()</strong> 是主函数，程序从这里开始执行。</li>
<li>下一行 <strong>cout &lt;&lt; “Hello World”;</strong> 会在屏幕上显示消息 “Hello World”。</li>
<li>下一行 <strong>return 0;</strong> 终止 main( )函数，并向调用进程返回值 0。</li>
</ul>
<h2 id="编译-执行-C-程序-1"><a href="#编译-执行-C-程序-1" class="headerlink" title="编译 &amp; 执行 C++ 程序"></a>编译 &amp; 执行 C++ 程序</h2><p>接下来让我们看看如何把源代码保存在一个文件中，以及如何编译并运行它。下面是简单的步骤：</p>
<ul>
<li>打开一个文本编辑器，添加上述代码。</li>
<li>保存文件为 hello.cpp。</li>
<li>打开命令提示符，进入到保存文件所在的目录。</li>
<li>键入 ‘g++ hello.cpp ‘，输入回车，编译代码。如果代码中没有错误，命令提示符会跳到下一行，并生成 a.out 可执行文件。</li>
<li>现在，键入 ‘ a.out’ 来运行程序。</li>
<li>您可以看到屏幕上显示 ‘ Hello World ‘。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ hello.cpp$ ./a.outHello World</span><br></pre></td></tr></table></figure>

<p>请确保您的路径中已包含 g++ 编译器，并确保在包含源文件 hello.cpp 的目录中运行它。</p>
<p>您也可以使用 makefile 来编译 C&#x2F;C++ 程序。</p>
<h2 id="C-中的分号-块"><a href="#C-中的分号-块" class="headerlink" title="C++ 中的分号 &amp; 块"></a>C++ 中的分号 &amp; 块</h2><p>在 C++ 中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p>
<p>例如，下面是三个不同的语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x = y;y = y+<span class="number">1</span>;<span class="built_in">add</span>(x, y);</span><br></pre></td></tr></table></figure>

<p>块是一组使用大括号括起来的按逻辑连接的语句。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;   cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span>; <span class="comment">// 输出 Hello World   return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>C++ 不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x = y;y = y+<span class="number">1</span>;<span class="built_in">add</span>(x, y);</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x = y; y = y+<span class="number">1</span>; <span class="built_in">add</span>(x, y);</span><br></pre></td></tr></table></figure>

<h2 id="C-标识符"><a href="#C-标识符" class="headerlink" title="C++ 标识符"></a>C++ 标识符</h2><p>C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p>
<p>C++ 标识符内不允许出现标点字符，比如 @、$ 和 %。C++ 是区分大小写的编程语言。因此，在 C++ 中，<strong>Manpower</strong> 和 <strong>manpower</strong> 是两个不同的标识符。</p>
<p>下面列出几个有效的标识符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mohd       zara    abc   move_name  a_123myname50   _temp   j     a23b9      retVal</span><br></pre></td></tr></table></figure>

<h2 id="C-关键字"><a href="#C-关键字" class="headerlink" title="C++ 关键字"></a>C++ 关键字</h2><p>下表列出了 C++ 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p>
<table>
<thead>
<tr>
<th>asm</th>
<th>else</th>
<th>new</th>
<th>this</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>enum</td>
<td>operator</td>
<td>throw</td>
</tr>
<tr>
<td>bool</td>
<td>explicit</td>
<td>private</td>
<td>true</td>
</tr>
<tr>
<td>break</td>
<td>export</td>
<td>protected</td>
<td>try</td>
</tr>
<tr>
<td>case</td>
<td>extern</td>
<td>public</td>
<td>typedef</td>
</tr>
<tr>
<td>catch</td>
<td>false</td>
<td>register</td>
<td>typeid</td>
</tr>
<tr>
<td>char</td>
<td>float</td>
<td>reinterpret_cast</td>
<td>typename</td>
</tr>
<tr>
<td>class</td>
<td>for</td>
<td>return</td>
<td>union</td>
</tr>
<tr>
<td>const</td>
<td>friend</td>
<td>short</td>
<td>unsigned</td>
</tr>
<tr>
<td>const_cast</td>
<td>goto</td>
<td>signed</td>
<td>using</td>
</tr>
<tr>
<td>continue</td>
<td>if</td>
<td>sizeof</td>
<td>virtual</td>
</tr>
<tr>
<td>default</td>
<td>inline</td>
<td>static</td>
<td>void</td>
</tr>
<tr>
<td>delete</td>
<td>int</td>
<td>static_cast</td>
<td>volatile</td>
</tr>
<tr>
<td>do</td>
<td>long</td>
<td>struct</td>
<td>wchar_t</td>
</tr>
<tr>
<td>double</td>
<td>mutable</td>
<td>switch</td>
<td>while</td>
</tr>
<tr>
<td>dynamic_cast</td>
<td>namespace</td>
<td>template</td>
<td></td>
</tr>
</tbody></table>
<h2 id="三字符组"><a href="#三字符组" class="headerlink" title="三字符组"></a>三字符组</h2><p>三字符组就是用于表示另一个字符的三个字符序列，又称为三字符序列。三字符序列总是以两个问号开头。</p>
<p>三字符序列不太常见，但 C++ 标准允许把某些字符指定为三字符序列。以前为了表示键盘上没有的字符，这是必不可少的一种方法。</p>
<p>三字符序列可以出现在任何地方，包括字符串、字符序列、注释和预处理指令。</p>
<p>下面列出了最常用的三字符序列：</p>
<table>
<thead>
<tr>
<th align="left">三字符组</th>
<th align="left">替换</th>
</tr>
</thead>
<tbody><tr>
<td align="left">??&#x3D;</td>
<td align="left">#</td>
</tr>
<tr>
<td align="left">??&#x2F;</td>
<td align="left">\</td>
</tr>
<tr>
<td align="left">??’</td>
<td align="left">^</td>
</tr>
<tr>
<td align="left">??(</td>
<td align="left">[</td>
</tr>
<tr>
<td align="left">??)</td>
<td align="left">]</td>
</tr>
<tr>
<td align="left">??!</td>
<td align="left">|</td>
</tr>
<tr>
<td align="left">??&lt;</td>
<td align="left">{</td>
</tr>
<tr>
<td align="left">??&gt;</td>
<td align="left">}</td>
</tr>
<tr>
<td align="left">??-</td>
<td align="left">~</td>
</tr>
</tbody></table>
<p>如果希望在源程序中有两个连续的问号，且不希望被预处理器替换，这种情况出现在字符常量、字符串字面值或者是程序注释中，可选办法是用字符串的自动连接：”…?””?…”或者转义序列：”…??…”。</p>
<p>从Microsoft Visual C++ 2010版开始，该编译器默认不再自动替换三字符组。如果需要使用三字符组替换（如为了兼容古老的软件代码），需要设置编译器命令行选项&#x2F;Zc:trigraphs</p>
<p>g++仍默认支持三字符组，但会给出编译警告。</p>
<h2 id="C-中的空格"><a href="#C-中的空格" class="headerlink" title="C++ 中的空格"></a>C++ 中的空格</h2><p>只包含空格的行，被称为空白行，可能带有注释，C++ 编译器会完全忽略它。</p>
<p>在 C++ 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age;</span><br></pre></td></tr></table></figure>

<p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fruit = apples + oranges;   <span class="comment">// 获取水果的总数</span></span><br></pre></td></tr></table></figure>

<p>fruit 和 &#x3D;，或者 &#x3D; 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。</p>
<h1 id="C-注释"><a href="#C-注释" class="headerlink" title="C++ 注释"></a>C++ 注释</h1><p>程序的注释是解释性语句，您可以在 C++ 代码中包含注释，这将提高源代码的可读性。所有的编程语言都允许某种形式的注释。</p>
<p>C++ 支持单行注释和多行注释。注释中的所有字符会被 C++ 编译器忽略。</p>
<p>C++ 注释以 &#x2F;* 开始，以 *&#x2F; 终止。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这是注释 */</span><span class="comment">/* C++ 注释也可以</span></span><br><span class="line"><span class="comment"> * 跨行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>注释也能以 &#x2F;&#x2F; 开始，直到行末为止。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;main()&#123;</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span>; <span class="comment">// 输出 Hello World</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译时，编译器会忽略 <strong>&#x2F;&#x2F; 输出 Hello World</strong>，最后会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;* 和 <em>&#x2F; 注释内部，&#x2F;&#x2F; 字符没有特殊的含义。在 &#x2F;&#x2F; 注释内，&#x2F;</em> 和 *&#x2F; 字符也没有特殊的含义。因此，您可以在一种注释内嵌套另一种注释。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">/* 用于输出 Hello World 的注释</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;Hello World&quot;; // 输出 Hello World</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h1 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C++ 数据类型"></a>C++ 数据类型</h1><p>使用编程语言进行编程时，需要用到各种变量来存储各种信息。变量保留的是它所存储的值的内存位置。这意味着，当您创建一个变量时，就会在内存中保留一些空间。</p>
<p>您可能需要存储各种数据类型（比如字符型、宽字符型、整型、浮点型、双浮点型、布尔型等）的信息，操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。</p>
<h2 id="基本的内置类型"><a href="#基本的内置类型" class="headerlink" title="基本的内置类型"></a>基本的内置类型</h2><p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="left">布尔型</td>
<td align="left">bool</td>
</tr>
<tr>
<td align="left">字符型</td>
<td align="left">char</td>
</tr>
<tr>
<td align="left">整型</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">浮点型</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">双浮点型</td>
<td align="left">double</td>
</tr>
<tr>
<td align="left">无类型</td>
<td align="left">void</td>
</tr>
<tr>
<td align="left">宽字符型</td>
<td align="left">wchar_t</td>
</tr>
</tbody></table>
<p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p>
<ul>
<li>signed</li>
<li>unsigned</li>
<li>short</li>
<li>long</li>
</ul>
<p>下表显示了各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">位</th>
<th align="left">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="left">char</td>
<td align="left">1 个字节</td>
<td align="left">-128 到 127 或者 0 到 255</td>
</tr>
<tr>
<td align="left">unsigned char</td>
<td align="left">1 个字节</td>
<td align="left">0 到 255</td>
</tr>
<tr>
<td align="left">signed char</td>
<td align="left">1 个字节</td>
<td align="left">-128 到 127</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">4 个字节</td>
<td align="left">-2147483648 到 2147483647</td>
</tr>
<tr>
<td align="left">unsigned int</td>
<td align="left">4 个字节</td>
<td align="left">0 到 4294967295</td>
</tr>
<tr>
<td align="left">signed int</td>
<td align="left">4 个字节</td>
<td align="left">-2147483648 到 2147483647</td>
</tr>
<tr>
<td align="left">short int</td>
<td align="left">2 个字节</td>
<td align="left">-32768 到 32767</td>
</tr>
<tr>
<td align="left">unsigned short int</td>
<td align="left">2 个字节</td>
<td align="left">0 到 65,535</td>
</tr>
<tr>
<td align="left">signed short int</td>
<td align="left">2 个字节</td>
<td align="left">-32768 到 32767</td>
</tr>
<tr>
<td align="left">long int</td>
<td align="left">8 个字节</td>
<td align="left">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td align="left">signed long int</td>
<td align="left">8 个字节</td>
<td align="left">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td align="left">unsigned long int</td>
<td align="left">8 个字节</td>
<td align="left">0 to 18,446,744,073,709,551,615</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">4 个字节</td>
<td align="left">+&#x2F;- 3.4e +&#x2F;- 38 (~7 个数字)</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">8 个字节</td>
<td align="left">+&#x2F;- 1.7e +&#x2F;- 308 (~15 个数字)</td>
</tr>
<tr>
<td align="left">long double</td>
<td align="left">8 个字节</td>
<td align="left">+&#x2F;- 1.7e +&#x2F;- 308 (~15 个数字)</td>
</tr>
<tr>
<td align="left">wchar_t</td>
<td align="left">2 或 4 个字节</td>
<td align="left">1 个宽字符</td>
</tr>
</tbody></table>
<p>从上表可得知，变量的大小会根据编译器和所使用的电脑而有所不同。</p>
<p>下面实例会输出您电脑上各种数据类型的大小。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main()&#123;   </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of char : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;   </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of int : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;  </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of short int : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span> <span class="type">int</span>) &lt;&lt; endl;  </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of long int : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">int</span>) &lt;&lt; endl;   </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of float : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>) &lt;&lt; endl;   </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of double : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>) &lt;&lt; endl;  </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of wchar_t : &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">wchar_t</span>) &lt;&lt; endl;   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本实例使用了 <strong>endl</strong>，这将在每一行后插入一个换行符，&lt;&lt; 运算符用于向屏幕传多个值。我们也使用 <strong>sizeof()</strong> 函数来获取各种数据类型的大小。</p>
<p>当上面的代码被编译和执行时，它会产生以下的结果，结果会根据所使用的计算机而有所不同：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Size of <span class="type">char</span> : <span class="number">1</span>Size of <span class="type">int</span> : <span class="number">4</span>Size of <span class="type">short</span> <span class="type">int</span> : <span class="number">2</span>Size of <span class="type">long</span> <span class="type">int</span> : <span class="number">8</span>Size of <span class="type">float</span> : <span class="number">4</span>Size of <span class="type">double</span> : <span class="number">8</span>Size of <span class="type">wchar_t</span> : <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="typedef-声明"><a href="#typedef-声明" class="headerlink" title="typedef 声明"></a>typedef 声明</h2><p>您可以使用 <strong>typedef</strong> 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> type newname;</span><br></pre></td></tr></table></figure>

<p>例如，下面的语句会告诉编译器，feet 是 int 的另一个名称：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> feet;</span><br></pre></td></tr></table></figure>

<p>现在，下面的声明是完全合法的，它创建了一个整型变量 distance：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">feet distance;</span><br></pre></td></tr></table></figure>

<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p>
<p>如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p>
<p>创建枚举，需要使用关键字 <strong>enum</strong>。枚举类型的一般形式为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">enum</span>-name &#123; list of names &#125; var-list;</span><br></pre></td></tr></table></figure>

<p>在这里，enum-name 是枚举类型的名称。名称列表 { list of names } 是用逗号分隔的。</p>
<p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 “blue”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">color</span> &#123; red, green, blue &#125; c;c = blue;</span><br></pre></td></tr></table></figure>

<p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，<strong>green</strong> 的值为 5。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">color</span> &#123; red, green=<span class="number">5</span>, blue &#125;;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>blue</strong> 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1。</p>
<h1 id="C-变量类型"><a href="#C-变量类型" class="headerlink" title="C++ 变量类型"></a>C++ 变量类型</h1><p>变量其实只不过是程序可操作的存储区的名称。C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p>
<p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C++ 是大小写敏感的。</p>
<p>基于前一章讲解的基本类型，有以下几种基本的变量类型，将在下一章中进行讲解：</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bool</td>
<td align="left">存储值 true 或 false。</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">通常是一个八位字节（一个字节）。这是一个整数类型。</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">对机器而言，整数的最自然的大小。</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">单精度浮点值。</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">双精度浮点值。</td>
</tr>
<tr>
<td align="left">void</td>
<td align="left">表示类型的缺失。</td>
</tr>
<tr>
<td align="left">wchar_t</td>
<td align="left">宽字符类型。</td>
</tr>
</tbody></table>
<p>C++ 也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、引用、数据结构、类</strong>等等，这将会在后续的章节中进行讲解。</p>
<p>下面我们将讲解如何定义、声明和使用各种类型的变量。</p>
<h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C++ 中的变量定义"></a>C++ 中的变量定义</h2><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">type variable_list;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>type</strong> 必须是一个有效的 C++ 数据类型，可以是 char、wchar_t、int、float、double、bool 或任何用户自定义的对象，<strong>variable_list</strong> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>    i, j, k;<span class="type">char</span>   c, ch;<span class="type">float</span>  f, salary;<span class="type">double</span> d;</span><br></pre></td></tr></table></figure>

<p>行 <strong>int i, j, k;</strong> 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。</p>
<p>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">type variable_name = value;</span><br></pre></td></tr></table></figure>

<p>下面列举几个实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> d = <span class="number">3</span>, f = <span class="number">5</span>;   </span><br><span class="line">	<span class="comment">// d 和 f 的声明 int d = 3, f = 5;          </span></span><br><span class="line">	<span class="comment">// 定义并初始化 d 和 fbyte z = 22;               </span></span><br><span class="line">	<span class="comment">// 定义并初始化 zchar x = &#x27;x&#x27;;              </span></span><br><span class="line">	<span class="comment">// 变量 x 的值为 &#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>

<p>不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。</p>
<h2 id="C-中的变量声明"><a href="#C-中的变量声明" class="headerlink" title="C++ 中的变量声明"></a>C++ 中的变量声明</h2><p>变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p>
<p>当您使用多个文件且只在其中一个文件中定义变量时（定义变量的文件在程序连接时是可用的），变量声明就显得非常有用。您可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量。虽然您可以在 C++ 程序中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次。</p>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>尝试下面的实例，其中，变量在头部就已经被声明，但它们是在主函数内被定义和初始化的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;<span class="comment">// 变量声明extern int a, b;extern int c;extern float f;</span></span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 变量定义</span></span><br><span class="line">  <span class="type">int</span> a, b;</span><br><span class="line">  <span class="type">int</span> c;</span><br><span class="line">  <span class="type">float</span> f;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 实际初始化</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  c = a + b;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line"></span><br><span class="line">  f = <span class="number">70.0</span>/<span class="number">3.0</span>;</span><br><span class="line">  cout &lt;&lt; f &lt;&lt; endl ;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">3023.3333</span></span><br></pre></td></tr></table></figure>

<p>同样的，在函数声明时，提供一个函数名，而函数的实际定义则可以在任何地方进行。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明int func();int main()&#123;</span></span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">func</span>();&#125;<span class="comment">// 函数定义int func()&#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a href="#C-中的左值（Lvalues）和右值（Rvalues）" class="headerlink" title="C++ 中的左值（Lvalues）和右值（Rvalues）"></a>C++ 中的左值（Lvalues）和右值（Rvalues）</h2><p>C++ 中有两种类型的表达式：</p>
<ul>
<li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>
<li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>
</ul>
<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h1 id="C-变量作用域"><a href="#C-变量作用域" class="headerlink" title="C++ 变量作用域"></a>C++ 变量作用域</h1><p>作用域是程序的一个区域，一般来说有三个地方可以声明变量：</p>
<ul>
<li>在函数或一个代码块内部声明的变量，称为局部变量。</li>
<li>在函数参数的定义中声明的变量，称为形式参数。</li>
<li>在所有函数外部声明的变量，称为全局变量。</li>
</ul>
<p>我们将在后续的章节中学习什么是函数和参数。本章我们先来讲解声明是局部变量和全局变量。</p>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在函数或一个代码块内部声明的变量，称为局部变量。它们只能被函数内部或者代码块内部的语句使用。下面的实例使用了局部变量：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> a, b;</span><br><span class="line">  <span class="type">int</span> c;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 实际初始化</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  c = a + b;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; c;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>在所有函数外部定义的变量（通常是在程序的头部），称为全局变量。全局变量的值在程序的整个生命周期内都是有效的。</p>
<p>全局变量可以被任何函数访问。也就是说，全局变量一旦声明，在整个程序中都是可用的。下面的实例使用了全局变量和局部变量：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="comment">// 全局变量声明int g;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> a, b;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 实际初始化</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  g = a + b;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。下面是一个实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="comment">// 全局变量声明int g = 20;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化局部变量和全局变量"><a href="#初始化局部变量和全局变量" class="headerlink" title="初始化局部变量和全局变量"></a>初始化局部变量和全局变量</h2><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动初始化为下列值：</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="left">初始化默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">int</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">‘\0’</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">pointer</td>
<td align="left">NULL</td>
</tr>
</tbody></table>
<p>正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果。</p>
<h1 id="C-常量"><a href="#C-常量" class="headerlink" title="C++ 常量"></a>C++ 常量</h1><p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p>
<p>常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串和布尔值。</p>
<p>常量就像是常规的变量，只不过常量的值在定义后不能进行修改。</p>
<h2 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>
<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p>
<p>下面列举几个整数常量的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">212</span>         <span class="comment">// 合法的215u        // 合法的0xFeeL      // 合法的078         // 非法的：8 不是八进制的数字032UU       // 非法的：不能重复后缀</span></span><br></pre></td></tr></table></figure>

<p>以下是各种类型的整数常量的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">85</span>         <span class="comment">// 十进制0213       // 八进制 0x4b       // 十六进制 30         // 整数 30u        // 无符号整数 30l        // 长整数 30ul       // 无符号长整数</span></span><br></pre></td></tr></table></figure>

<h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。</p>
<p>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。</p>
<p>下面列举几个浮点常量的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14159</span>       <span class="comment">// 合法的 314159E-5L    // 合法的 510E          // 非法的：不完整的指数210f          // 非法的：没有小数或指数.e55          // 非法的：缺少整数或分数</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h2><p>布尔常量共有两个，它们都是标准的 C++ 关键字：</p>
<ul>
<li><strong>true</strong> 值代表真。</li>
<li><strong>false</strong> 值代表假。</li>
</ul>
<p>我们不应把 true 的值看成 1，把 false 的值看成 0。</p>
<h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><p>字符常量是括在单引号中。如果常量以 L（仅当大写时）开头，则表示它是一个宽字符常量（例如 L’x’），此时它必须存储在 <strong>wchar_t</strong> 类型的变量中。否则，它就是一个窄字符常量（例如 ‘x’），此时它可以存储在 <strong>char</strong> 类型的简单变量中。</p>
<p>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如 ‘\t’），或一个通用的字符（例如 ‘\u02C0’）。</p>
<p>在 C++ 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。下表列出了一些这样的转义序列码：</p>
<table>
<thead>
<tr>
<th align="left">转义序列</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="left">\ 字符</td>
</tr>
<tr>
<td align="left">&#39;</td>
<td align="left">‘ 字符</td>
</tr>
<tr>
<td align="left">&quot;</td>
<td align="left">“ 字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">? 字符</td>
</tr>
<tr>
<td align="left">\a</td>
<td align="left">警报铃声</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">退格键</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页符</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行符</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">水平制表符</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表符</td>
</tr>
<tr>
<td align="left">\ooo</td>
<td align="left">一到三位的八进制数</td>
</tr>
<tr>
<td align="left">\xhh . . .</td>
<td align="left">一个或多个数字的十六进制数</td>
</tr>
</tbody></table>
<p>下面的实例显示了一些转义序列字符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main()&#123;   cout &lt;&lt; <span class="string">&quot;Hello\tWorld\n\n&quot;</span>;   return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Hello   World</span><br></pre></td></tr></table></figure>

<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串字面值或常量是括在双引号 “” 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p>
<p>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。</p>
<p>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;quot;hello, dear&quot;</span><span class="string">&quot;hello, \dear&quot;</span><span class="string">&quot;hello, &quot;</span> <span class="string">&quot;d&quot;</span> <span class="string">&quot;ear&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>在 C++ 中，有两种简单的定义常量的方式：</p>
<ul>
<li>使用 <strong>#define</strong> 预处理器。</li>
<li>使用 <strong>const</strong> 关键字。</li>
</ul>
<h2 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h2><p>下面是使用 #define 预处理器定义常量的形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> identifier value</span></span><br></pre></td></tr></table></figure>

<p>具体请看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;#<span class="keyword">define</span> LENGTH 10   #<span class="keyword">define</span> WIDTH  5#<span class="keyword">define</span> NEWLINE <span class="string">&#x27;\n&#x27;</span>int main()&#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> area;  </span><br><span class="line">   </span><br><span class="line">   area = LENGTH * WIDTH;</span><br><span class="line">   cout &lt;&lt; area;</span><br><span class="line">   cout &lt;&lt; NEWLINE;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>

<h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p>您可以使用 <strong>const</strong> 前缀声明指定类型的常量，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> type variable = value;</span><br></pre></td></tr></table></figure>

<p>具体请看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main()&#123;</span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span>  LENGTH = <span class="number">10</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">int</span>  WIDTH  = <span class="number">5</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span> NEWLINE = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   <span class="type">int</span> area;  </span><br><span class="line">   </span><br><span class="line">   area = LENGTH * WIDTH;</span><br><span class="line">   cout &lt;&lt; area;</span><br><span class="line">   cout &lt;&lt; NEWLINE;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>请注意，把常量定义为大写字母形式，是一个很好的编程实践。</p>
<h1 id="C-修饰符类型"><a href="#C-修饰符类型" class="headerlink" title="C++ 修饰符类型"></a>C++ 修饰符类型</h1><p>C++ 允许在 <strong>char、int 和 double</strong> 数据类型前放置修饰符。修饰符用于改变基本类型的含义，所以它更能满足各种情境的需求。</p>
<p>下面列出了数据类型修饰符：</p>
<ul>
<li>signed</li>
<li>unsigned</li>
<li>long</li>
<li>short</li>
</ul>
<p>修饰符 <strong>signed、unsigned、long 和 short</strong> 可应用于整型，<strong>signed</strong> 和 <strong>unsigned</strong> 可应用于字符型，<strong>long</strong> 可应用于双精度型。</p>
<p>修饰符 <strong>signed</strong> 和 <strong>unsigned</strong> 也可以作为 <strong>long</strong> 或 <strong>short</strong> 修饰符的前缀。例如：<strong>unsigned long int</strong>。</p>
<p>C++ 允许使用速记符号来声明<strong>无符号短整数</strong>或<strong>无符号长整数</strong>。您可以不写 int，只写单词 <strong>unsigned、short</strong> 或 <strong>unsigned、long</strong>，int 是隐含的。例如，下面的两个语句都声明了无符号整型变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> x;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> y;</span><br></pre></td></tr></table></figure>

<p>为了理解 C++ 解释有符号整数和无符号整数修饰符之间的差别，我们来运行一下下面这个短程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 这个程序演示了有符号整数和无符号整数之间的差别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">short</span> <span class="type">int</span> i;           <span class="comment">// 有符号短整数</span></span><br><span class="line">   <span class="type">short</span> <span class="type">unsigned</span> <span class="type">int</span> j;  <span class="comment">// 无符号短整数</span></span><br><span class="line"></span><br><span class="line">   j = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">   i = j;</span><br><span class="line">   cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的程序运行时，会输出下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">-15536</span> <span class="number">50000</span></span><br></pre></td></tr></table></figure>

<p>上述结果中，无符号短整数 50,000 的位模式被解释为有符号短整数 -15,536。</p>
<h2 id="C-中的类型限定符"><a href="#C-中的类型限定符" class="headerlink" title="C++ 中的类型限定符"></a>C++ 中的类型限定符</h2><p>类型限定符提供了变量的额外信息。</p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">const</td>
<td align="left"><strong>const</strong> 类型的对象在程序执行期间不能被修改改变。</td>
</tr>
<tr>
<td align="left">volatile</td>
<td align="left">修饰符 <strong>volatile</strong> 告诉编译器，变量的值可能以程序未明确指定的方式被改变。</td>
</tr>
<tr>
<td align="left">restrict</td>
<td align="left">由 <strong>restrict</strong> 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td>
</tr>
</tbody></table>
<h1 id="C-存储类"><a href="#C-存储类" class="headerlink" title="C++ 存储类"></a>C++ 存储类</h1><p>存储类定义 C++ 程序中变量&#x2F;函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p>
<ul>
<li>auto</li>
<li>register</li>
<li>static</li>
<li>extern</li>
<li>mutable</li>
<li>thread_local (C++11)</li>
</ul>
<p>从 C++ 11 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p>
<h2 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h2><p>自 C++ 11 以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p>
<p>C++98标准中auto关键字用于自动变量的声明，但由于使用极少且多余，在C++11中已删除这一用法。</p>
<p>根据初始化表达式自动推断被声明的变量的类型，如：</p>
<p>auto f&#x3D;3.14;    &#x2F;&#x2F;doubleauto s(“hello”);  &#x2F;&#x2F;const char<em>auto z &#x3D; new auto(9); &#x2F;&#x2F; int</em>auto x1 &#x3D; 5, x2 &#x3D; 5.0, x3&#x3D;’r’;&#x2F;&#x2F;错误，必须是初始化为同一类型</p>
<h2 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h2><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>
<p>{  register int miles;}</p>
<p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>
<h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>
<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>
<p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p>
<h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="comment">// 函数声明 void func(void); </span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">10</span>; <span class="comment">/* 全局变量 */</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(count--)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">func</span>();    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;<span class="comment">// 函数定义void func( void )&#123;</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">5</span>; <span class="comment">// 局部静态变量</span></span><br><span class="line">    i++;    std::cout &lt;&lt; <span class="string">&quot;变量 i 为 &quot;</span> &lt;&lt; i ;    std::cout &lt;&lt; <span class="string">&quot; , 变量 count 为 &quot;</span> &lt;&lt; count &lt;&lt; std::endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">变量 i 为 <span class="number">6</span> , 变量 count 为 <span class="number">9</span>变量 i 为 <span class="number">7</span> , 变量 count 为 <span class="number">8</span>变量 i 为 <span class="number">8</span> , 变量 count 为 <span class="number">7</span>变量 i 为 <span class="number">9</span> , 变量 count 为 <span class="number">6</span>变量 i 为 <span class="number">10</span> , 变量 count 为 <span class="number">5</span>变量 i 为 <span class="number">11</span> , 变量 count 为 <span class="number">4</span>变量 i 为 <span class="number">12</span> , 变量 count 为 <span class="number">3</span>变量 i 为 <span class="number">13</span> , 变量 count 为 <span class="number">2</span>变量 i 为 <span class="number">14</span> , 变量 count 为 <span class="number">1</span>变量 i 为 <span class="number">15</span> , 变量 count 为 <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>
<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>
<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>
<p>第一个文件：main.cpp</p>
<h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="type">int</span> count ;<span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">write_extern</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   count = <span class="number">5</span>;   <span class="built_in">write_extern</span>();&#125;</span><br></pre></td></tr></table></figure>

<p>第二个文件：support.cpp</p>
<h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">extern</span> <span class="type">int</span> count; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_extern</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;Count is &quot;</span> &lt;&lt; count &lt;&lt; std::endl;&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，第二个文件中的 <em>extern</em> 关键字用于声明已经在第一个文件 main.cpp 中定义的 count。现在 ，编译这两个文件，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ main.cpp support.cpp -o write</span><br></pre></td></tr></table></figure>

<p>这会产生 <strong>write</strong> 可执行程序，尝试执行 <strong>write</strong>，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ ./writeCount is <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="mutable-存储类"><a href="#mutable-存储类" class="headerlink" title="mutable 存储类"></a>mutable 存储类</h2><p><strong>mutable</strong> 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p>
<h2 id="thread-local-存储类"><a href="#thread-local-存储类" class="headerlink" title="thread_local 存储类"></a>thread_local 存储类</h2><p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p>
<p>thread_local 说明符可以与 static 或 extern 合并。</p>
<p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p>
<p>以下演示了可以被声明为 thread_local 的变量：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">thread_local</span> <span class="type">int</span> x;  <span class="comment">// 命名空间下的全局变量class X&#123;</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">thread_local</span> std::string s; <span class="comment">// 类的static成员变量&#125;;static thread_local std::string X::s;  // X::s 是需要定义的</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">thread_local</span> std::vector&lt;<span class="type">int</span>&gt; v;  <span class="comment">// 本地变量&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C++ 运算符"></a>C++ 运算符</h1><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++ 内置了丰富的运算符，并提供了以下类型的运算符：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
<li>杂项运算符</li>
</ul>
<p>本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。</p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表显示了 C++ 支持的算术运算符。</p>
<p>假设变量 A 的值为 10，变量 B 的值为 20，则：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">把两个操作数相加</td>
<td align="left">A + B 将得到 30</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">从第一个操作数中减去第二个操作数</td>
<td align="left">A - B 将得到 -10</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">把两个操作数相乘</td>
<td align="left">A * B 将得到 200</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">分子除以分母</td>
<td align="left">B &#x2F; A 将得到 2</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">取模运算符，整除后的余数</td>
<td align="left">B % A 将得到 0</td>
</tr>
<tr>
<td align="left">++</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-increment-decrement-operators.html">自增运算符</a>，整数值增加 1</td>
<td align="left">A++ 将得到 11</td>
</tr>
<tr>
<td align="left">–</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-increment-decrement-operators.html">自减运算符</a>，整数值减少 1</td>
<td align="left">A– 将得到 9</td>
</tr>
</tbody></table>
<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>请看下面的实例，了解 C++ 中可用的算术运算符。</p>
<p>复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。</p>
<h2 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">21</span>;   <span class="type">int</span> b = <span class="number">10</span>;   <span class="type">int</span> c ; </span><br><span class="line">   c = a + b;   cout &lt;&lt; <span class="string">&quot;Line 1 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;   c = a - b;   cout &lt;&lt; <span class="string">&quot;Line 2 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;   c = a * b;   cout &lt;&lt; <span class="string">&quot;Line 3 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;   c = a / b;   cout &lt;&lt; <span class="string">&quot;Line 4 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;   c = a % b;   cout &lt;&lt; <span class="string">&quot;Line 5 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   <span class="type">int</span> d = <span class="number">10</span>;   <span class="comment">//  测试自增、自减</span></span><br><span class="line">   c = d++;   cout &lt;&lt; <span class="string">&quot;Line 6 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   d = <span class="number">10</span>;    <span class="comment">// 重新赋值</span></span><br><span class="line">   c = d--;   cout &lt;&lt; <span class="string">&quot;Line 7 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Line <span class="number">1</span> - c 的值是 <span class="number">31L</span>ine <span class="number">2</span> - c 的值是 <span class="number">11L</span>ine <span class="number">3</span> - c 的值是 <span class="number">210L</span>ine <span class="number">4</span> - c 的值是 <span class="number">2L</span>ine <span class="number">5</span> - c 的值是 <span class="number">1L</span>ine <span class="number">6</span> - c 的值是 <span class="number">10L</span>ine <span class="number">7</span> - c 的值是 <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表显示了 C++ 支持的关系运算符。</p>
<p>假设变量 A 的值为 10，变量 B 的值为 20，则：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;&#x3D;</td>
<td align="left">检查两个操作数的值是否相等，如果相等则条件为真。</td>
<td align="left">(A &#x3D;&#x3D; B) 不为真。</td>
</tr>
<tr>
<td align="left">!&#x3D;</td>
<td align="left">检查两个操作数的值是否相等，如果不相等则条件为真。</td>
<td align="left">(A !&#x3D; B) 为真。</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td>
<td align="left">(A &gt; B) 不为真。</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td>
<td align="left">(A &lt; B) 为真。</td>
</tr>
<tr>
<td align="left">&gt;&#x3D;</td>
<td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td>
<td align="left">(A &gt;&#x3D; B) 不为真。</td>
</tr>
<tr>
<td align="left">&lt;&#x3D;</td>
<td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td>
<td align="left">(A &lt;&#x3D; B) 为真。</td>
</tr>
</tbody></table>
<h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>请看下面的实例，了解 C++ 中可用的关系运算符。</p>
<p>复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。</p>
<h2 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">21</span>;   <span class="type">int</span> b = <span class="number">10</span>;   <span class="type">int</span> c ; </span><br><span class="line">   <span class="keyword">if</span>( a == b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 1 - a 等于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 1 - a 不等于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a &lt; b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 2 - a 小于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 2 - a 不小于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a &gt; b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 3 - a 大于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 3 - a 不大于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="comment">/* 改变 a 和 b 的值 */</span></span><br><span class="line">   a = <span class="number">5</span>;   b = <span class="number">20</span>;   <span class="keyword">if</span> ( a &lt;= b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 4 - a 小于或等于 b&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( b &gt;= a )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 5 - b 大于或等于 a&quot;</span> &lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Line <span class="number">1</span> - a 不等于 bLine <span class="number">2</span> - a 不小于 bLine <span class="number">3</span> - a 大于 bLine <span class="number">4</span> - a 小于或等于 bLine <span class="number">5</span> - b 大于或等于 a</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表显示了 C++ 支持的关系逻辑运算符。</p>
<p>假设变量 A 的值为 1，变量 B 的值为 0，则：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td>
<td align="left">(A &amp;&amp; B) 为假。</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td>
<td align="left">(A || B) 为真。</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td>
<td align="left">!(A &amp;&amp; B) 为真。</td>
</tr>
</tbody></table>
<h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>请看下面的实例，了解 C++ 中可用的逻辑运算符。</p>
<p>复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。</p>
<h2 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">5</span>;   <span class="type">int</span> b = <span class="number">20</span>;   <span class="type">int</span> c ; </span><br><span class="line">   <span class="keyword">if</span> ( a &amp;&amp; b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 1 - 条件为真&quot;</span>&lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a || b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 2 - 条件为真&quot;</span>&lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="comment">/* 改变 a 和 b 的值 */</span></span><br><span class="line">   a = <span class="number">0</span>;   b = <span class="number">10</span>;   <span class="keyword">if</span> ( a &amp;&amp; b )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 3 - 条件为真&quot;</span>&lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 4 - 条件不为真&quot;</span>&lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( !(a &amp;&amp; b) )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Line 5 - 条件为真&quot;</span>&lt;&lt; endl ;   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Line <span class="number">1</span> - 条件为真Line <span class="number">2</span> - 条件为真Line <span class="number">4</span> - 条件不为真Line <span class="number">5</span> - 条件为真</span><br></pre></td></tr></table></figure>

<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p>
<table>
<thead>
<tr>
<th align="left">p</th>
<th align="left">q</th>
<th align="left">p &amp; q</th>
<th align="left">p | q</th>
<th align="left">p ^ q</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>假设如果 A &#x3D; 60，且 B &#x3D; 13，现在以二进制格式表示，它们如下所示：</p>
<p>A &#x3D; 0011 1100</p>
<p>B &#x3D; 0000 1101</p>
<p>-—————-</p>
<p>A&amp;B &#x3D; 0000 1100</p>
<p>A|B &#x3D; 0011 1101</p>
<p>A^B &#x3D; 0011 0001</p>
<p>~A &#x3D; 1100 0011</p>
<p>下表显示了 C++ 支持的位运算符。假设变量 A 的值为 60，变量 B 的值为 13，则：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;</td>
<td align="left">如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。</td>
<td align="left">(A &amp; B) 将得到 12，即为 0000 1100</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。</td>
<td align="left">(A | B) 将得到 61，即为 0011 1101</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。</td>
<td align="left">(A ^ B) 将得到 49，即为 0011 0001</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">二进制补码运算符是一元运算符，具有”翻转”位效果，即0变成1，1变成0。</td>
<td align="left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td align="left">&lt;&lt;</td>
<td align="left">二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td>
<td align="left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td>
</tr>
<tr>
<td align="left">&gt;&gt;</td>
<td align="left">二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td>
<td align="left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td>
</tr>
</tbody></table>
<h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>请看下面的实例，了解 C++ 中可用的位运算符。</p>
<p>复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。</p>
<h2 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">60</span>;      <span class="comment">// 60 = 0011 1100  </span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">13</span>;      <span class="comment">// 13 = 0000 1101</span></span><br><span class="line">   <span class="type">int</span> c = <span class="number">0</span>;           </span><br><span class="line"> </span><br><span class="line">   c = a &amp; b;             <span class="comment">// 12 = 0000 1100</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 1 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   c = a | b;             <span class="comment">// 61 = 0011 1101</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 2 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   c = a ^ b;             <span class="comment">// 49 = 0011 0001</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 3 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   c = ~a;                <span class="comment">// -61 = 1100 0011</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 4 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   c = a &lt;&lt; <span class="number">2</span>;            <span class="comment">// 240 = 1111 0000</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 5 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   c = a &gt;&gt; <span class="number">2</span>;            <span class="comment">// 15 = 0000 1111</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 6 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生以下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">Line 1 - c 的值是 12Line 2 - c 的值是 61Line 3 - c 的值是 49Line 4 - c 的值是 -61Line 5 - c 的值是 240Line 6 - c 的值是 15</span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下表列出了 C++ 支持的赋值运算符：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;</td>
<td align="left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td>
<td align="left">C &#x3D; A + B 将把 A + B 的值赋给 C</td>
</tr>
<tr>
<td align="left">+&#x3D;</td>
<td align="left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td>
<td align="left">C +&#x3D; A 相当于 C &#x3D; C + A</td>
</tr>
<tr>
<td align="left">-&#x3D;</td>
<td align="left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td>
<td align="left">C -&#x3D; A 相当于 C &#x3D; C - A</td>
</tr>
<tr>
<td align="left">*&#x3D;</td>
<td align="left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td>
<td align="left">C *&#x3D; A 相当于 C &#x3D; C * A</td>
</tr>
<tr>
<td align="left">&#x2F;&#x3D;</td>
<td align="left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td>
<td align="left">C &#x2F;&#x3D; A 相当于 C &#x3D; C &#x2F; A</td>
</tr>
<tr>
<td align="left">%&#x3D;</td>
<td align="left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td>
<td align="left">C %&#x3D; A 相当于 C &#x3D; C % A</td>
</tr>
<tr>
<td align="left">&lt;&lt;&#x3D;</td>
<td align="left">左移且赋值运算符</td>
<td align="left">C &lt;&lt;&#x3D; 2 等同于 C &#x3D; C &lt;&lt; 2</td>
</tr>
<tr>
<td align="left">&gt;&gt;&#x3D;</td>
<td align="left">右移且赋值运算符</td>
<td align="left">C &gt;&gt;&#x3D; 2 等同于 C &#x3D; C &gt;&gt; 2</td>
</tr>
<tr>
<td align="left">&amp;&#x3D;</td>
<td align="left">按位与且赋值运算符</td>
<td align="left">C &amp;&#x3D; 2 等同于 C &#x3D; C &amp; 2</td>
</tr>
<tr>
<td align="left">^&#x3D;</td>
<td align="left">按位异或且赋值运算符</td>
<td align="left">C ^&#x3D; 2 等同于 C &#x3D; C ^ 2</td>
</tr>
<tr>
<td align="left">|&#x3D;</td>
<td align="left">按位或且赋值运算符</td>
<td align="left">C |&#x3D; 2 等同于 C &#x3D; C | 2</td>
</tr>
</tbody></table>
<h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>请看下面的实例，了解 C++ 中可用的赋值运算符。</p>
<p>复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。</p>
<h2 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">21</span>;   <span class="type">int</span> c ; </span><br><span class="line">   c =  a;   cout &lt;&lt; <span class="string">&quot;Line 1 - =  运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c +=  a;   cout &lt;&lt; <span class="string">&quot;Line 2 - += 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c -=  a;   cout &lt;&lt; <span class="string">&quot;Line 3 - -= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c *=  a;   cout &lt;&lt; <span class="string">&quot;Line 4 - *= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c /=  a;   cout &lt;&lt; <span class="string">&quot;Line 5 - /= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c  = <span class="number">200</span>;   c %=  a;   cout &lt;&lt; <span class="string">&quot;Line 6 - %= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c &lt;&lt;=  <span class="number">2</span>;   cout &lt;&lt; <span class="string">&quot;Line 7 - &lt;&lt;= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c &gt;&gt;=  <span class="number">2</span>;   cout &lt;&lt; <span class="string">&quot;Line 8 - &gt;&gt;= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c &amp;=  <span class="number">2</span>;   cout &lt;&lt; <span class="string">&quot;Line 9 - &amp;= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c ^=  <span class="number">2</span>;   cout &lt;&lt; <span class="string">&quot;Line 10 - ^= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   c |=  <span class="number">2</span>;   cout &lt;&lt; <span class="string">&quot;Line 11 - |= 运算符实例，c 的值 = : &quot;</span> &lt;&lt;c&lt;&lt; endl ; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Line <span class="number">1</span> - =  运算符实例，c 的值 = <span class="number">21L</span>ine <span class="number">2</span> - += 运算符实例，c 的值 = <span class="number">42L</span>ine <span class="number">3</span> - -= 运算符实例，c 的值 = <span class="number">21L</span>ine <span class="number">4</span> - *= 运算符实例，c 的值 = <span class="number">441L</span>ine <span class="number">5</span> - /= 运算符实例，c 的值 = <span class="number">21L</span>ine <span class="number">6</span> - %= 运算符实例，c 的值 = <span class="number">11L</span>ine <span class="number">7</span> - &lt;&lt;= 运算符实例，c 的值 = <span class="number">44L</span>ine <span class="number">8</span> - &gt;&gt;= 运算符实例，c 的值 = <span class="number">11L</span>ine <span class="number">9</span> - &amp;= 运算符实例，c 的值 = <span class="number">2L</span>ine <span class="number">10</span> - ^= 运算符实例，c 的值 = <span class="number">0L</span>ine <span class="number">11</span> - |= 运算符实例，c 的值 = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h2><p>下表列出了 C++ 支持的其他一些重要的运算符。</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">sizeof</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-sizeof-operator.html">sizeof 运算符</a>返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。</td>
</tr>
<tr>
<td align="left">Condition ? X : Y</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-conditional-operator.html">条件运算符</a>。如果 Condition 为真 ? 则值为 X : 否则值为 Y。</td>
</tr>
<tr>
<td align="left">,</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-comma-operator.html">逗号运算符</a>会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。</td>
</tr>
<tr>
<td align="left">.（点）和 -&gt;（箭头）</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-member-operators.html">成员运算符</a>用于引用类、结构和共用体的成员。</td>
</tr>
<tr>
<td align="left">Cast</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-casting-operators.html">强制转换运算符</a>把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-pointer-operators.html">指针运算符 &amp;</a> 返回变量的地址。例如 &a; 将给出变量的实际地址。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-pointer-operators.html">指针运算符 *</a> 指向一个变量。例如，*var; 将指向变量 var。</td>
</tr>
</tbody></table>
<h2 id="C-中的运算符优先级"><a href="#C-中的运算符优先级" class="headerlink" title="C++ 中的运算符优先级"></a>C++ 中的运算符优先级</h2><p>运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。</p>
<p>例如 x &#x3D; 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。</p>
<p>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。</p>
<table>
<thead>
<tr>
<th align="left">类别</th>
<th align="left">运算符</th>
<th align="left">结合性</th>
</tr>
</thead>
<tbody><tr>
<td align="left">后缀</td>
<td align="left">() [] -&gt; . ++ - -</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">一元</td>
<td align="left">+ - ! ~ ++ - - (type)* &amp; sizeof</td>
<td align="left">从右到左</td>
</tr>
<tr>
<td align="left">乘除</td>
<td align="left">* &#x2F; %</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">加减</td>
<td align="left">+ -</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">移位</td>
<td align="left">&lt;&lt; &gt;&gt;</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">关系</td>
<td align="left">&lt; &lt;&#x3D; &gt; &gt;&#x3D;</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">相等</td>
<td align="left">&#x3D;&#x3D; !&#x3D;</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">位与 AND</td>
<td align="left">&amp;</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">位异或 XOR</td>
<td align="left">^</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">位或 OR</td>
<td align="left">|</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">逻辑与 AND</td>
<td align="left">&amp;&amp;</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">逻辑或 OR</td>
<td align="left">||</td>
<td align="left">从左到右</td>
</tr>
<tr>
<td align="left">条件</td>
<td align="left">?:</td>
<td align="left">从右到左</td>
</tr>
<tr>
<td align="left">赋值</td>
<td align="left">&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;&gt;&gt;&#x3D; &lt;&lt;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D;</td>
<td align="left">从右到左</td>
</tr>
<tr>
<td align="left">逗号</td>
<td align="left">,</td>
<td align="left">从左到右</td>
</tr>
</tbody></table>
<h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>请看下面的实例，了解 C++ 中运算符的优先级。</p>
<p>复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。</p>
<p>对比有括号和没有括号时的区别，这将产生不同的结果。因为 ()、 &#x2F;、 * 和 + 有不同的优先级，高优先级的操作符将优先计算。</p>
<h2 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">20</span>;   <span class="type">int</span> b = <span class="number">10</span>;   <span class="type">int</span> c = <span class="number">15</span>;   <span class="type">int</span> d = <span class="number">5</span>;   <span class="type">int</span> e; </span><br><span class="line">   e = (a + b) * c / d;      <span class="comment">// ( 30 * 15 ) / 5</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;(a + b) * c / d 的值是 &quot;</span> &lt;&lt; e &lt;&lt; endl ; </span><br><span class="line">   e = ((a + b) * c) / d;    <span class="comment">// (30 * 15 ) / 5</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;((a + b) * c) / d 的值是 &quot;</span> &lt;&lt; e &lt;&lt; endl ; </span><br><span class="line">   e = (a + b) * (c / d);   <span class="comment">// (30) * (15/5)</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;(a + b) * (c / d) 的值是 &quot;</span> &lt;&lt; e &lt;&lt; endl ; </span><br><span class="line">   e = a + (b * c) / d;     <span class="comment">//  20 + (150/5)</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;a + (b * c) / d 的值是 &quot;</span> &lt;&lt; e &lt;&lt; endl ;  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(a + b) * c / d 的值是 <span class="number">90</span>((a + b) * c) / d 的值是 <span class="number">90</span>(a + b) * (c / d) 的值是 <span class="number">90</span>a + (b * c) / d 的值是 <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h1 id="C-循环"><a href="#C-循环" class="headerlink" title="C++ 循环"></a>C++ 循环</h1><p>有的时候，可能需要多次执行同一块代码。一般情况下，语句是顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p>
<p>编程语言提供了允许更为复杂的执行路径的多种控制结构。</p>
<p>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的一般形式：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/16103394c44b631388.png" alt="img"></p>
<h2 id="循环类型"><a href="#循环类型" class="headerlink" title="循环类型"></a>循环类型</h2><p>C++ 编程语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p>
<table>
<thead>
<tr>
<th align="left">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">while 循环</td>
<td align="left">当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td>
</tr>
<tr>
<td align="left">for 循环</td>
<td align="left">多次执行一个语句序列，简化管理循环变量的代码。</td>
</tr>
<tr>
<td align="left">do…while 循环</td>
<td align="left">除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td>
</tr>
<tr>
<td align="left">嵌套循环</td>
<td align="left">您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td>
</tr>
</tbody></table>
<h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><p>循环控制语句更改执行的正常序列。当执行离开一个范围时，所有在该范围中创建的自动对象都会被销毁。</p>
<p>C++ 提供了下列的控制语句。点击链接查看每个语句的细节。</p>
<table>
<thead>
<tr>
<th align="left">控制语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">break 语句</td>
<td align="left">终止 <strong>loop</strong> 或 <strong>switch</strong> 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td>
</tr>
<tr>
<td align="left">continue 语句</td>
<td align="left">引起循环跳过主体的剩余部分，立即重新开始测试条件。</td>
</tr>
<tr>
<td align="left">goto 语句</td>
<td align="left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td>
</tr>
</tbody></table>
<h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>如果条件永远不为假，则循环将变成无限循环。<strong>for</strong> 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;This loop will run forever.\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，C++ 程序员偏向于使用 for(;;) 结构来表示一个无限循环。</p>
<p><strong>注意：</strong>您可以按 Ctrl + C 键终止一个无限循环。</p>
<h1 id="C-判断"><a href="#C-判断" class="headerlink" title="C++ 判断"></a>C++ 判断</h1><p>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。</p>
<p>下面是大多数编程语言中典型的判断结构的一般形式：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/161155bc605b784844.png" alt="img"></p>
<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><p>C++ 编程语言提供了以下类型的判断语句。点击链接查看每个语句的细节。</p>
<table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">if 语句</td>
<td align="left">一个 <strong>if 语句</strong> 由一个布尔表达式后跟一个或多个语句组成。</td>
</tr>
<tr>
<td align="left">if…else 语句</td>
<td align="left">一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td>
</tr>
<tr>
<td align="left">嵌套 if 语句</td>
<td align="left">您可以在一个 <strong>if</strong> 或 <strong>else if</strong> 语句内使用另一个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td>
</tr>
<tr>
<td align="left">switch 语句</td>
<td align="left">一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。</td>
</tr>
<tr>
<td align="left">嵌套 switch 语句</td>
<td align="left">您可以在一个 <strong>switch</strong> 语句内使用另一个 <strong>switch</strong> 语句。</td>
</tr>
</tbody></table>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="? : 运算符"></a>? : 运算符</h2><p>我们已经在前面的章节中讲解了 <a href="https://edu.aliyun.com/cplusplus/cpp-conditional-operator.html"><strong>条件运算符 ? :</strong></a>，可以用来替代 <strong>if…else</strong> 语句。它的一般形式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Exp1 ? Exp2 : Exp3;</span><br></pre></td></tr></table></figure>

<p>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。</p>
<p>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值。</p>
<h1 id="C-函数"><a href="#C-函数" class="headerlink" title="C++ 函数"></a>C++ 函数</h1><p>函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p>
<p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p>
<p>函数<strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。</p>
<p>C++ 标准库提供了大量的程序可以调用的内置函数。例如，函数 <strong>strcat()</strong> 用来连接两个字符串，函数 <strong>memcpy()</strong> 用来复制内存到另一个位置。</p>
<p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>C++ 中的函数定义的一般形式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter list )</span></span>&#123;   body of the function&#125;</span><br></pre></td></tr></table></figure>

<p>在 C++ 中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>
<ul>
<li><strong>返回类型：</strong>一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li>
<li><strong>函数名称：</strong>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li>
<li><strong>参数：</strong>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li>
<li><strong>函数主体：</strong>函数主体包含一组定义函数执行任务的语句。</li>
</ul>
<h2 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h2><p>以下是 <strong>max()</strong> 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数返回两个数中较大的那个数 int max(int num1, int num2) &#123;   // 局部变量声明   int result;    if (num1 &gt; num2)      result = num1;   else      result = num2;    return result; &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<p>函数声明包括以下几个部分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter list )</span></span>;</span><br></pre></td></tr></table></figure>

<p>针对上面定义的函数 max()，以下是函数声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>创建 C++ 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p>
<p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p>
<p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="comment">// 函数声明int max(int num1, int num2);</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">   <span class="type">int</span> ret;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 调用函数来获取最大值</span></span><br><span class="line">   ret = <span class="built_in">max</span>(a, b);</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Max value is : &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"> <span class="comment">// 函数返回两个数中较大的那个数int max(int num1, int num2) &#123;</span></span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> result;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> result; &#125;</span><br></pre></td></tr></table></figure>

<p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Max value is : <span class="number">200</span></span><br></pre></td></tr></table></figure>

<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p>
<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>
<p>当调用函数时，有两种向函数传递参数的方式：</p>
<table>
<thead>
<tr>
<th align="left">调用类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-function-call-by-value.html">传值调用</a></td>
<td align="left">该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>
</tr>
<tr>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-function-call-by-pointer.html">指针调用</a></td>
<td align="left">该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
<tr>
<td align="left"><a href="https://edu.aliyun.com/cplusplus/cpp-function-call-by-reference.html">引用调用</a></td>
<td align="left">该方法把参数的引用复制给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
</tbody></table>
<p>默认情况下，C++ 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。之前提到的实例，调用 max() 函数时，使用了相同的方法。</p>
<h2 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h2><p>当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。</p>
<p>这是通过在函数定义中使用赋值运算符来为参数赋值的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，使用传递的值。请看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b=<span class="number">20</span>)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">  result = a + b;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (result);&#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">   <span class="type">int</span> result;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 调用函数来添加值</span></span><br><span class="line">   result = <span class="built_in">sum</span>(a, b);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total value is :&quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 再次调用函数</span></span><br><span class="line">   result = <span class="built_in">sum</span>(a);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total value is :&quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Total value is :<span class="number">300</span>Total value is :<span class="number">120</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Lambda-函数与表达式"><a href="#Lambda-函数与表达式" class="headerlink" title="Lambda 函数与表达式"></a>Lambda 函数与表达式</h2><p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。</p>
<p>Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。</p>
<p>Lambda 表达式本质上与函数声明非常类似。Lambda 表达式具体形式如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture](parameters)-&gt;<span class="keyword">return</span>-type&#123;body&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">[](int x, int y)&#123; return x &lt; y ; &#125;</span><br></pre></td></tr></table></figure>

<p>如果没有参数可以表示为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture](parameters)&#123;body&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[]&#123; ++global_x; &#125;</span><br></pre></td></tr></table></figure>

<p>在一个更为复杂的例子中，返回类型可以被明确的指定如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">int</span> &#123; <span class="type">int</span> z = x + y; <span class="keyword">return</span> z + x; &#125;</span><br></pre></td></tr></table></figure>

<p>本例中，一个临时的参数 z 被创建用来存储中间结果。如同一般的函数，z 的值不会保留到下一次该不具名函数再次被调用时。</p>
<p>如果 lambda 函数没有传回值（例如 void），其回返类型可被完全忽略。</p>
<p>在Lambda表达式内可以访问当前作用域的变量，这是Lambda表达式的闭包（Closure）行为。 与JavaScript闭包不同，C++变量传递有传值和传引用的区别。可以通过前面的[]来指定：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[]      <span class="comment">// 沒有定义任何变量。使用未定义变量会引发错误。[x, &amp;y] // x以传值方式传入（默认），y以引用方式传入。[&amp;]     // 任何被使用到的外部变量都隐式地以引用方式加以引用。[=]     // 任何被使用到的外部变量都隐式地以传值方式加以引用。[&amp;, x]  // x显式地以传值方式加以引用。其余变量以引用方式加以引用。[=, &amp;z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。</span></span><br></pre></td></tr></table></figure>

<p>另外有一点需要注意。对于[&#x3D;]或[&amp;]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">this</span>]() &#123; <span class="keyword">this</span>-&gt;<span class="built_in">someFunc</span>(); &#125;();</span><br></pre></td></tr></table></figure>

<h1 id="C-数字"><a href="#C-数字" class="headerlink" title="C++ 数字"></a>C++ 数字</h1><p>通常，当我们需要用到数字时，我们会使用原始的数据类型，如 int、short、long、float 和 double 等等。这些用于数字的数据类型，其可能的值和数值范围，我们已经在 C++ 数据类型一章中讨论过。</p>
<h2 id="C-定义数字"><a href="#C-定义数字" class="headerlink" title="C++ 定义数字"></a>C++ 定义数字</h2><p>我们已经在之前章节的各种实例中定义过数字。下面是一个 C++ 中定义各种类型数字的综合实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 数字定义</span></span><br><span class="line">   <span class="type">short</span>  s;</span><br><span class="line">   <span class="type">int</span>    i;</span><br><span class="line">   <span class="type">long</span>   l;</span><br><span class="line">   <span class="type">float</span>  f;</span><br><span class="line">   <span class="type">double</span> d;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 数字赋值</span></span><br><span class="line">   s = <span class="number">10</span>;      </span><br><span class="line">   i = <span class="number">1000</span>;    </span><br><span class="line">   l = <span class="number">1000000</span>; </span><br><span class="line">   f = <span class="number">230.47</span>;  </span><br><span class="line">   d = <span class="number">30949.374</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 数字输出</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;short  s :&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;int    i :&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;long   l :&quot;</span> &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;float  f :&quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;double d :&quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span>  s :<span class="number">10</span><span class="type">int</span>    i :<span class="number">1000l</span>ong   l :<span class="number">1000000f</span>loat  f :<span class="number">230.47</span><span class="type">double</span> d :<span class="number">30949.4</span></span><br></pre></td></tr></table></figure>

<h2 id="C-数学运算"><a href="#C-数学运算" class="headerlink" title="C++ 数学运算"></a>C++ 数学运算</h2><p>在 C++ 中，除了可以创建各种函数，还包含了各种有用的函数供您使用。这些函数写在标准 C 和 C++ 库中，叫做<strong>内置</strong>函数。您可以在程序中引用这些函数。</p>
<p>C++ 内置了丰富的数学函数，可对各种数字进行运算。下表列出了 C++ 中一些有用的内置的数学函数。</p>
<p>为了利用这些函数，您需要引用数学头文件 **<cmath>**。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">函数 &amp; 描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>double cos(double);</strong> 该函数返回弧度角（double 型）的余弦。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>double sin(double);</strong> 该函数返回弧度角（double 型）的正弦。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>double tan(double);</strong> 该函数返回弧度角（double 型）的正切。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>double log(double);</strong> 该函数返回参数的自然对数。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>double pow(double, double);</strong> 假设第一个参数为 x，第二个参数为 y，则该函数返回 x 的 y 次方。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>double hypot(double, double);</strong> 该函数返回两个参数的平方总和的平方根，也就是说，参数为一个直角三角形的两个直角边，函数会返回斜边的长度。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>double sqrt(double);</strong> 该函数返回参数的平方根。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>int abs(int);</strong> 该函数返回整数的绝对值。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>double fabs(double);</strong> 该函数返回任意一个十进制数的绝对值。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>double floor(double);</strong> 该函数返回一个小于或等于传入参数的最大整数。</td>
</tr>
</tbody></table>
<p>下面是一个关于数学运算的简单实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 数字定义</span></span><br><span class="line">   <span class="type">short</span>  s = <span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span>    i = <span class="number">-1000</span>;</span><br><span class="line">   <span class="type">long</span>   l = <span class="number">100000</span>;</span><br><span class="line">   <span class="type">float</span>  f = <span class="number">230.47</span>;</span><br><span class="line">   <span class="type">double</span> d = <span class="number">200.374</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 数学运算</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;sin(d) :&quot;</span> &lt;&lt; <span class="built_in">sin</span>(d) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;abs(i)  :&quot;</span> &lt;&lt; <span class="built_in">abs</span>(i) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;floor(d) :&quot;</span> &lt;&lt; <span class="built_in">floor</span>(d) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;sqrt(f) :&quot;</span> &lt;&lt; <span class="built_in">sqrt</span>(f) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;pow( d, 2) :&quot;</span> &lt;&lt; <span class="built_in">pow</span>(d, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sign</span>(d) :<span class="number">-0.634939</span>abs(i)  :<span class="number">1000f</span>loor(d) :<span class="number">200</span>sqrt(f) :<span class="number">15.1812</span>pow( d, <span class="number">2</span> ) :<span class="number">40149.7</span></span><br></pre></td></tr></table></figure>

<h2 id="C-随机数"><a href="#C-随机数" class="headerlink" title="C++ 随机数"></a>C++ 随机数</h2><p>在许多情况下，需要生成随机数。关于随机数生成器，有两个相关的函数。一个是 **rand()**，该函数只返回一个伪随机数。生成随机数之前必须先调用 <strong>srand()</strong> 函数。</p>
<p>下面是一个关于生成随机数的简单实例。实例中使用了 <strong>time()</strong> 函数来获取系统时间的秒数，通过调用 rand() 函数来生成随机数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 设置种子</span></span><br><span class="line">   <span class="built_in">srand</span>( (<span class="type">unsigned</span>)<span class="built_in">time</span>( <span class="literal">NULL</span> ) );</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 生成 10 个随机数 */</span></span><br><span class="line">   <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 生成实际的随机数</span></span><br><span class="line">      j= <span class="built_in">rand</span>();</span><br><span class="line">      cout &lt;&lt;<span class="string">&quot;随机数： &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">随机数： <span class="number">1748144778</span>随机数： <span class="number">630873888</span>随机数： <span class="number">2134540646</span>随机数： <span class="number">219404170</span>随机数： <span class="number">902129458</span>随机数： <span class="number">920445370</span>随机数： <span class="number">1319072661</span>随机数： <span class="number">257938873</span>随机数： <span class="number">1256201101</span>随机数： <span class="number">580322989</span></span><br></pre></td></tr></table></figure>

<h1 id="C-数组"><a href="#C-数组" class="headerlink" title="C++ 数组"></a>C++ 数组</h1><p>C++ 支持<strong>数组</strong>数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</p>
<p>数组的声明并不是声明一个个单独的变量，比如 number0、number1、…、number99，而是声明一个数组变量，比如 numbers，然后使用 numbers[0]、numbers[1]、…、numbers[99] 来代表一个个单独的变量。数组中的特定元素可以通过索引访问。</p>
<p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p>
<h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><p>在 C++ 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">type arrayName [ arraySize ];</span><br></pre></td></tr></table></figure>

<p>这叫做一维数组。<strong>arraySize</strong> 必须是一个大于零的整数常量，<strong>type</strong> 可以是任意有效的 C++ 数据类型。例如，要声明一个类型为 double 的包含 10 个元素的数组 <strong>balance</strong>，声明语句如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> balance[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p>现在 <em>balance</em> 是一个可用的数组，可以容纳 10 个类型为 double 的数字。</p>
<h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><p>在 C++ 中，您可以逐个初始化数组，也可以使用一个初始化语句，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">17.0</span>, <span class="number">50.0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</p>
<p>如果您省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> balance[] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">17.0</span>, <span class="number">50.0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>您将创建一个数组，它与前一个实例中所创建的数组是完全相同的。下面是一个为数组中某个元素赋值的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">balance[<span class="number">4</span>] = <span class="number">50.0</span>;</span><br></pre></td></tr></table></figure>

<p>上述的语句把数组中第五个元素的值赋为 50.0。所有的数组都是以 0 作为它们第一个元素的索引，也被称为基索引，数组的最后一个索引是数组的总大小减去 1。以下是上面所讨论的数组的的图形表示：</p>
<p><img src="https://edu.aliyun.com/ueditor/php/upload/image/20170504/1493862028514037.jpg" alt="数组表示"></p>
<h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> salary = balance[<span class="number">9</span>];</span><br></pre></td></tr></table></figure>

<p>上面的语句将把数组中第 10 个元素的值赋给 salary 变量。下面的实例使用了上述的三个概念，即，声明数组、数组赋值、访问数组：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span>using std::setw;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> n[ <span class="number">10</span> ]; <span class="comment">// n 是一个包含 10 个整数的数组</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 初始化数组元素          </span></span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">      n[ i ] = i + <span class="number">100</span>; <span class="comment">// 设置元素 i 为 i + 100</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Element&quot;</span> &lt;&lt; <span class="built_in">setw</span>( <span class="number">13</span> ) &lt;&lt; <span class="string">&quot;Value&quot;</span> &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出数组中每个元素的值                     </span></span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="built_in">setw</span>( <span class="number">7</span> )&lt;&lt; j &lt;&lt; <span class="built_in">setw</span>( <span class="number">13</span> ) &lt;&lt; n[ j ] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>上面的程序使用了 <strong>setw()</strong> 函数来格式化输出。当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Element        Value</span><br><span class="line">      <span class="number">0</span>          <span class="number">100</span></span><br><span class="line">      <span class="number">1</span>          <span class="number">101</span></span><br><span class="line">      <span class="number">2</span>          <span class="number">102</span></span><br><span class="line">      <span class="number">3</span>          <span class="number">103</span></span><br><span class="line">      <span class="number">4</span>          <span class="number">104</span></span><br><span class="line">      <span class="number">5</span>          <span class="number">105</span></span><br><span class="line">      <span class="number">6</span>          <span class="number">106</span></span><br><span class="line">      <span class="number">7</span>          <span class="number">107</span></span><br><span class="line">      <span class="number">8</span>          <span class="number">108</span></span><br><span class="line">      <span class="number">9</span>          <span class="number">109</span></span><br></pre></td></tr></table></figure>

<h2 id="C-中数组详解"><a href="#C-中数组详解" class="headerlink" title="C++ 中数组详解"></a>C++ 中数组详解</h2><p>在 C++ 中，数组是非常重要的，我们需要了解更多有关数组的细节。下面列出了 C++ 程序员必须清楚的一些与数组相关的重要概念：</p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">多维数组</td>
<td align="left">C++ 支持多维数组。多维数组最简单的形式是二维数组。</td>
</tr>
<tr>
<td align="left">指向数组的指针</td>
<td align="left">您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td>
</tr>
<tr>
<td align="left">传递数组给函数</td>
<td align="left">您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td>
</tr>
<tr>
<td align="left">从函数返回数组</td>
<td align="left">C++ 允许从函数返回数组。</td>
</tr>
</tbody></table>
<h1 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C++ 字符串"></a>C++ 字符串</h1><p>C++ 提供了以下两种类型的字符串表示形式：</p>
<ul>
<li>C 风格字符串</li>
<li>C++ 引入的 string 类类型</li>
</ul>
<h2 id="C-风格字符串"><a href="#C-风格字符串" class="headerlink" title="C 风格字符串"></a>C 风格字符串</h2><p>C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 <strong>null</strong> 字符 ‘\0’ 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p>
<p>下面的声明和初始化创建了一个 “Hello” 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 “Hello” 的字符数多一个。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> greeting[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> greeting[] = <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>以下是 C&#x2F;C++ 中定义的字符串的内存表示：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/1618593bac57374932.jpg" alt="img"></p>
<p>其实，您不需要把 <em>null</em> 字符放在字符串常量的末尾。C++ 编译器会在初始化数组时，自动把 ‘\0’ 放在字符串的末尾。让我们尝试输出上面的字符串：</p>
<h2 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">char</span> greeting[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;; </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Greeting message: &quot;</span>;   cout &lt;&lt; greeting &lt;&lt; endl; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Greeting message: Hello</span><br></pre></td></tr></table></figure>

<p>C++ 中有大量的函数用来操作以 null 结尾的字符串：supports a wide range of functions that manipulate null-terminated strings:</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">函数 &amp; 目的</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td>
</tr>
</tbody></table>
<p>下面的实例使用了上述的一些函数：</p>
<h2 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">char</span> str1[<span class="number">11</span>] = <span class="string">&quot;Hello&quot;</span>;   <span class="type">char</span> str2[<span class="number">11</span>] = <span class="string">&quot;World&quot;</span>;   <span class="type">char</span> str3[<span class="number">11</span>];   <span class="type">int</span>  len ; </span><br><span class="line">   <span class="comment">// 复制 str1 到 str3</span></span><br><span class="line">   <span class="built_in">strcpy</span>( str3, str1);   cout &lt;&lt; <span class="string">&quot;strcpy( str3, str1) : &quot;</span> &lt;&lt; str3 &lt;&lt; endl; </span><br><span class="line">   <span class="comment">// 连接 str1 和 str2</span></span><br><span class="line">   <span class="built_in">strcat</span>( str1, str2);   cout &lt;&lt; <span class="string">&quot;strcat( str1, str2): &quot;</span> &lt;&lt; str1 &lt;&lt; endl; </span><br><span class="line">   <span class="comment">// 连接后，str1 的总长度</span></span><br><span class="line">   len = <span class="built_in">strlen</span>(str1);   cout &lt;&lt; <span class="string">&quot;strlen(str1) : &quot;</span> &lt;&lt; len &lt;&lt; endl; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>( str3, str1) : <span class="built_in">Hellostrcat</span>( str1, str2): <span class="built_in">HelloWorldstrlen</span>(str1) : <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="C-中的-String-类"><a href="#C-中的-String-类" class="headerlink" title="C++ 中的 String 类"></a>C++ 中的 String 类</h2><p>C++ 标准库提供了 <strong>string</strong> 类类型，支持上述所有的操作，另外还增加了其他更多的功能。我们将学习 C++ 标准库中的这个类，现在让我们先来看看下面这个实例：</p>
<p>现在您可能还无法透彻地理解这个实例，因为到目前为止我们还没有讨论类和对象。所以现在您可以只是粗略地看下这个实例，等理解了面向对象的概念之后再回头来理解这个实例。</p>
<h2 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   string str1 = <span class="string">&quot;Hello&quot;</span>;   string str2 = <span class="string">&quot;World&quot;</span>;   string str3;   <span class="type">int</span>  len ; </span><br><span class="line">   <span class="comment">// 复制 str1 到 str3</span></span><br><span class="line">   str3 = str1;   cout &lt;&lt; <span class="string">&quot;str3 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl; </span><br><span class="line">   <span class="comment">// 连接 str1 和 str2</span></span><br><span class="line">   str3 = str1 + str2;   cout &lt;&lt; <span class="string">&quot;str1 + str2 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl; </span><br><span class="line">   <span class="comment">// 连接后，str3 的总长度</span></span><br><span class="line">   len = str3.<span class="built_in">size</span>();   cout &lt;&lt; <span class="string">&quot;str3.size() :  &quot;</span> &lt;&lt; len &lt;&lt; endl; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str3 : Hellostr1 + str2 : HelloWorldstr3.<span class="built_in">size</span>() :  <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h1 id="C-指针"><a href="#C-指针" class="headerlink" title="C++ 指针"></a>C++ 指针</h1><p>学习 C++ 的指针既简单又有趣。通过指针，可以简化一些 C++ 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，想要成为一名优秀的 C++ 程序员，学习指针是很有必要的。</p>
<p>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。请看下面的实例，它将输出定义的变量地址：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main ()&#123;</span></span><br><span class="line">   <span class="type">int</span>  var1;</span><br><span class="line">   <span class="type">char</span> var2[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;var1 变量的地址： &quot;</span>;</span><br><span class="line">   cout &lt;&lt; &amp;var1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;var2 变量的地址： &quot;</span>;</span><br><span class="line">   cout &lt;&lt; &amp;var2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">var1 变量的地址： <span class="number">0xbfebd5c0</span>var2 变量的地址： <span class="number">0xbfebd5b6</span></span><br></pre></td></tr></table></figure>

<p>通过上面的实例，我们了解了什么是内存地址以及如何访问它。接下来让我们看看什么是指针。</p>
<h2 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h2><p><strong>指针</strong>是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">type *var-name;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>type</strong> 是指针的基类型，它必须是一个有效的 C++ 数据类型，<strong>var-name</strong> 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>    *ip;    <span class="comment">/* 一个整型的指针 */</span><span class="type">double</span> *dp;    <span class="comment">/* 一个 double 型的指针 */</span><span class="type">float</span>  *fp;    <span class="comment">/* 一个浮点型的指针 */</span><span class="type">char</span>   *ch;    <span class="comment">/* 一个字符型的指针 */</span></span><br></pre></td></tr></table></figure>

<p>所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p>
<h2 id="C-中使用指针"><a href="#C-中使用指针" class="headerlink" title="C++ 中使用指针"></a>C++ 中使用指针</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main ()&#123;</span></span><br><span class="line">   <span class="type">int</span>  var = <span class="number">20</span>;   <span class="comment">// 实际变量的声明</span></span><br><span class="line">   <span class="type">int</span>  *ip;        <span class="comment">// 指针变量的声明</span></span><br><span class="line"></span><br><span class="line">   ip = &amp;var;       <span class="comment">// 在指针变量中存储 var 的地址</span></span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of var variable: &quot;</span>;</span><br><span class="line">   cout &lt;&lt; var &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 输出在指针变量中存储的地址</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Address stored in ip variable: &quot;</span>;</span><br><span class="line">   cout &lt;&lt; ip &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 访问指针中地址的值</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of *ip variable: &quot;</span>;</span><br><span class="line">   cout &lt;&lt; *ip &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Value of var variable: <span class="number">20</span>Address stored in ip variable: <span class="number">0xbfc601ac</span>Value of *ip variable: <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h2 id="C-指针详解"><a href="#C-指针详解" class="headerlink" title="C++ 指针详解"></a>C++ 指针详解</h2><p>在 C++ 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。下面列出了 C++ 程序员必须清楚的一些与指针相关的重要概念：</p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">C++ Null 指针</td>
<td align="left">C++ 支持空指针。NULL 指针是一个定义在标准库中的值为零的常量。</td>
</tr>
<tr>
<td align="left">C++ 指针的算术运算</td>
<td align="left">可以对指针进行四种算术运算：++、–、+、-</td>
</tr>
<tr>
<td align="left">C++ 指针 vs 数组</td>
<td align="left">指针和数组之间有着密切的关系。</td>
</tr>
<tr>
<td align="left">C++ 指针数组</td>
<td align="left">可以定义用来存储指针的数组。</td>
</tr>
<tr>
<td align="left">C++ 指向指针的指针</td>
<td align="left">C++ 允许指向指针的指针。</td>
</tr>
<tr>
<td align="left">C++ 传递指针给函数</td>
<td align="left">通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td>
</tr>
<tr>
<td align="left">C++ 从函数返回指针</td>
<td align="left">C++ 允许函数返回指针到局部变量、静态变量和动态内存分配。</td>
</tr>
</tbody></table>
<h1 id="C-引用"><a href="#C-引用" class="headerlink" title="C++ 引用"></a>C++ 引用</h1><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p>
<h2 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h2><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p>
<ul>
<li>不存在空引用。引用必须连接到一块合法的内存。</li>
<li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li>
<li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li>
</ul>
<h2 id="C-中创建引用"><a href="#C-中创建引用" class="headerlink" title="C++ 中创建引用"></a>C++ 中创建引用</h2><p>试想变量名称是变量附属在内存位置中的标签，您可以把引用当成是变量附属在内存位置中的第二个标签。因此，您可以通过原始变量名称或引用来访问变量的内容。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">17</span>;</span><br></pre></td></tr></table></figure>

<p>我们可以为 i 声明引用变量，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>&amp;    r = i;</span><br></pre></td></tr></table></figure>

<p>在这些声明中，&amp; 读作<strong>引用</strong>。因此，第一个声明可以读作 “r 是一个初始化为 i 的整型引用”，第二个声明可以读作 “s 是一个初始化为 d 的 double 型引用”。下面的实例使用了 int 和 double 引用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 声明简单的变量</span></span><br><span class="line">   <span class="type">int</span>    i;</span><br><span class="line">   <span class="type">double</span> d;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 声明引用变量</span></span><br><span class="line">   <span class="type">int</span>&amp;    r = i;</span><br><span class="line">   <span class="type">double</span>&amp; s = d;</span><br><span class="line">   </span><br><span class="line">   i = <span class="number">5</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of i : &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of i reference : &quot;</span> &lt;&lt; r  &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   d = <span class="number">11.7</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of d : &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of d reference : &quot;</span> &lt;&lt; s  &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Value of i : <span class="number">5</span>Value of i reference : <span class="number">5</span>Value of d : <span class="number">11.7</span>Value of d reference : <span class="number">11.7</span></span><br></pre></td></tr></table></figure>

<p>引用通常用于函数参数列表和函数返回值。下面列出了 C++ 程序员必须清楚的两个与 C++ 引用相关的重要概念：</p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">把引用作为参数</td>
<td align="left">C++ 支持把引用作为参数传给函数，这比传一般的参数更安全。</td>
</tr>
<tr>
<td align="left">把引用作为返回值</td>
<td align="left">可以从 C++ 函数中返回引用，就像返回其他数据类型一样。</td>
</tr>
</tbody></table>
<h1 id="C-日期-时间"><a href="#C-日期-时间" class="headerlink" title="C++ 日期 &amp; 时间"></a>C++ 日期 &amp; 时间</h1><p>C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 <ctime> 头文件。</p>
<p>有四个与时间相关的类型：<strong>clock_t、time_t、size_t</strong> 和 <strong>tm</strong>。类型 clock_t、size_t 和 time_t 能够把系统时间和日期表示为某种整数。</p>
<p>结构类型 <strong>tm</strong> 把日期和时间以 C 结构的形式保存，tm 结构的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span> &#123;</span><br><span class="line">  <span class="type">int</span> tm_sec;   <span class="comment">// 秒，正常范围从 0 到 59，但允许至 61</span></span><br><span class="line">  <span class="type">int</span> tm_min;   <span class="comment">// 分，范围从 0 到 59</span></span><br><span class="line">  <span class="type">int</span> tm_hour;  <span class="comment">// 小时，范围从 0 到 23</span></span><br><span class="line">  <span class="type">int</span> tm_mday;  <span class="comment">// 一月中的第几天，范围从 1 到 31</span></span><br><span class="line">  <span class="type">int</span> tm_mon;   <span class="comment">// 月，范围从 0 到 11</span></span><br><span class="line">  <span class="type">int</span> tm_year;  <span class="comment">// 自 1900 年起的年数</span></span><br><span class="line">  <span class="type">int</span> tm_wday;  <span class="comment">// 一周中的第几天，范围从 0 到 6，从星期日算起</span></span><br><span class="line">  <span class="type">int</span> tm_yday;  <span class="comment">// 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起</span></span><br><span class="line">  <span class="type">int</span> tm_isdst; <span class="comment">// 夏令时&#125;</span></span><br></pre></td></tr></table></figure>

<p>下面是 C&#x2F;C++ 中关于日期和时间的重要函数。所有这些函数都是 C&#x2F;C++ 标准库的组成部分，您可以在 C++ 标准库中查看一下各个函数的细节。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">函数 &amp; 描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>time_t time(time_t *time);</strong> 该函数返回系统的当前日历时间，自 1970 年 1 月 1 日以来经过的秒数。如果系统没有时间，则返回 .1。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>char *ctime(const time_t *time);</strong> 该返回一个表示当地时间的字符串指针，字符串形式 <em>day month year hours:minutes:seconds year\n\0</em>。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>struct tm *localtime(const time_t *time);</strong> 该函数返回一个指向表示本地时间的 <strong>tm</strong> 结构的指针。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>clock_t clock(void);</strong> 该函数返回程序执行起（一般为程序的开头），处理器时钟所使用的时间。如果时间不可用，则返回 .1。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>char * asctime ( const struct tm * time );</strong> 该函数返回一个指向字符串的指针，字符串包含了 time 所指向结构中存储的信息，返回形式为：day month date hours:minutes:seconds year\n\0。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>struct tm *gmtime(const time_t *time);</strong> 该函数返回一个指向 time 的指针，time 为 tm 结构，用协调世界时（UTC）也被称为格林尼治标准时间（GMT）表示。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>time_t mktime(struct tm *time);</strong> 该函数返回日历时间，相当于 time 所指向结构中存储的时间。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>double difftime ( time_t time2, time_t time1 );</strong> 该函数返回 time1 和 time2 之间相差的秒数。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>size_t strftime();</strong> 该函数可用于格式化日期和时间为指定的格式。</td>
</tr>
</tbody></table>
<h2 id="当前日期和时间"><a href="#当前日期和时间" class="headerlink" title="当前日期和时间"></a>当前日期和时间</h2><p>下面的实例获取当前系统的日期和时间，包括本地时间和协调世界时（UTC）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span>using namespace std;int main( )&#123;</span></span><br><span class="line">   <span class="comment">// 基于当前系统的当前日期/时间</span></span><br><span class="line">   <span class="type">time_t</span> now = <span class="built_in">time</span>(<span class="number">0</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 把 now 转换为字符串形式</span></span><br><span class="line">   <span class="type">char</span>* dt = <span class="built_in">ctime</span>(&amp;now);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;本地日期和时间：&quot;</span> &lt;&lt; dt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 把 now 转换为 tm 结构</span></span><br><span class="line">   tm *gmtm = <span class="built_in">gmtime</span>(&amp;now);</span><br><span class="line">   dt = <span class="built_in">asctime</span>(gmtm);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;UTC 日期和时间：&quot;</span>&lt;&lt; dt &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">本地日期和时间：Sat Jan  <span class="number">8</span> <span class="number">20</span>:<span class="number">07</span>:<span class="number">41</span> <span class="number">2011U</span>TC 日期和时间：Sun Jan  <span class="number">9</span> <span class="number">03</span>:<span class="number">07</span>:<span class="number">41</span> <span class="number">2011</span></span><br></pre></td></tr></table></figure>

<h2 id="使用结构-tm-格式化时间"><a href="#使用结构-tm-格式化时间" class="headerlink" title="使用结构 tm 格式化时间"></a>使用结构 tm 格式化时间</h2><p><strong>tm</strong> 结构在 C&#x2F;C++ 中处理日期和时间相关的操作时，显得尤为重要。tm 结构以 C 结构的形式保存日期和时间。大多数与时间相关的函数都使用了 tm 结构。下面的实例使用了 tm 结构和各种与日期和时间相关的函数。</p>
<p>在练习使用结构之前，需要对 C 结构有基本的了解，并懂得如何使用箭头 -&gt; 运算符来访问结构成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span>using namespace std;int main( )&#123;</span></span><br><span class="line">   <span class="comment">// 基于当前系统的当前日期/时间</span></span><br><span class="line">   <span class="type">time_t</span> now = <span class="built_in">time</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Number of sec since January 1,1970:&quot;</span> &lt;&lt; now &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   tm *ltm = <span class="built_in">localtime</span>(&amp;now);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 输出 tm 结构的各个组成部分</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Year: &quot;</span>&lt;&lt; <span class="number">1900</span> + ltm-&gt;tm_year &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Month: &quot;</span>&lt;&lt; <span class="number">1</span> + ltm-&gt;tm_mon&lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Day: &quot;</span>&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Time: &quot;</span>&lt;&lt; <span class="number">1</span> + ltm-&gt;tm_hour &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="number">1</span> + ltm-&gt;tm_min &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="number">1</span> + ltm-&gt;tm_sec &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Number of sec since January <span class="number">1</span>, <span class="number">1970</span>:<span class="number">1294548238</span>Year: <span class="number">2011</span>Month: <span class="number">1</span>Day: <span class="number">8</span>Time: <span class="number">22</span>: <span class="number">44</span>:<span class="number">59</span></span><br></pre></td></tr></table></figure>

<h1 id="C-基本的输入输出"><a href="#C-基本的输入输出" class="headerlink" title="C++ 基本的输入输出"></a>C++ 基本的输入输出</h1><p>C++ 标准库提供了一组丰富的输入&#x2F;输出功能，我们将在后续的章节进行介绍。本章将讨论 C++ 编程中最基本和最常见的 I&#x2F;O 操作。</p>
<p>C++ 的 I&#x2F;O 发生在流中，流是字节序列。如果字节流是从设备（如键盘、磁盘驱动器、网络连接等）流向内存，这叫做<strong>输入操作</strong>。如果字节流是从内存流向设备（如显示屏、打印机、磁盘驱动器、网络连接等），这叫做<strong>输出操作</strong>。</p>
<h2 id="I-O-库头文件"><a href="#I-O-库头文件" class="headerlink" title="I&#x2F;O 库头文件"></a>I&#x2F;O 库头文件</h2><p>下列的头文件在 C++ 编程中很重要。</p>
<table>
<thead>
<tr>
<th align="left">头文件</th>
<th align="left">函数和描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><iostream></td>
<td align="left">该文件定义了 <strong>cin、cout、cerr</strong> 和 <strong>clog</strong> 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。</td>
</tr>
<tr>
<td align="left"><iomanip></td>
<td align="left">该文件通过所谓的参数化的流操纵器（比如 <strong>setw</strong> 和 <strong>setprecision</strong>），来声明对执行标准化 I&#x2F;O 有用的服务。</td>
</tr>
<tr>
<td align="left"><fstream></td>
<td align="left">该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td>
</tr>
</tbody></table>
<h2 id="标准输出流（cout）"><a href="#标准输出流（cout）" class="headerlink" title="标准输出流（cout）"></a>标准输出流（cout）</h2><p>预定义的对象 <strong>cout</strong> 是 <strong>ostream</strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong>cout</strong> 是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> using namespace std; int main( )&#123;   char str[] = <span class="string">&quot;Hello C++&quot;</span>;    cout &lt;&lt; <span class="string">&quot;Value of str is : &quot;</span> &lt;&lt; str &lt;&lt; endl;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Value of str is : Hello C++</span><br></pre></td></tr></table></figure>

<p>C++ 编译器根据要输出变量的数据类型，选择合适的流插入运算符来显示值。&lt;&lt; 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。</p>
<p>流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，<strong>endl</strong> 用于在行末添加一个换行符。</p>
<h2 id="标准输入流（cin）"><a href="#标准输入流（cin）" class="headerlink" title="标准输入流（cin）"></a>标准输入流（cin）</h2><p>预定义的对象 <strong>cin</strong> 是 <strong>istream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong>cin</strong> 是与流提取运算符 &gt;&gt; 结合使用的，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> using namespace std; int main( )&#123;  </span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">50</span>];    cout &lt;&lt; <span class="string">&quot;请输入您的名称： &quot;</span>;   </span><br><span class="line">	cin &gt;&gt; name;   cout &lt;&lt; <span class="string">&quot;您的名称是： &quot;</span> &lt;&lt; name &lt;&lt; endl; &#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会提示用户输入名称。当用户输入一个值，并按回车键，就会看到下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">请输入您的名称： cplusplus您的名称是： cplusplus</span><br></pre></td></tr></table></figure>

<p>C++ 编译器根据要输入值的数据类型，选择合适的流提取运算符来提取值，并把它存储在给定的变量中。</p>
<p>流提取运算符 &gt;&gt; 在一个语句中可以多次使用，如果要求输入多个数据，可以使用如下语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; name &gt;&gt; age;</span><br></pre></td></tr></table></figure>

<p>这相当于下面两个语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; name;cin &gt;&gt; age;</span><br></pre></td></tr></table></figure>

<h2 id="标准错误流（cerr）"><a href="#标准错误流（cerr）" class="headerlink" title="标准错误流（cerr）"></a>标准错误流（cerr）</h2><p>预定义的对象 <strong>cerr</strong> 是 <strong>ostream</strong> 类的一个实例。cerr 对象附属到标准错误设备，通常也是显示屏，但是 <strong>cerr</strong> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p>
<p><strong>cerr</strong> 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   <span class="type">char</span> str[] = <span class="string">&quot;Unable to read....&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   cerr &lt;&lt; <span class="string">&quot;Error message : &quot;</span> &lt;&lt; str &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Error message : Unable to read....</span><br></pre></td></tr></table></figure>

<h2 id="标准日志流（clog）"><a href="#标准日志流（clog）" class="headerlink" title="标准日志流（clog）"></a>标准日志流（clog）</h2><p>预定义的对象 <strong>clog</strong> 是 <strong>ostream</strong> 类的一个实例。clog 对象附属到标准错误设备，通常也是显示屏，但是 <strong>clog</strong> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲在，直到缓冲填满或者缓冲区刷新时才会输出。</p>
<p><strong>clog</strong> 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   <span class="type">char</span> str[] = <span class="string">&quot;Unable to read....&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   clog &lt;&lt; <span class="string">&quot;Error message : &quot;</span> &lt;&lt; str &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Error message : Unable to read....</span><br></pre></td></tr></table></figure>

<p>通过这些小实例，我们无法区分 cout、cerr 和 clog 的差异，但在编写和执行大型程序时，它们之间的差异就变得非常明显。所以良好的编程实践告诉我们，使用 cerr 流来显示错误消息，而其他的日志消息则使用 clog 流来输出。</p>
<h1 id="C-数据结构"><a href="#C-数据结构" class="headerlink" title="C++ 数据结构"></a>C++ 数据结构</h1><p>C&#x2F;C++ 数组允许定义可存储相同类型数据项的变量，但是<strong>结构</strong>是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p>
<p>结构用于表示一条记录，假设您想要跟踪图书馆中书本的动态，您可能需要跟踪每本书的下列属性：</p>
<ul>
<li>Title ：标题</li>
<li>Author ：作者</li>
<li>Subject ：类目</li>
<li>Book ID ：书的 ID</li>
</ul>
<h2 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h2><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">type_name</span> &#123;member_type1 member_name1;member_type2 member_name2;member_type3 member_name3;..&#125; object_names;</span><br></pre></td></tr></table></figure>

<p><strong>type_name</strong> 是结构体类型的名称，<strong>member_type1 member_name1</strong> 是标准的变量定义，比如 <strong>int i;</strong> 或者 <strong>float f;</strong> 或者其他有效的变量定义。在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，这是可选的。下面是声明一个结构体类型 <strong>Books</strong>，变量为 <strong>book</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Books</span>&#123;   <span class="type">char</span>  title[<span class="number">50</span>];   <span class="type">char</span>  author[<span class="number">50</span>];   <span class="type">char</span>  subject[<span class="number">100</span>];      <span class="type">int</span>   book_id;&#125; book;</span><br></pre></td></tr></table></figure>

<h2 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h2><p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。</p>
<p>下面的实例演示了结构的用法：</p>
<h2 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="comment">// 声明一个结构体类型 Books struct Books&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];   <span class="type">char</span>  author[<span class="number">50</span>];   <span class="type">char</span>  subject[<span class="number">100</span>];   <span class="type">int</span>   book_id;&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">&quot;C++ 教程&quot;</span>);   <span class="built_in">strcpy</span>( Book1.author, <span class="string">&quot;Runoob&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">&quot;编程语言&quot;</span>);   Book1.book_id = <span class="number">12345</span>; </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">&quot;CSS 教程&quot;</span>);   <span class="built_in">strcpy</span>( Book2.author, <span class="string">&quot;Runoob&quot;</span>);   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">&quot;前端技术&quot;</span>);   Book2.book_id = <span class="number">12346</span>; </span><br><span class="line">   <span class="comment">// 输出 Book1 信息</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;第一本书标题 : &quot;</span> &lt;&lt; Book1.title &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;第一本书作者 : &quot;</span> &lt;&lt; Book1.author &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;第一本书类目 : &quot;</span> &lt;&lt; Book1.subject &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;第一本书 ID : &quot;</span> &lt;&lt; Book1.book_id &lt;&lt;endl; </span><br><span class="line">   <span class="comment">// 输出 Book2 信息</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;第二本书标题 : &quot;</span> &lt;&lt; Book2.title &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;第二本书作者 : &quot;</span> &lt;&lt; Book2.author &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;第二本书类目 : &quot;</span> &lt;&lt; Book2.subject &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;第二本书 ID : &quot;</span> &lt;&lt; Book2.book_id &lt;&lt;endl; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>实例中定义了结构体类似 Books 及其两个变量 Book1 和 Book2。当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">第一本书标题 : C++ 教程第一本书作者 : Runoob第一本书类目 : 编程语言第一本书 ID : <span class="number">12345</span>第二本书标题 : CSS 教程第二本书作者 : Runoob第二本书类目 : 前端技术第二本书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure>

<h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><p>您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。您可以使用上面实例中的方式来访问结构变量：</p>
<h2 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">void</span> <span class="title">printBook</span><span class="params">( <span class="keyword">struct</span> Books book )</span></span>; </span><br><span class="line"><span class="comment">// 声明一个结构体类型 Books struct Books&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];   <span class="type">char</span>  author[<span class="number">50</span>];   <span class="type">char</span>  subject[<span class="number">100</span>];   <span class="type">int</span>   book_id;&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">&quot;C++ 教程&quot;</span>);   <span class="built_in">strcpy</span>( Book1.author, <span class="string">&quot;Runoob&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">&quot;编程语言&quot;</span>);   Book1.book_id = <span class="number">12345</span>; </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">&quot;CSS 教程&quot;</span>);   <span class="built_in">strcpy</span>( Book2.author, <span class="string">&quot;Runoob&quot;</span>);   </span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">&quot;前端技术&quot;</span>);   Book2.book_id = <span class="number">12346</span>; </span><br><span class="line">   <span class="comment">// 输出 Book1 信息</span></span><br><span class="line">   <span class="built_in">printBook</span>( Book1 ); </span><br><span class="line">   <span class="comment">// 输出 Book2 信息</span></span><br><span class="line">   <span class="built_in">printBook</span>( Book2 ); </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;<span class="function"><span class="type">void</span> <span class="title">printBook</span><span class="params">( <span class="keyword">struct</span> Books book )</span></span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;书标题 : &quot;</span> &lt;&lt; book.title &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;书作者 : &quot;</span> </span><br><span class="line">   &lt;&lt; book.author &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;书类目 : &quot;</span> &lt;&lt; book.subject &lt;&lt;endl;   </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;书 ID : &quot;</span> &lt;&lt; book.book_id &lt;&lt;endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">书标题 : C++ 教程书作者 : Runoob书类目 : 编程语言书 ID : <span class="number">12345</span>书标题 : CSS 教程书作者 : Runoob书类目 : 前端技术书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure>

<h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Books</span> *struct_pointer;</span><br></pre></td></tr></table></figure>

<p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">struct_pointer = &amp;Book1;</span><br></pre></td></tr></table></figure>

<p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">struct_pointer-&gt;title;</span><br></pre></td></tr></table></figure>

<p>让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：</p>
<h2 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">void</span> <span class="title">printBook</span><span class="params">( <span class="keyword">struct</span> Books *book )</span></span>; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Books</span>&#123;</span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];   <span class="type">char</span>  author[<span class="number">50</span>];   <span class="type">char</span>  subject[<span class="number">100</span>];   <span class="type">int</span>   book_id;&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">&quot;C++ 教程&quot;</span>);   <span class="built_in">strcpy</span>( Book1.author, <span class="string">&quot;Runoob&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">&quot;编程语言&quot;</span>);   Book1.book_id = <span class="number">12345</span>; </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">&quot;CSS 教程&quot;</span>);   <span class="built_in">strcpy</span>( Book2.author, <span class="string">&quot;Runoob&quot;</span>);   </span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">&quot;前端技术&quot;</span>);   Book2.book_id = <span class="number">12346</span>; </span><br><span class="line">   <span class="comment">// 通过传 Book1 的地址来输出 Book1 信息</span></span><br><span class="line">   <span class="built_in">printBook</span>( &amp;Book1 ); </span><br><span class="line">   <span class="comment">// 通过传 Book2 的地址来输出 Book2 信息</span></span><br><span class="line">   <span class="built_in">printBook</span>( &amp;Book2 ); </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;<span class="comment">// 该函数以结构指针作为参数void printBook( struct Books *book )&#123;</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;书标题  : &quot;</span> &lt;&lt; book-&gt;title &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;书作者 : &quot;</span> </span><br><span class="line">   &lt;&lt; book-&gt;author &lt;&lt;endl;   cout &lt;&lt; <span class="string">&quot;书类目 : &quot;</span> &lt;&lt; book-&gt;subject &lt;&lt;endl;   </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;书 ID : &quot;</span> &lt;&lt; book-&gt;book_id &lt;&lt;endl;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">书标题  : C++ 教程书作者 : Runoob书类目 : 编程语言书 ID : <span class="number">12345</span>书标题  : CSS 教程书作者 : Runoob书类目 : 前端技术书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure>

<h2 id="typedef-关键字"><a href="#typedef-关键字" class="headerlink" title="typedef 关键字"></a>typedef 关键字</h2><p>下面是一种更简单的定义结构的方式，您可以为创建的类型取一个”别名”。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span>   book_id;&#125;Books;</span><br></pre></td></tr></table></figure>

<p>现在，您可以直接使用 <em>Books</em> 来定义 <em>Books</em> 类型的变量，而不需要使用 struct 关键字。下面是实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Books Book1, Book2;</span><br></pre></td></tr></table></figure>

<p>您可以使用 <strong>typedef</strong> 关键字来定义非结构类型，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">int</span> *pint32;</span><br><span class="line"> pint32 x, y, z;</span><br></pre></td></tr></table></figure>

<p>x, y 和 z 都是指向长整型 long int 的指针。</p>
<h1 id="C-类-对象"><a href="#C-类-对象" class="headerlink" title="C++ 类 &amp; 对象"></a>C++ 类 &amp; 对象</h1><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。</p>
<p>类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。类中的数据和方法称为类的成员。函数在一个类被称为类的成员。</p>
<h2 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h2><p>定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但它定义了类的名称意味着什么，也就是说，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p>
<p>类定义是以关键字 <strong>class</strong> 开头，后跟类的名称。类的主体是包含在一对花括号中。类定义后必须跟着一个分号或一个声明列表。例如，我们使用关键字 <strong>class</strong> 定义 Box 数据类型，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;   <span class="keyword">public</span>:      <span class="type">double</span> length;   <span class="comment">// Length of a box      double breadth;  // Breadth of a box      double height;   // Height of a box&#125;;</span></span><br></pre></td></tr></table></figure>

<p>关键字 <strong>public</strong> 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 <strong>private</strong> 或 <strong>protected</strong>，这个我们稍后会进行讲解。</p>
<h2 id="定义-C-对象"><a href="#定义-C-对象" class="headerlink" title="定义 C++ 对象"></a>定义 C++ 对象</h2><p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。下面的语句声明了类 Box 的两个对象：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Box Box1;          <span class="comment">// 声明 Box1，类型为 BoxBox Box2;          // 声明 Box2，类型为 Box</span></span><br></pre></td></tr></table></figure>

<p>对象 Box1 和 Box2 都有它们各自的数据成员。</p>
<h2 id="访问数据成员"><a href="#访问数据成员" class="headerlink" title="访问数据成员"></a>访问数据成员</h2><p>类的对象的公共数据成员可以使用直接成员访问运算符 (.) 来访问。为了更好地理解这些概念，让我们尝试一下下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;class Box&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">double</span> length;   <span class="comment">// 长度</span></span><br><span class="line">      <span class="type">double</span> breadth;  <span class="comment">// 宽度</span></span><br><span class="line">      <span class="type">double</span> height;   <span class="comment">// 高度&#125;;int main( )&#123;</span></span><br><span class="line">   Box Box1;        <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;        <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   <span class="type">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 用于存储体积</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 详述</span></span><br><span class="line">   Box1.height = <span class="number">5.0</span>; </span><br><span class="line">   Box1.length = <span class="number">6.0</span>; </span><br><span class="line">   Box1.breadth = <span class="number">7.0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// box 2 详述</span></span><br><span class="line">   Box2.height = <span class="number">10.0</span>;</span><br><span class="line">   Box2.length = <span class="number">12.0</span>;</span><br><span class="line">   Box2.breadth = <span class="number">13.0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// box 1 的体积</span></span><br><span class="line">   volume = Box1.height * Box1.length * Box1.breadth;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Box1 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// box 2 的体积</span></span><br><span class="line">   volume = Box2.height * Box2.length * Box2.breadth;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Box2 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Box1 的体积：<span class="number">210B</span>ox2 的体积：<span class="number">1560</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，私有的成员和受保护的成员不能使用直接成员访问运算符 (.) 来直接访问。我们将在后续的教程中学习如何访问私有成员和受保护的成员。</p>
<h1 id="类-对象详解"><a href="#类-对象详解" class="headerlink" title="类 &amp; 对象详解"></a>类 &amp; 对象详解</h1><p>到目前为止，我们已经对 C++ 的类和对象有了基本的了解。下面的列表中还列出了其他一些 C++ 类和对象相关的概念，可以点击相应的链接进行学习。</p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">类成员函数</td>
<td align="left">类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。</td>
</tr>
<tr>
<td align="left">类访问修饰符</td>
<td align="left">类成员可以被定义为 public、private 或 protected。默认情况下是定义为 private。</td>
</tr>
<tr>
<td align="left">构造函数 &amp; 析构函数</td>
<td align="left">类的构造函数是一种特殊的函数，在创建一个新的对象时调用。类的析构函数也是一种特殊的函数，在删除所创建的对象时调用。</td>
</tr>
<tr>
<td align="left">C++ 拷贝构造函数</td>
<td align="left">拷贝构造函数，是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。</td>
</tr>
<tr>
<td align="left">C++ 友元函数</td>
<td align="left"><strong>友元函数</strong>可以访问类的 private 和 protected 成员。</td>
</tr>
<tr>
<td align="left">C++ 内联函数</td>
<td align="left">通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码。</td>
</tr>
<tr>
<td align="left">C++ 中的 this 指针</td>
<td align="left">每个对象都有一个特殊的指针 <strong>this</strong>，它指向对象本身。</td>
</tr>
<tr>
<td align="left">C++ 中指向类的指针</td>
<td align="left">指向类的指针方式如同指向结构的指针。实际上，类可以看成是一个带有函数的结构。</td>
</tr>
<tr>
<td align="left">C++ 类的静态成员</td>
<td align="left">类的数据成员和函数成员都可以被声明为静态的。</td>
</tr>
</tbody></table>
<h1 id="C-继承"><a href="#C-继承" class="headerlink" title="C++ 继承"></a>C++ 继承</h1><p>面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行时间的效果。</p>
<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p>
<p>继承代表了 <strong>is a</strong> 关系。例如，哺乳动物是动物，狗是哺乳动物，因此，狗是动物，等等。</p>
<h2 id="基类-派生类"><a href="#基类-派生类" class="headerlink" title="基类 &amp; 派生类"></a>基类 &amp; 派生类</h2><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">derived</span>-<span class="keyword">class</span>: access-specifier base-<span class="keyword">class</span></span><br></pre></td></tr></table></figure>

<p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p>
<p>假设有一个基类 <strong>Shape</strong>，<strong>Rectangle</strong> 是它的派生类，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 基类class Shape &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="type">int</span> width;</span><br><span class="line">      <span class="type">int</span> height;&#125;;<span class="comment">// 派生类class Rectangle: public Shape&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (width * height); </span><br><span class="line">      &#125;&#125;;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line"> </span><br><span class="line">   Rect.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Rect.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total area: &quot;</span> &lt;&lt; Rect.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Total area: 35</span><br></pre></td></tr></table></figure>

<h2 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h2><p>派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。</p>
<p>我们可以根据访问权限总结出不同的访问类型，如下所示：</p>
<table>
<thead>
<tr>
<th align="left">访问</th>
<th align="left">public</th>
<th align="left">protected</th>
<th align="left">private</th>
</tr>
</thead>
<tbody><tr>
<td align="left">同一个类</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">yes</td>
</tr>
<tr>
<td align="left">派生类</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">no</td>
</tr>
<tr>
<td align="left">外部的类</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left">no</td>
</tr>
</tbody></table>
<p>一个派生类继承了所有的基类方法，但下列情况除外：</p>
<ul>
<li>基类的构造函数、析构函数和拷贝构造函数。</li>
<li>基类的重载运算符。</li>
<li>基类的友元函数。</li>
</ul>
<h2 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h2><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>
<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>
<ul>
<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>
<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>
<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>
</ul>
<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p>
<p>C++ 类可以从多个类继承成员，语法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;派生类名&gt;:&lt;继承方式<span class="number">1</span>&gt;&lt;基类名<span class="number">1</span>&gt;,&lt;继承方式<span class="number">2</span>&gt;&lt;基类名<span class="number">2</span>&gt;,…&#123;&lt;派生类类体&gt;&#125;;</span><br></pre></td></tr></table></figure>

<p>其中，访问修饰符继承方式是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，用来修饰每个基类，各个基类之间用逗号分隔，如上所示。现在让我们一起看看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 基类 Shapeclass Shape &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="type">int</span> width;</span><br><span class="line">      <span class="type">int</span> height;&#125;;<span class="comment">// 基类 PaintCostclass PaintCost &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getCost</span><span class="params">(<span class="type">int</span> area)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> area * <span class="number">70</span>;</span><br><span class="line">      &#125;&#125;;<span class="comment">// 派生类class Rectangle: public Shape, public PaintCost&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (width * height); </span><br><span class="line">      &#125;&#125;;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line">   <span class="type">int</span> area;</span><br><span class="line"> </span><br><span class="line">   Rect.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Rect.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">   area = Rect.<span class="built_in">getArea</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total area: &quot;</span> &lt;&lt; Rect.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 输出总花费</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total paint cost: $&quot;</span> &lt;&lt; Rect.<span class="built_in">getCost</span>(area) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Total area: <span class="number">35</span>Total paint cost: $<span class="number">2450</span></span><br></pre></td></tr></table></figure>

<h1 id="C-重载运算符和重载函数"><a href="#C-重载运算符和重载函数" class="headerlink" title="C++ 重载运算符和重载函数"></a>C++ 重载运算符和重载函数</h1><p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</p>
<p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</p>
<p>当您调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为<strong>重载决策</strong>。</p>
<h2 id="C-中的函数重载"><a href="#C-中的函数重载" class="headerlink" title="C++ 中的函数重载"></a>C++ 中的函数重载</h2><p>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数。</p>
<p>下面的实例中，同名函数 <strong>print()</strong> 被用于输出不同的数据类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">printData</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Printing int: &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span>  f)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Printing float: &quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span>* c)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Printing character: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">      &#125;&#125;;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">   printData pd;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Call print to print integer</span></span><br><span class="line">   pd.<span class="built_in">print</span>(<span class="number">5</span>);</span><br><span class="line">   <span class="comment">// Call print to print float</span></span><br><span class="line">   pd.<span class="built_in">print</span>(<span class="number">500.263</span>);</span><br><span class="line">   <span class="comment">// Call print to print character</span></span><br><span class="line">   pd.<span class="built_in">print</span>(<span class="string">&quot;Hello C++&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Printing <span class="type">int</span>: <span class="number">5</span>Printing <span class="type">float</span>: <span class="number">500.263</span>Printing character: Hello C++</span><br></pre></td></tr></table></figure>

<h2 id="C-中的运算符重载"><a href="#C-中的运算符重载" class="headerlink" title="C++ 中的运算符重载"></a>C++ 中的运算符重载</h2><p>您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。</p>
<p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="type">const</span> Box&amp;);</span><br></pre></td></tr></table></figure>

<p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="type">const</span> Box&amp;, <span class="type">const</span> Box&amp;);</span><br></pre></td></tr></table></figure>

<p>下面的实例使用成员函数演示了运算符重载的概念。在这里，对象作为参数进行传递，对象的属性使用 <strong>this</strong> 运算符进行访问，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;class Box&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setLength</span><span class="params">( <span class="type">double</span> len )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          length = len;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setBreadth</span><span class="params">( <span class="type">double</span> bre )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">( <span class="type">double</span> hei )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符，用于把两个 Box 对象相加</span></span><br><span class="line">      Box <span class="keyword">operator</span>+(<span class="type">const</span> Box&amp; b)</span><br><span class="line">      &#123;</span><br><span class="line">         Box box;</span><br><span class="line">         box.length = <span class="keyword">this</span>-&gt;length + b.length;</span><br><span class="line">         box.breadth = <span class="keyword">this</span>-&gt;breadth + b.breadth;</span><br><span class="line">         box.height = <span class="keyword">this</span>-&gt;height + b.height;</span><br><span class="line">         <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="type">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="type">double</span> height;      <span class="comment">// 高度&#125;;// 程序的主函数int main( )&#123;</span></span><br><span class="line">   Box Box1;                <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;                <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   Box Box3;                <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">   <span class="type">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 把体积存储在该变量中</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box1 详述</span></span><br><span class="line">   Box1.<span class="built_in">setLength</span>(<span class="number">6.0</span>); </span><br><span class="line">   Box1.<span class="built_in">setBreadth</span>(<span class="number">7.0</span>); </span><br><span class="line">   Box1.<span class="built_in">setHeight</span>(<span class="number">5.0</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box2 详述</span></span><br><span class="line">   Box2.<span class="built_in">setLength</span>(<span class="number">12.0</span>); </span><br><span class="line">   Box2.<span class="built_in">setBreadth</span>(<span class="number">13.0</span>); </span><br><span class="line">   Box2.<span class="built_in">setHeight</span>(<span class="number">10.0</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box1 的体积</span></span><br><span class="line">   volume = Box1.<span class="built_in">getVolume</span>();</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Volume of Box1 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box2 的体积</span></span><br><span class="line">   volume = Box2.<span class="built_in">getVolume</span>();</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Volume of Box2 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 把两个对象相加，得到 Box3</span></span><br><span class="line">   Box3 = Box1 + Box2;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Box3 的体积</span></span><br><span class="line">   volume = Box3.<span class="built_in">getVolume</span>();</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Volume of Box1 : <span class="number">210</span>Volume of Box2 : <span class="number">1560</span>Volume of Box3 : <span class="number">5400</span></span><br></pre></td></tr></table></figure>

<h2 id="可重载运算符-不可重载运算符"><a href="#可重载运算符-不可重载运算符" class="headerlink" title="可重载运算符&#x2F;不可重载运算符"></a>可重载运算符&#x2F;不可重载运算符</h2><p>下面是可重载的运算符列表：</p>
<table>
<thead>
<tr>
<th>+</th>
<th>-</th>
<th>*</th>
<th>&#x2F;</th>
<th>%</th>
<th>^</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>|</td>
<td>~</td>
<td>!</td>
<td>,</td>
<td>&#x3D;</td>
</tr>
<tr>
<td>&lt;</td>
<td>&gt;</td>
<td>&lt;&#x3D;</td>
<td>&gt;&#x3D;</td>
<td>++</td>
<td>–</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>&gt;&gt;</td>
<td>&#x3D;&#x3D;</td>
<td>!&#x3D;</td>
<td>&amp;&amp;</td>
<td>||</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>-&#x3D;</td>
<td>&#x2F;&#x3D;</td>
<td>%&#x3D;</td>
<td>^&#x3D;</td>
<td>&amp;&#x3D;</td>
</tr>
<tr>
<td>|&#x3D;</td>
<td>*&#x3D;</td>
<td>&lt;&lt;&#x3D;</td>
<td>&gt;&gt;&#x3D;</td>
<td>[]</td>
<td>()</td>
</tr>
<tr>
<td>-&gt;</td>
<td>-&gt;*</td>
<td>new</td>
<td>new []</td>
<td>delete</td>
<td>delete []</td>
</tr>
</tbody></table>
<p>下面是不可重载的运算符列表：</p>
<table>
<thead>
<tr>
<th>::</th>
<th>.*</th>
<th>.</th>
<th>?:</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="运算符重载实例"><a href="#运算符重载实例" class="headerlink" title="运算符重载实例"></a>运算符重载实例</h2><p>下面提供了各种运算符重载的实例，帮助您更好地理解重载的概念。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">运算符和实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">一元运算符重载</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">二元运算符重载</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">关系运算符重载</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">输入&#x2F;输出运算符重载</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">++ 和 – 运算符重载</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">赋值运算符重载</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">函数调用运算符 () 重载</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">下标运算符 [] 重载</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">类成员访问运算符 -&gt; 重载</td>
</tr>
</tbody></table>
<h1 id="C-多态"><a href="#C-多态" class="headerlink" title="C++ 多态"></a>C++ 多态</h1><p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p>
<p>C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。</p>
<p>下面的实例中，基类 Shape 被派生为两个类，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> using namespace std;</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="type">int</span> width, height;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Shape</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Parent class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;&#125;;<span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Rectangle</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>):<span class="built_in">Shape</span>(a, b) &#123; &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">area</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Rectangle class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> (width * height); </span><br><span class="line">      &#125;&#125;;<span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="keyword">public</span> Shape&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Triangle</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>):<span class="built_in">Shape</span>(a, b) &#123; &#125;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">area</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Triangle class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> (width * height / <span class="number">2</span>); </span><br><span class="line">      &#125;&#125;;<span class="comment">// 程序的主函数int main( )&#123;</span></span><br><span class="line">   Shape *shape;</span><br><span class="line">   <span class="function">Rectangle <span class="title">rec</span><span class="params">(<span class="number">10</span>,<span class="number">7</span>)</span></span>;</span><br><span class="line">   <span class="function">Triangle  <span class="title">tri</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 存储矩形的地址</span></span><br><span class="line">   shape = &amp;rec;</span><br><span class="line">   <span class="comment">// 调用矩形的求面积函数 area</span></span><br><span class="line">   shape-&gt;<span class="built_in">area</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 存储三角形的地址</span></span><br><span class="line">   shape = &amp;tri;</span><br><span class="line">   <span class="comment">// 调用三角形的求面积函数 area</span></span><br><span class="line">   shape-&gt;<span class="built_in">area</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Parent <span class="keyword">class</span> <span class="title class_">areaParent</span> <span class="keyword">class</span> <span class="title class_">area</span></span><br></pre></td></tr></table></figure>

<p>导致错误输出的原因是，调用函数 area() 被编译器设置为基类中的版本，这就是所谓的<strong>静态多态</strong>，或<strong>静态链接</strong> - 函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area() 函数在程序编译期间就已经设置好了。</p>
<p>但现在，让我们对程序稍作修改，在 Shape 类中，area() 的声明前放置关键字 <strong>virtual</strong>，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="type">int</span> width, height;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Shape</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Parent class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>修改后，当编译和执行前面的实例代码时，它会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Rectangle <span class="keyword">class</span> <span class="title class_">areaTriangle</span> <span class="keyword">class</span> <span class="title class_">area</span></span><br></pre></td></tr></table></figure>

<p>此时，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 *shape 中，所以会调用各自的 area() 函数。</p>
<p>正如您所看到的，每个子类都有一个函数 area() 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p>
<p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p>
<h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</p>
<p>我们可以把基类中的虚函数 area() 改写如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="type">int</span> width, height;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Shape</span>( <span class="type">int</span> a=<span class="number">0</span>, <span class="type">int</span> b=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// pure virtual function</span></span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;&#125;;</span><br></pre></td></tr></table></figure>

<p>&#x3D; 0 告诉编译器，函数没有主体，上面的虚函数是<strong>纯虚函数</strong>。</p>
<h1 id="C-数据抽象"><a href="#C-数据抽象" class="headerlink" title="C++ 数据抽象"></a>C++ 数据抽象</h1><p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。</p>
<p>数据抽象是一种依赖于接口和实现分离的编程（设计）技术。</p>
<p>让我们举一个现实生活中的真实例子，比如一台电视机，您可以打开和关闭、切换频道、调整音量、添加外部组件（如喇叭、录像机、DVD 播放器），但是您不知道它的内部实现细节，也就是说，您并不知道它是如何通过缆线接收信号，如何转换信号，并最终显示在屏幕上。</p>
<p>因此，我们可以说电视把它的内部实现和外部接口分离开了，您无需知道它的内部实现原理，直接通过它的外部接口（比如电源按钮、遥控器、声量控制器）就可以操控电视。</p>
<p>现在，让我们言归正传，就 C++ 编程而言，C++ 类为<strong>数据抽象</strong>提供了可能。它们向外界提供了大量用于操作对象数据的公共方法，也就是说，外界实际上并不清楚类的内部实现。</p>
<p>例如，您的程序可以调用 <strong>sort()</strong> 函数，而不需要知道函数中排序数据所用到的算法。实际上，函数排序的底层实现会因库的版本不同而有所差异，只要接口不变，函数调用就可以照常工作。</p>
<p>在 C++ 中，我们使用<strong>类</strong>来定义我们自己的抽象数据类型（ADT）。您可以使用类 <strong>ostream</strong> 的 <strong>cout</strong> 对象来输出数据到标准输出，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main( )&#123;   cout &lt;&lt; <span class="string">&quot;Hello C++&quot;</span> &lt;&lt;endl;   return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>在这里，您不需要理解 <strong>cout</strong> 是如何在用户的屏幕上显示文本。您只需要知道公共接口即可，cout 的底层实现可以自由改变。</p>
<h2 id="访问标签强制抽象"><a href="#访问标签强制抽象" class="headerlink" title="访问标签强制抽象"></a>访问标签强制抽象</h2><p>在 C++ 中，我们使用访问标签来定义类的抽象接口。一个类可以包含零个或多个访问标签：</p>
<ul>
<li>使用公共标签定义的成员都可以访问该程序的所有部分。一个类型的数据抽象视图是由它的公共成员来定义的。</li>
<li>使用私有标签定义的成员无法访问到使用类的代码。私有部分对使用类型的代码隐藏了实现细节。</li>
</ul>
<p>访问标签出现的频率没有限制。每个访问标签指定了紧随其后的成员定义的访问级别。指定的访问级别会一直有效，直到遇到下一个访问标签或者遇到类主体的关闭右括号为止。</p>
<h2 id="数据抽象的好处"><a href="#数据抽象的好处" class="headerlink" title="数据抽象的好处"></a>数据抽象的好处</h2><p>数据抽象有两个重要的优势：</p>
<ul>
<li>类的内部受到保护，不会因无意的用户级错误导致对象状态受损。</li>
<li>类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误报告。</li>
</ul>
<p>如果只在类的私有部分定义数据成员，编写该类的作者就可以随意更改数据。如果实现发生改变，则只需要检查类的代码，看看这个改变会导致哪些影响。如果数据是公有的，则任何直接访问旧表示形式的数据成员的函数都可能受到影响。</p>
<h2 id="数据抽象的实例"><a href="#数据抽象的实例" class="headerlink" title="数据抽象的实例"></a>数据抽象的实例</h2><p>C++ 程序中，任何带有公有和私有成员的类都可以作为数据抽象的实例。请看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;class Adder&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 构造函数</span></span><br><span class="line">      <span class="built_in">Adder</span>(<span class="type">int</span> i = <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        total = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对外的接口</span></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> number)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          total += number;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对外的接口</span></span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getTotal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> total;</span><br><span class="line">      &#125;;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="comment">// 对外隐藏的数据</span></span><br><span class="line">      <span class="type">int</span> total;&#125;;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   Adder a;</span><br><span class="line">   </span><br><span class="line">   a.<span class="built_in">addNum</span>(<span class="number">10</span>);</span><br><span class="line">   a.<span class="built_in">addNum</span>(<span class="number">20</span>);</span><br><span class="line">   a.<span class="built_in">addNum</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total &quot;</span> &lt;&lt; a.<span class="built_in">getTotal</span>() &lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Total <span class="number">60</span></span><br></pre></td></tr></table></figure>

<p>上面的类把数字相加，并返回总和。公有成员 <strong>addNum</strong> 和 <strong>getTotal</strong> 是对外的接口，用户需要知道它们以便使用类。私有成员 <strong>total</strong> 是用户不需要了解的，但又是类能正常工作所必需的。</p>
<h2 id="设计策略"><a href="#设计策略" class="headerlink" title="设计策略"></a>设计策略</h2><p>抽象把代码分离为接口和实现。所以在设计组件时，必须保持接口独立于实现，这样，如果改变底层实现，接口也将保持不变。</p>
<p>在这种情况下，不管任何程序使用接口，接口都不会受到影响，只需要将最新的实现重新编译即可。</p>
<h1 id="C-数据封装"><a href="#C-数据封装" class="headerlink" title="C++ 数据封装"></a>C++ 数据封装</h1><p>所有的 C++ 程序都有以下两个基本要素：</p>
<ul>
<li><strong>程序语句（代码）：</strong>这是程序中执行动作的部分，它们被称为函数。</li>
<li><strong>程序数据：</strong>数据是程序的信息，会受到程序函数的影响。</li>
</ul>
<p>封装是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念，这样能避免受到外界的干扰和误用，从而确保了安全。数据封装引申出了另一个重要的 OOP 概念，即<strong>数据隐藏</strong>。</p>
<p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。</p>
<p>C++ 通过创建<strong>类</strong>来支持封装和数据隐藏（public、protected、private）。我们已经知道，类包含私有成员（private）、保护成员（protected）和公有成员（public）成员。默认情况下，在类中定义的所有项目都是私有的。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="type">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="type">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>

<p>变量 length、breadth 和 height 都是私有的（private）。这意味着它们只能被 Box 类中的其他成员访问，而不能被程序中其他部分访问。这是实现封装的一种方式。</p>
<p>为了使类中的成员变成公有的（即，程序中的其他部分也能访问），必须在这些成员前使用 <strong>public</strong> 关键字进行声明。所有定义在 public 标识符后边的变量或函数可以被程序中所有其他的函数访问。</p>
<p>把一个类定义为另一个类的友元类，会暴露实现细节，从而降低了封装性。理想的做法是尽可能地对外隐藏每个类的实现细节。</p>
<h2 id="数据封装的实例"><a href="#数据封装的实例" class="headerlink" title="数据封装的实例"></a>数据封装的实例</h2><p>C++ 程序中，任何带有公有和私有成员的类都可以作为数据封装和数据抽象的实例。请看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;class Adder&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 构造函数</span></span><br><span class="line">      <span class="built_in">Adder</span>(<span class="type">int</span> i = <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        total = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对外的接口</span></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> number)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          total += number;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对外的接口</span></span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getTotal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> total;</span><br><span class="line">      &#125;;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="comment">// 对外隐藏的数据</span></span><br><span class="line">      <span class="type">int</span> total;&#125;;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   Adder a;</span><br><span class="line">   </span><br><span class="line">   a.<span class="built_in">addNum</span>(<span class="number">10</span>);</span><br><span class="line">   a.<span class="built_in">addNum</span>(<span class="number">20</span>);</span><br><span class="line">   a.<span class="built_in">addNum</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total &quot;</span> &lt;&lt; a.<span class="built_in">getTotal</span>() &lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Total <span class="number">60</span></span><br></pre></td></tr></table></figure>

<p>上面的类把数字相加，并返回总和。公有成员 <strong>addNum</strong> 和 <strong>getTotal</strong> 是对外的接口，用户需要知道它们以便使用类。私有成员 <strong>total</strong> 是对外隐藏的，用户不需要了解它，但它又是类能正常工作所必需的。</p>
<h2 id="设计策略-1"><a href="#设计策略-1" class="headerlink" title="设计策略"></a>设计策略</h2><p>通常情况下，我们都会设置类成员状态为私有（private），除非我们真的需要将其暴露，这样才能保证良好的<strong>封装性</strong>。</p>
<p>这通常应用于数据成员，但它同样适用于所有成员，包括虚函数。</p>
<h1 id="C-接口（抽象类）"><a href="#C-接口（抽象类）" class="headerlink" title="C++ 接口（抽象类）"></a>C++ 接口（抽象类）</h1><p>接口描述了类的行为和功能，而不需要完成类的特定实现。</p>
<p>C++ 接口是使用<strong>抽象类</strong>来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关的数据分离开的概念。</p>
<p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。纯虚函数是通过在声明中使用 “&#x3D; 0” 来指定的，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 纯虚函数</span></span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="type">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="type">double</span> height;      <span class="comment">// 高度&#125;;</span></span><br></pre></td></tr></table></figure>

<p>设计<strong>抽象类</strong>（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为<strong>接口</strong>使用。如果试图实例化一个抽象类的对象，会导致编译错误。</p>
<p>因此，如果一个 ABC 的子类需要被实例化，则必须实现每个虚函数，这也意味着 C++ 支持使用 ABC 声明接口。如果没有在派生类中重载纯虚函数，就尝试实例化该类的对象，会导致编译错误。</p>
<p>可用于实例化对象的类被称为<strong>具体类</strong>。</p>
<h2 id="抽象类的实例"><a href="#抽象类的实例" class="headerlink" title="抽象类的实例"></a>抽象类的实例</h2><p>请看下面的实例，基类 Shape 提供了一个接口 **getArea()**，在两个派生类 Rectangle 和 Triangle 中分别实现了 **getArea()**：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="comment">// 基类class Shape &#123;public:</span></span><br><span class="line">   <span class="comment">// 提供接口框架的纯虚函数</span></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      width = w;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      height = h;</span><br><span class="line">   &#125;<span class="keyword">protected</span>:</span><br><span class="line">   <span class="type">int</span> width;</span><br><span class="line">   <span class="type">int</span> height;&#125;;</span><br><span class="line"> <span class="comment">// 派生类class Rectangle: public Shape&#123;public:</span></span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height); </span><br><span class="line">   &#125;&#125;;<span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="keyword">public</span> Shape&#123;<span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height)/<span class="number">2</span>; </span><br><span class="line">   &#125;&#125;;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line">   Triangle  Tri;</span><br><span class="line"> </span><br><span class="line">   Rect.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Rect.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total Rectangle area: &quot;</span> &lt;&lt; Rect.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   Tri.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Tri.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total Triangle area: &quot;</span> &lt;&lt; Tri.<span class="built_in">getArea</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Total Rectangle area: <span class="number">35</span>Total Triangle area: <span class="number">17</span></span><br></pre></td></tr></table></figure>

<p>从上面的实例中，我们可以看到一个抽象类是如何定义一个接口 getArea()，两个派生类是如何通过不同的计算面积的算法来实现这个相同的函数。</p>
<h2 id="设计策略-2"><a href="#设计策略-2" class="headerlink" title="设计策略"></a>设计策略</h2><p>面向对象的系统可能会使用一个抽象基类为所有的外部应用程序提供一个适当的、通用的、标准化的接口。然后，派生类通过继承抽象基类，就把所有类似的操作都继承下来。</p>
<p>外部应用程序提供的功能（即公有函数）在抽象基类中是以纯虚函数的形式存在的。这些纯虚函数在相应的派生类中被实现。</p>
<p>这个架构也使得新的应用程序可以很容易地被添加到系统中，即使是在系统被定义之后依然可以如此。</p>
<h1 id="C-文件和流"><a href="#C-文件和流" class="headerlink" title="C++ 文件和流"></a>C++ 文件和流</h1><p>到目前为止，我们已经使用了 <strong>iostream</strong> 标准库，它提供了 <strong>cin</strong> 和 <strong>cout</strong> 方法分别用于从标准输入读取流和向标准输出写入流。</p>
<p>本教程介绍如何从文件读取流和向文件写入流。这就需要用到 C++ 中另一个标准库 <strong>fstream</strong>，它定义了三个新的数据类型：</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ofstream</td>
<td align="left">该数据类型表示输出文件流，用于创建文件并向文件写入信息。</td>
</tr>
<tr>
<td align="left">ifstream</td>
<td align="left">该数据类型表示输入文件流，用于从文件读取信息。</td>
</tr>
<tr>
<td align="left">fstream</td>
<td align="left">该数据类型通常表示文件流，且同时具有 ofstream 和 ifstream 两种功能，这意味着它可以创建文件，向文件写入信息，从文件读取信息。</td>
</tr>
</tbody></table>
<p>要在 C++ 中进行文件处理，必须在 C++ 源代码文件中包含头文件 <iostream> 和 <fstream>。</p>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>在从文件读取信息或者向文件写入信息之前，必须先打开文件。<strong>ofstream</strong> 和 <strong>fstream</strong> 对象都可以用来打开文件进行写操作，如果只需要打开文件进行读操作，则使用 <strong>ifstream</strong> 对象。</p>
<p>下面是 open() 函数的标准语法，open() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, ios::openmode mode)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>open()</strong> 成员函数的第一参数指定要打开的文件的名称和位置，第二个参数定义文件被打开的模式。</p>
<table>
<thead>
<tr>
<th align="left">模式标志</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ios::app</td>
<td align="left">追加模式。所有写入都追加到文件末尾。</td>
</tr>
<tr>
<td align="left">ios::ate</td>
<td align="left">文件打开后定位到文件末尾。</td>
</tr>
<tr>
<td align="left">ios::in</td>
<td align="left">打开文件用于读取。</td>
</tr>
<tr>
<td align="left">ios::out</td>
<td align="left">打开文件用于写入。</td>
</tr>
<tr>
<td align="left">ios::trunc</td>
<td align="left">如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td>
</tr>
</tbody></table>
<p>您可以把以上两种或两种以上的模式结合使用。例如，如果您想要以写入模式打开文件，并希望截断文件，以防文件已存在，那么您可以使用下面的语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ofstream outfile;outfile.<span class="built_in">open</span>(<span class="string">&quot;file.dat&quot;</span>, ios::out | ios::trunc );</span><br></pre></td></tr></table></figure>

<p>类似地，您如果想要打开一个文件用于读写，可以使用下面的语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fstream  afile;afile.<span class="built_in">open</span>(<span class="string">&quot;file.dat&quot;</span>, ios::out | ios::in );</span><br></pre></td></tr></table></figure>

<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>当 C++ 程序终止时，它会自动关闭刷新所有流，释放所有分配的内存，并关闭所有打开的文件。但程序员应该养成一个好习惯，在程序终止前关闭所有打开的文件。</p>
<p>下面是 close() 函数的标准语法，close() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>在 C++ 编程中，我们使用流插入运算符（ &lt;&lt; ）向文件写入信息，就像使用该运算符输出信息到屏幕上一样。唯一不同的是，在这里您使用的是 <strong>ofstream</strong> 或 <strong>fstream</strong> 对象，而不是 <strong>cout</strong> 对象。</p>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>在 C++ 编程中，我们使用流提取运算符（ &gt;&gt; ）从文件读取信息，就像使用该运算符从键盘输入信息一样。唯一不同的是，在这里您使用的是 <strong>ifstream</strong> 或 <strong>fstream</strong> 对象，而不是 <strong>cin</strong> 对象。</p>
<h2 id="读取-写入实例"><a href="#读取-写入实例" class="headerlink" title="读取 &amp; 写入实例"></a>读取 &amp; 写入实例</h2><p>下面的 C++ 程序以读写模式打开一个文件。在向文件 afile.dat 写入用户输入的信息之后，程序从文件读取信息，并将其输出到屏幕上：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">char</span> data[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 以写模式打开文件</span></span><br><span class="line">   ofstream outfile;</span><br><span class="line">   outfile.<span class="built_in">open</span>(<span class="string">&quot;afile.dat&quot;</span>);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Writing to the file&quot;</span> &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Enter your name: &quot;</span>; </span><br><span class="line">   cin.<span class="built_in">getline</span>(data, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 向文件写入用户输入的数据</span></span><br><span class="line">   outfile &lt;&lt; data &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Enter your age: &quot;</span>; </span><br><span class="line">   cin &gt;&gt; data;</span><br><span class="line">   cin.<span class="built_in">ignore</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 再次向文件写入用户输入的数据</span></span><br><span class="line">   outfile &lt;&lt; data &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 关闭打开的文件</span></span><br><span class="line">   outfile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 以读模式打开文件</span></span><br><span class="line">   ifstream infile; </span><br><span class="line">   infile.<span class="built_in">open</span>(<span class="string">&quot;afile.dat&quot;</span>); </span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Reading from the file&quot;</span> &lt;&lt; endl; </span><br><span class="line">   infile &gt;&gt; data; </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在屏幕上写入数据</span></span><br><span class="line">   cout &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 再次从文件读取数据，并显示它</span></span><br><span class="line">   infile &gt;&gt; data; </span><br><span class="line">   cout &lt;&lt; data &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 关闭打开的文件</span></span><br><span class="line">   infile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列输入和输出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$./a.outWriting to the fileEnter your name: ZaraEnter your age: <span class="number">9</span>Reading from the fileZara9</span><br></pre></td></tr></table></figure>

<p>上面的实例中使用了 cin 对象的附加函数，比如 getline()函数从外部读取一行，ignore() 函数会忽略掉之前读语句留下的多余字符。</p>
<h2 id="文件位置指针"><a href="#文件位置指针" class="headerlink" title="文件位置指针"></a>文件位置指针</h2><p><strong>istream</strong> 和 <strong>ostream</strong> 都提供了用于重新定位文件位置指针的成员函数。这些成员函数包括关于 istream 的 <strong>seekg</strong>（”seek get”）和关于 ostream 的 <strong>seekp</strong>（”seek put”）。</p>
<p>seekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 <strong>ios::beg</strong>（默认的，从流的开头开始定位），也可以是 <strong>ios::cur</strong>（从流的当前位置开始定位），也可以是 <strong>ios::end</strong>（从流的末尾开始定位）。</p>
<p>文件位置指针是一个整数值，指定了从文件的起始位置到指针所在位置的字节数。下面是关于定位 “get” 文件位置指针的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）fileObject.seekg( n );// 把文件的读指针从 fileObject 当前位置向后移 n 个字节fileObject.seekg( n, ios::cur );// 把文件的读指针从 fileObject 末尾往回移 n 个字节fileObject.seekg( n, ios::end );// 定位到 fileObject 的末尾fileObject.seekg( 0, ios::end );</span></span><br></pre></td></tr></table></figure>

<h1 id="C-异常处理"><a href="#C-异常处理" class="headerlink" title="C++ 异常处理"></a>C++ 异常处理</h1><p>异常是程序在执行期间产生的问题。C++ 异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。</p>
<p>异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：<strong>try、catch、throw</strong>。</p>
<ul>
<li><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。</li>
<li><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</li>
<li><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。</li>
</ul>
<p>如果有一个块抛出一个异常，捕获异常的方法会使用 <strong>try</strong> 和 <strong>catch</strong> 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。使用 try&#x2F;catch 语句的语法如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 保护代码&#125;catch( ExceptionName e1 )&#123;</span></span><br><span class="line">   <span class="comment">// catch 块&#125;catch( ExceptionName e2 )&#123;</span></span><br><span class="line">   <span class="comment">// catch 块&#125;catch( ExceptionName eN )&#123;</span></span><br><span class="line">   <span class="comment">// catch 块&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果 <strong>try</strong> 块在不同的情境下会抛出不同的异常，这个时候可以尝试罗列多个 <strong>catch</strong> 语句，用于捕获不同类型的异常。</p>
<h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>您可以使用 <strong>throw</strong> 语句在代码块中的任何地方抛出异常。throw 语句的操作数可以是任意的表达式，表达式的结果的类型决定了抛出的异常的类型。</p>
<p>以下是尝试除以零时抛出异常的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">division</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;Division by zero condition!&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (a/b);&#125;</span><br></pre></td></tr></table></figure>

<h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p><strong>catch</strong> 块跟在 <strong>try</strong> 块后面，用于捕获异常。您可以指定想要捕捉的异常类型，这是由 catch 关键字后的括号内的异常声明决定的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 保护代码&#125;catch( ExceptionName e )&#123;</span></span><br><span class="line">  <span class="comment">// 处理 ExceptionName 异常的代码&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码会捕获一个类型为 <strong>ExceptionName</strong> 的异常。如果您想让 catch 块能够处理 try 块抛出的任何类型的异常，则必须在异常声明的括号内使用省略号 …，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 保护代码&#125;catch(...)&#123;</span></span><br><span class="line">  <span class="comment">// 能处理任何异常的代码&#125;</span></span><br></pre></td></tr></table></figure>

<p>下面是一个实例，抛出一个除以零的异常，并在 catch 块中捕获该异常。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;double division(int a, int b)&#123;</span></span><br><span class="line">   <span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;Division by zero condition!&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (a/b);&#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line">   <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">   <span class="type">double</span> z = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     z = <span class="built_in">division</span>(x, y);</span><br><span class="line">     cout &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">   &#125;<span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg) &#123;</span><br><span class="line">     cerr &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>由于我们抛出了一个类型为 <strong>const char*</strong> 的异常，因此，当捕获该异常时，我们必须在 catch 块中使用 const char*。当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Division by zero condition!</span><br></pre></td></tr></table></figure>

<h2 id="C-标准的异常"><a href="#C-标准的异常" class="headerlink" title="C++ 标准的异常"></a>C++ 标准的异常</h2><p>C++ 提供了一系列标准的异常，定义在 <strong><exception></strong> 中，我们可以在程序中使用这些标准的异常。它们是以父子类层次结构组织起来的，如下所示：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/1641382aba76354408.jpg" alt="img"></p>
<p>下表是对上面层次结构中出现的每个异常的说明：</p>
<table>
<thead>
<tr>
<th align="left">异常</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>std::exception</strong></td>
<td align="left">该异常是所有标准 C++ 异常的父类。</td>
</tr>
<tr>
<td align="left">std::bad_alloc</td>
<td align="left">该异常可以通过 <strong>new</strong> 抛出。</td>
</tr>
<tr>
<td align="left">std::bad_cast</td>
<td align="left">该异常可以通过 <strong>dynamic_cast</strong> 抛出。</td>
</tr>
<tr>
<td align="left">std::bad_exception</td>
<td align="left">这在处理 C++ 程序中无法预期的异常时非常有用。</td>
</tr>
<tr>
<td align="left">std::bad_typeid</td>
<td align="left">该异常可以通过 <strong>typeid</strong> 抛出。</td>
</tr>
<tr>
<td align="left"><strong>std::logic_error</strong></td>
<td align="left">理论上可以通过读取代码来检测到的异常。</td>
</tr>
<tr>
<td align="left">std::domain_error</td>
<td align="left">当使用了一个无效的数学域时，会抛出该异常。</td>
</tr>
<tr>
<td align="left">std::invalid_argument</td>
<td align="left">当使用了无效的参数时，会抛出该异常。</td>
</tr>
<tr>
<td align="left">std::length_error</td>
<td align="left">当创建了太长的 std::string 时，会抛出该异常。</td>
</tr>
<tr>
<td align="left">std::out_of_range</td>
<td align="left">该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=""></a>。</td>
</tr>
<tr>
<td align="left"><strong>std::runtime_error</strong></td>
<td align="left">理论上不可以通过读取代码来检测到的异常。</td>
</tr>
<tr>
<td align="left">std::overflow_error</td>
<td align="left">当发生数学上溢时，会抛出该异常。</td>
</tr>
<tr>
<td align="left">std::range_error</td>
<td align="left">当尝试存储超出范围的值时，会抛出该异常。</td>
</tr>
<tr>
<td align="left">std::underflow_error</td>
<td align="left">当发生数学下溢时，会抛出该异常。</td>
</tr>
</tbody></table>
<h2 id="定义新的异常"><a href="#定义新的异常" class="headerlink" title="定义新的异常"></a>定义新的异常</h2><p>您可以通过继承和重载 <strong>exception</strong> 类来定义新的异常。下面的实例演示了如何使用 std::exception 类来实现自己的异常：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span>using namespace std;struct MyException : public exception&#123;</span></span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="type">char</span> * <span class="title">what</span> <span class="params">()</span> <span class="type">const</span> <span class="title">throw</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;C++ Exception&quot;</span>;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">MyException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span>(MyException&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;MyException caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span>(std::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//其他的错误</span></span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这将产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyException caught</span><br><span class="line">C++ Exception</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>what()</strong> 是异常类提供的一个公共方法，它已被所有子异常类重载。这将返回异常产生的原因。</p>
<h1 id="C-动态内存"><a href="#C-动态内存" class="headerlink" title="C++ 动态内存"></a>C++ 动态内存</h1><p>了解动态内存在 C++ 中是如何工作的是成为一名合格的 C++ 程序员必不可少的。C++ 程序中的内存分为两个部分：</p>
<ul>
<li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li>
<li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li>
</ul>
<p>很多时候，您无法提前预知需要多少内存来存储某个定义变量中的特定信息，所需内存的大小需要在运行时才能确定。</p>
<p>在 C++ 中，您可以使用特殊的运算符为给定类型的变量在运行时分配堆内的内存，这会返回所分配的空间地址。这种运算符即 <strong>new</strong> 运算符。</p>
<p>如果您不需要动态分配内存，可以使用 <strong>delete</strong> 运算符，删除之前由 new 运算符分配的内存。</p>
<h2 id="new-和-delete-运算符"><a href="#new-和-delete-运算符" class="headerlink" title="new 和 delete 运算符"></a>new 和 delete 运算符</h2><p>下面是使用 new 运算符来为任意的数据类型动态分配内存的通用语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> data-type;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>data-type</strong> 可以是包括数组在内的任意内置的数据类型，也可以是包括类或结构在内的用户自定义的任何数据类型。让我们先来看下内置的数据类型。例如，我们可以定义一个指向 double 类型的指针，然后请求内存，该内存在执行时被分配。我们可以按照下面的语句使用 <strong>new</strong> 运算符来完成这点：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span>* pvalue  = <span class="literal">NULL</span>; <span class="comment">// 初始化为 null 的指针pvalue  = new double;   // 为变量请求内存</span></span><br></pre></td></tr></table></figure>

<p>如果自由存储区已被用完，可能无法成功分配内存。所以建议检查 new 运算符是否返回 NULL 指针，并采取以下适当的操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span>* pvalue  = <span class="literal">NULL</span>;<span class="keyword">if</span>( !(pvalue  = <span class="keyword">new</span> <span class="type">double</span> ))&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Error: out of memory.&quot;</span> &lt;&lt;endl;</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br></pre></td></tr></table></figure>

<p><strong>malloc()</strong> 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。</p>
<p>在任何时候，当您觉得某个已经动态分配内存的变量不再需要使用时，您可以使用 delete 操作符释放它所占用的内存，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> pvalue;        <span class="comment">// 释放 pvalue 所指向的内存</span></span><br></pre></td></tr></table></figure>

<p>下面的实例中使用了上面的概念，演示了如何使用 new 和 delete 运算符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main ()&#123;</span></span><br><span class="line">   <span class="type">double</span>* pvalue  = <span class="literal">NULL</span>; <span class="comment">// 初始化为 null 的指针</span></span><br><span class="line">   pvalue  = <span class="keyword">new</span> <span class="type">double</span>;   <span class="comment">// 为变量请求内存</span></span><br><span class="line"> </span><br><span class="line">   *pvalue = <span class="number">29494.99</span>;     <span class="comment">// 在分配的地址存储值</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of pvalue : &quot;</span> &lt;&lt; *pvalue &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span> pvalue;         <span class="comment">// 释放内存</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Value of pvalue : <span class="number">29495</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的动态内存分配"><a href="#数组的动态内存分配" class="headerlink" title="数组的动态内存分配"></a>数组的动态内存分配</h2><p>假设我们要为一个字符数组（一个有 20 个字符的字符串）分配内存，我们可以使用上面实例中的语法来为数组动态地分配内存，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* pvalue  = <span class="literal">NULL</span>;   <span class="comment">// 初始化为 null 的指针pvalue  = new char[20]; // 为变量请求内存</span></span><br></pre></td></tr></table></figure>

<p>要删除我们刚才创建的数组，语句如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] pvalue;        <span class="comment">// 删除 pvalue 所指向的数组</span></span><br></pre></td></tr></table></figure>

<p>下面是 new 操作符的通用语法，可以为多维数组分配内存，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ROW = <span class="number">2</span>;<span class="type">int</span> COL = <span class="number">3</span>;<span class="type">double</span> **pvalue  = <span class="keyword">new</span> <span class="type">double</span>* [ROW]; <span class="comment">// 为行分配内存// 为列分配内存for(int i = 0; i &lt; COL; i++) &#123;</span></span><br><span class="line">    pvalue[i] = <span class="keyword">new</span> <span class="type">double</span>[COL];&#125;</span><br></pre></td></tr></table></figure>

<p>释放多维数组内存：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; COL; i++) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] pvalue[i];&#125;<span class="keyword">delete</span> [] pvalue;</span><br></pre></td></tr></table></figure>

<h2 id="对象的动态内存分配"><a href="#对象的动态内存分配" class="headerlink" title="对象的动态内存分配"></a>对象的动态内存分配</h2><p>对象与简单的数据类型没有什么不同。例如，请看下面的代码，我们将使用一个对象数组来理清这一概念：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;class Box&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Box</span>() &#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;调用构造函数！&quot;</span> &lt;&lt;endl; </span><br><span class="line">      &#125;</span><br><span class="line">      ~<span class="built_in">Box</span>() &#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;调用析构函数！&quot;</span> &lt;&lt;endl; </span><br><span class="line">      &#125;&#125;;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   Box* myBoxArray = <span class="keyword">new</span> Box[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span> [] myBoxArray; <span class="comment">// Delete array</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>如果要为一个包含四个 Box 对象的数组分配内存，构造函数将被调用 4 次，同样地，当删除这些对象时，析构函数也将被调用相同的次数（4次）。</p>
<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">调用构造函数！调用构造函数！调用构造函数！调用构造函数！调用析构函数！调用析构函数！调用析构函数！调用析构函数！</span><br></pre></td></tr></table></figure>

<h1 id="C-命名空间"><a href="#C-命名空间" class="headerlink" title="C++ 命名空间"></a>C++ 命名空间</h1><p>假设这样一种情况，当一个班上有两个名叫 Zara 的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的家庭住址，或者他们父母的名字等等。</p>
<p>同样的情况也出现在 C++ 应用程序中。例如，您可能会写一个名为 xyz() 的函数，在另一个可用的库中也存在一个相同的函数 xyz()。这样，编译器就无法判断您所使用的是哪一个 xyz() 函数。</p>
<p>因此，引入了<strong>命名空间</strong>这个概念，专门用于解决上面的问题，它可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。</p>
<h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>命名空间的定义使用关键字 <strong>namespace</strong>，后跟命名空间的名称，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> namespace_name &#123;   <span class="comment">// 代码声明&#125;</span></span><br></pre></td></tr></table></figure>

<p>为了调用带有命名空间的函数或变量，需要在前面加上命名空间的名称，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">name::code;  <span class="comment">// code 可以是变量或函数</span></span><br></pre></td></tr></table></figure>

<p>让我们来看看命名空间如何为变量或函数等实体定义范围：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;<span class="comment">// 第一个命名空间namespace first_space&#123;</span></span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Inside first_space&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;&#125;<span class="comment">// 第二个命名空间namespace second_space&#123;</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Inside second_space&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;&#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 调用第一个命名空间中的函数</span></span><br><span class="line">   first_space::<span class="built_in">func</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 调用第二个命名空间中的函数</span></span><br><span class="line">   second_space::<span class="built_in">func</span>(); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Inside first_spaceInside second_space</span><br></pre></td></tr></table></figure>

<h2 id="using-指令"><a href="#using-指令" class="headerlink" title="using 指令"></a>using 指令</h2><p>您可以使用 <strong>using namespace</strong> 指令，这样在使用命名空间时就可以不用在前面加上命名空间的名称。这个指令会告诉编译器，后续的代码将使用指定的命名空间中的名称。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;<span class="comment">// 第一个命名空间namespace first_space&#123;</span></span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Inside first_space&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;&#125;<span class="comment">// 第二个命名空间namespace second_space&#123;</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Inside second_space&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> first_space;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 调用第一个命名空间中的函数</span></span><br><span class="line">   <span class="built_in">func</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Inside first_space</span><br></pre></td></tr></table></figure>

<p>using 指令也可以用来指定命名空间中的特定项目。例如，如果您只打算使用 std 命名空间中的 cout 部分，您可以使用如下的语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> std::cout;</span><br></pre></td></tr></table></figure>

<p>随后的代码中，在使用 cout 时就可以不用加上命名空间名称作为前缀，但是 <strong>std</strong> 命名空间中的其他项目仍然需要加上命名空间名称作为前缀，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using std::cout;int main ()&#123;   </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;std::endl is used with std!&quot;</span> &lt;&lt; std::endl;      </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::endl is used with std!</span><br></pre></td></tr></table></figure>

<p><strong>using</strong> 指令引入的名称遵循正常的范围规则。名称从使用 <strong>using</strong> 指令开始是可见的，直到该范围结束。此时，在范围以外定义的同名实体是隐藏的。</p>
<h2 id="不连续的命名空间"><a href="#不连续的命名空间" class="headerlink" title="不连续的命名空间"></a>不连续的命名空间</h2><p>命名空间可以定义在几个不同的部分中，因此命名空间是由几个单独定义的部分组成的。一个命名空间的各个组成部分可以分散在多个文件中。</p>
<p>所以，如果命名空间中的某个组成部分需要请求定义在另一个文件中的名称，则仍然需要声明该名称。下面的命名空间定义可以是定义一个新的命名空间，也可以是为已有的命名空间增加新的元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> namespace_name &#123;</span><br><span class="line">   <span class="comment">// 代码声明&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套的命名空间"><a href="#嵌套的命名空间" class="headerlink" title="嵌套的命名空间"></a>嵌套的命名空间</h2><p>命名空间可以嵌套，您可以在一个命名空间中定义另一个命名空间，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> namespace_name1 &#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">   <span class="keyword">namespace</span> namespace_name2 &#123;</span><br><span class="line">      <span class="comment">// 代码声明</span></span><br><span class="line">   &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>您可以通过使用 :: 运算符来访问嵌套的命名空间中的成员：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问 namespace_name2 中的成员using namespace namespace_name1::namespace_name2;// 访问 namespace:name1 中的成员using namespace namespace_name1;</span></span><br></pre></td></tr></table></figure>

<p>在上面的语句中，如果使用的是 namespace_name1，那么在该范围内 namespace_name2 中的元素也是可用的，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;<span class="comment">// 第一个命名空间namespace first_space&#123;</span></span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Inside first_space&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 第二个命名空间</span></span><br><span class="line">   <span class="keyword">namespace</span> second_space&#123;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Inside second_space&quot;</span> &lt;&lt; endl;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> first_space::second_space;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 调用第二个命名空间中的函数</span></span><br><span class="line">   <span class="built_in">func</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Inside second_space</span><br></pre></td></tr></table></figure>

<h1 id="C-模板"><a href="#C-模板" class="headerlink" title="C++ 模板"></a>C++ 模板</h1><p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。</p>
<p>模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，都是泛型编程的例子，它们都使用了模板的概念。</p>
<p>每个容器都有一个单一的定义，比如 <strong>向量</strong>，我们可以定义许多不同类型的向量，比如 <strong>vector <int></strong> 或 **vector <string>**。</p>
<p>您可以使用模板来定义函数和类，接下来让我们一起来看看如何使用。</p>
<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>模板函数定义的一般形式如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">type</span>&gt; ret-type func-<span class="built_in">name</span>(parameter list)&#123;   <span class="comment">// 函数的主体&#125;</span></span><br></pre></td></tr></table></figure>

<p>在这里，type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。</p>
<p>下面是函数模板的实例，返回两个数种的最大值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>using namespace std;template <span class="string">&lt;typename T&gt;</span>inline T const&amp; Max (T const&amp; a, T const&amp; b) &#123; </span></span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b:a; &#125; <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> i = <span class="number">39</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(i, j): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(i, j) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> f1 = <span class="number">13.5</span>; </span><br><span class="line">    <span class="type">double</span> f2 = <span class="number">20.7</span>; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(f1, f2): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(f1, f2) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    string s1 = <span class="string">&quot;Hello&quot;</span>; </span><br><span class="line">    string s2 = <span class="string">&quot;World&quot;</span>; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(s1, s2): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(s1, s2) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Max</span>(i, j): <span class="number">39</span>Max(f1, f2): <span class="number">20.7</span>Max(s1, s2): World</span><br></pre></td></tr></table></figure>

<h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">type</span>&gt; <span class="keyword">class</span> <span class="title class_">class</span>-name &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>type</strong> 是占位符类型名称，可以在类被实例化的时候进行指定。您可以使用一个逗号分隔的列表来定义多个泛型数据类型。</p>
<p>下面的实例定义了类 Stack&lt;&gt;，并实现了泛型方法来对元素进行入栈出栈操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span>using namespace std;template <span class="string">&lt;class T&gt;</span>class Stack &#123; </span></span><br><span class="line">  <span class="keyword">private</span>: </span><br><span class="line">    vector&lt;T&gt; elems;     <span class="comment">// 元素 </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T <span class="type">const</span>&amp;)</span></span>;  <span class="comment">// 入栈</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>;               <span class="comment">// 出栈</span></span><br><span class="line">    <span class="function">T <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>;            <span class="comment">// 返回栈顶元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>&#123;       <span class="comment">// 如果为空则返回真。</span></span><br><span class="line">        <span class="keyword">return</span> elems.<span class="built_in">empty</span>(); </span><br><span class="line">    &#125; &#125;; <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">void</span> Stack&lt;T&gt;::<span class="built_in">push</span> (T <span class="type">const</span>&amp; elem) &#123; </span><br><span class="line">    <span class="comment">// 追加传入元素的副本</span></span><br><span class="line">    elems.<span class="built_in">push_back</span>(elem);    &#125; <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">void</span> Stack&lt;T&gt;::<span class="built_in">pop</span> () &#123; </span><br><span class="line">    <span class="keyword">if</span> (elems.<span class="built_in">empty</span>()) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">out_of_range</span>(<span class="string">&quot;Stack&lt;&gt;::pop(): empty stack&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 删除最后一个元素</span></span><br><span class="line">    elems.<span class="built_in">pop_back</span>();         &#125; <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T Stack&lt;T&gt;::<span class="built_in">top</span> () <span class="type">const</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (elems.<span class="built_in">empty</span>()) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">out_of_range</span>(<span class="string">&quot;Stack&lt;&gt;::top(): empty stack&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 返回最后一个元素的副本 </span></span><br><span class="line">    <span class="keyword">return</span> elems.<span class="built_in">back</span>();      &#125; <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        Stack&lt;<span class="type">int</span>&gt;         intStack;  <span class="comment">// int 类型的栈 </span></span><br><span class="line">        Stack&lt;string&gt; stringStack;    <span class="comment">// string 类型的栈 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作 int 类型的栈 </span></span><br><span class="line">        intStack.<span class="built_in">push</span>(<span class="number">7</span>); </span><br><span class="line">        cout &lt;&lt; intStack.<span class="built_in">top</span>() &lt;&lt;endl; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作 string 类型的栈 </span></span><br><span class="line">        stringStack.<span class="built_in">push</span>(<span class="string">&quot;hello&quot;</span>); </span><br><span class="line">        cout &lt;&lt; stringStack.<span class="built_in">top</span>() &lt;&lt; std::endl; </span><br><span class="line">        stringStack.<span class="built_in">pop</span>(); </span><br><span class="line">        stringStack.<span class="built_in">pop</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">catch</span> (exception <span class="type">const</span>&amp; ex) &#123; </span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Exception: &quot;</span> &lt;&lt; ex.<span class="built_in">what</span>() &lt;&lt;endl; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span>helloException: Stack&lt;&gt;::<span class="built_in">pop</span>(): empty stack</span><br></pre></td></tr></table></figure>

<h1 id="C-预处理器"><a href="#C-预处理器" class="headerlink" title="C++ 预处理器"></a>C++ 预处理器</h1><p>预处理器是一些指令，指示编译器在实际编译之前所需完成的预处理。</p>
<p>所有的预处理器指令都是以井号（#）开头，只有空格字符可以出现在预处理指令之前。预处理指令不是 C++ 语句，所以它们不会以分号（;）结尾。</p>
<p>我们已经看到，之前所有的实例中都有 <strong>#include</strong> 指令。这个宏用于把头文件包含到源文件中。</p>
<p>C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等，让我们一起看看这些重要指令。</p>
<h2 id="define-预处理"><a href="#define-预处理" class="headerlink" title="#define 预处理"></a>#define 预处理</h2><p>#define 预处理指令用于创建符号常量。该符号常量通常称为<strong>宏</strong>，指令的一般形式是：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> macro-name replacement-text</span></span><br></pre></td></tr></table></figure>

<p>当这一行代码出现在一个文件中时，在该文件中后续出现的所有宏都将会在程序编译之前被替换为 replacement-text。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;#<span class="keyword">define</span> PI 3.14159int main ()&#123;     cout &lt;&lt; <span class="string">&quot;Value of PI :&quot;</span> &lt;&lt; PI &lt;&lt; endl;     return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>现在，让我们测试这段代码，看看预处理的结果。假设源代码文件已经存在，接下来使用 -E 选项进行编译，并把结果重定向到 test.p。现在，如果您查看 test.p 文件，将会看到它已经包含大量的信息，而且在文件底部的值被改为如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$gcc -E test.cpp &gt; test.p...<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;     cout &lt;&lt; <span class="string">&quot;Value of PI :&quot;</span> &lt;&lt; <span class="number">3.14159</span> &lt;&lt; endl;     <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数宏"><a href="#函数宏" class="headerlink" title="函数宏"></a>函数宏</h2><p>您可以使用 #define 来定义一个带有参数的宏，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;#<span class="keyword">define</span> MIN(a,b) (a&lt;b ? a : b)int main ()&#123;</span></span><br><span class="line">   <span class="type">int</span> i, j;</span><br><span class="line">   i = <span class="number">100</span>;</span><br><span class="line">   j = <span class="number">30</span>;</span><br><span class="line">   cout &lt;&lt;<span class="string">&quot;较小的值为：&quot;</span> &lt;&lt; <span class="built_in">MIN</span>(i, j) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">较小的值为：<span class="number">30</span></span><br></pre></td></tr></table></figure>

<h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>有几个指令可以用来有选择地对部分程序源代码进行编译。这个过程被称为条件编译。</p>
<p>条件预处理器的结构与 if 选择结构很像。请看下面这段预处理器的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NULL   #<span class="keyword">define</span> NULL 0#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>您可以只在调试时进行编译，调试开关可以使用一个宏来实现，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG   cerr &lt;&lt;<span class="string">&quot;Variable x = &quot;</span> &lt;&lt; x &lt;&lt; endl;#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>如果在指令 #ifdef DEBUG 之前已经定义了符号常量 DEBUG，则会对程序中的 <strong>cerr</strong> 语句进行编译。您可以使用 #if 0 语句注释掉程序的一部分，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 0   不进行编译的代码#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>让我们尝试下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;#<span class="keyword">define</span> DEBUG#<span class="keyword">define</span> MIN(a,b) (((a)&lt;(b)) ? a : b)int main ()&#123;</span></span><br><span class="line">   <span class="type">int</span> i, j;</span><br><span class="line">   i = <span class="number">100</span>;</span><br><span class="line">   j = <span class="number">30</span>;<span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">   cerr &lt;&lt;<span class="string">&quot;Trace: Inside main function&quot;</span> &lt;&lt; endl;<span class="meta">#<span class="keyword">endif</span>#<span class="keyword">if</span> 0</span></span><br><span class="line">   <span class="comment">/* 这是注释部分 */</span></span><br><span class="line">   cout &lt;&lt; <span class="built_in">MKSTR</span>(HELLO C++) &lt;&lt; endl;<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   cout &lt;&lt;<span class="string">&quot;The minimum is &quot;</span> &lt;&lt; <span class="built_in">MIN</span>(i, j) &lt;&lt; endl;<span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">   cerr &lt;&lt;<span class="string">&quot;Trace: Coming out of main function&quot;</span> &lt;&lt; endl;<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Trace: Inside main functionThe minimum is <span class="number">30</span>Trace: Coming out of main function</span><br></pre></td></tr></table></figure>

<h2 id="和-运算符"><a href="#和-运算符" class="headerlink" title="# 和 ## 运算符"></a># 和 ## 运算符</h2><p># 和 ## 预处理运算符在 C++ 和 ANSI&#x2F;ISO C 中都是可用的。# 运算符会把 replacement-text 令牌转换为用引号引起来的字符串。</p>
<p>请看下面的宏定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;#<span class="keyword">define</span> MKSTR( x ) #xint main ()&#123;    cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;    return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HELLO C++</span><br></pre></td></tr></table></figure>

<p>让我们来看看它是如何工作的。不难理解，C++ 预处理器把下面这行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">MKSTR</span>(HELLO C++) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>转换成了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;HELLO C++&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>## 运算符用于连接两个令牌。下面是一个实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CONCAT( x, y )  x ## y</span></span><br></pre></td></tr></table></figure>

<p>当 CONCAT 出现在程序中时，它的参数会被连接起来，并用来取代宏。例如，程序中 CONCAT(HELLO, C++) 会被替换为 “HELLO C++”，如下面实例所示。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;#<span class="keyword">define</span> concat(a, b) a ## bint main()&#123;   int xy = 100;      cout &lt;&lt; concat(x, y);   return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>让我们来看看它是如何工作的。不难理解，C++ 预处理器把下面这行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">concat</span>(x, y);</span><br></pre></td></tr></table></figure>

<p>转换成了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; xy;</span><br></pre></td></tr></table></figure>

<h2 id="C-中的预定义宏"><a href="#C-中的预定义宏" class="headerlink" title="C++ 中的预定义宏"></a>C++ 中的预定义宏</h2><p>C++ 提供了下表所示的一些预定义宏：</p>
<table>
<thead>
<tr>
<th align="left">宏</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>LINE</strong></td>
<td align="left">这会在程序编译时包含当前行号。</td>
</tr>
<tr>
<td align="left"><strong>FILE</strong></td>
<td align="left">这会在程序编译时包含当前文件名。</td>
</tr>
<tr>
<td align="left"><strong>DATE</strong></td>
<td align="left">这会包含一个形式为 month&#x2F;day&#x2F;year 的字符串，它表示把源文件转换为目标代码的日期。</td>
</tr>
<tr>
<td align="left"><strong>TIME</strong></td>
<td align="left">这会包含一个形式为 hour:minute:second 的字符串，它表示程序被编译的时间。</td>
</tr>
</tbody></table>
<p>让我们看看上述这些宏的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main ()&#123;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of __LINE__ : &quot;</span> &lt;&lt; __LINE__ &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of __FILE__ : &quot;</span> &lt;&lt; __FILE__ &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of __DATE__ : &quot;</span> &lt;&lt; __DATE__ &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of __TIME__ : &quot;</span> &lt;&lt; __TIME__ &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Value of __LINE__ : <span class="number">6</span>Value of __FILE__ : test.cppValue of __DATE__ : Feb <span class="number">28</span> <span class="number">2011</span>Value of __TIME__ : <span class="number">18</span>:<span class="number">52</span>:<span class="number">48</span></span><br></pre></td></tr></table></figure>

<h1 id="C-信号处理"><a href="#C-信号处理" class="headerlink" title="C++ 信号处理"></a>C++ 信号处理</h1><p>信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。</p>
<p>有些信号不能被程序捕获，但是下表所列信号可以在程序中捕获，并可以基于信号采取适当的动作。这些信号是定义在 C++ 头文件 <csignal> 中。</p>
<table>
<thead>
<tr>
<th align="left">信号</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SIGABRT</td>
<td align="left">程序的异常终止，如调用 <strong>abort</strong>。</td>
</tr>
<tr>
<td align="left">SIGFPE</td>
<td align="left">错误的算术运算，比如除以零或导致溢出的操作。</td>
</tr>
<tr>
<td align="left">SIGILL</td>
<td align="left">检测非法指令。</td>
</tr>
<tr>
<td align="left">SIGINT</td>
<td align="left">接收到交互注意信号。</td>
</tr>
<tr>
<td align="left">SIGSEGV</td>
<td align="left">非法访问内存。</td>
</tr>
<tr>
<td align="left">SIGTERM</td>
<td align="left">发送到程序的终止请求。</td>
</tr>
</tbody></table>
<h2 id="signal-函数"><a href="#signal-函数" class="headerlink" title="signal() 函数"></a>signal() 函数</h2><p>C++ 信号处理库提供了 <strong>signal</strong> 函数，用来捕获突发事件。以下是 signal() 函数的语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> (*<span class="built_in">signal</span> (<span class="type">int</span> sig, <span class="built_in">void</span> (*func)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p>这个函数接收两个参数：第一个参数是一个整数，代表了信号的编号；第二个参数是一个指向信号处理函数的指针。</p>
<p>让我们编写一个简单的 C++ 程序，使用 signal() 函数捕获 SIGINT 信号。不管您想在程序中捕获什么信号，您都必须使用 <strong>signal</strong> 函数来注册信号，并将其与信号处理程序相关联。看看下面的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span>using namespace std;void signalHandler( int signum )&#123;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Interrupt signal (&quot;</span> &lt;&lt; signum &lt;&lt; <span class="string">&quot;) received.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理并关闭</span></span><br><span class="line">    <span class="comment">// 终止程序  </span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">exit</span>(signum);  &#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注册信号 SIGINT 和信号处理程序</span></span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, signalHandler);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;Going to sleep....&quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Going to sleep....Going to sleep....Going to sleep....</span><br></pre></td></tr></table></figure>

<p>现在，按 Ctrl+C 来中断程序，您会看到程序捕获信号，程序打印如下内容并退出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Going to sleep....Going to sleep....Going to sleep....<span class="function">Interrupt <span class="title">signal</span> <span class="params">(<span class="number">2</span>)</span> received.</span></span><br></pre></td></tr></table></figure>

<h2 id="raise-函数"><a href="#raise-函数" class="headerlink" title="raise() 函数"></a>raise() 函数</h2><p>您可以使用函数 <strong>raise()</strong> 生成信号，该函数带有一个整数信号编号作为参数，语法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">raise</span> <span class="params">(signal sig)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在这里，<strong>sig</strong> 是要发送的信号的编号，这些信号包括：SIGINT、SIGABRT、SIGFPE、SIGILL、SIGSEGV、SIGTERM、SIGHUP。以下是我们使用 raise() 函数内部生成信号的实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span>using namespace std;void signalHandler( int signum )&#123;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Interrupt signal (&quot;</span> &lt;&lt; signum &lt;&lt; <span class="string">&quot;) received.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理并关闭</span></span><br><span class="line">    <span class="comment">// 终止程序 </span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">exit</span>(signum);  &#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 注册信号 SIGINT 和信号处理程序</span></span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, signalHandler);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(++i)&#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;Going to sleep....&quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">if</span>( i == <span class="number">3</span> )&#123;</span><br><span class="line">          <span class="built_in">raise</span>( SIGINT);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果，并会自动退出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Going to sleep....Going to sleep....Going to sleep....<span class="function">Interrupt <span class="title">signal</span> <span class="params">(<span class="number">2</span>)</span> received.</span></span><br></pre></td></tr></table></figure>

<h1 id="C-多线程"><a href="#C-多线程" class="headerlink" title="C++ 多线程"></a>C++ 多线程</h1><p>多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。一般情况下，两种类型的多任务处理：<strong>基于进程和基于线程</strong>。</p>
<ul>
<li>基于进程的多任务处理是程序的并发执行。</li>
<li>基于线程的多任务处理是同一程序的片段的并发执行。</li>
</ul>
<p>多线程程序包含可以同时运行的两个或多个部分。这样的程序中的每个部分称为一个线程，每个线程定义了一个单独的执行路径。</p>
<p>本教程假设您使用的是 Linux 操作系统，我们要使用 POSIX 编写多线程 C++ 程序。POSIX Threads 或 Pthreads 提供的 API 可在多种类 Unix POSIX 系统上可用，比如 FreeBSD、NetBSD、GNU&#x2F;Linux、Mac OS X 和 Solaris。</p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>下面的程序，我们可以用它来创建一个 POSIX 线程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span>pthread_create (thread, attr, start_routine, arg)</span></span><br></pre></td></tr></table></figure>

<p>在这里，<strong>pthread_create</strong> 创建一个新的线程，并让它可执行。下面是关于参数的说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">thread</td>
<td align="left">指向线程标识符指针。</td>
</tr>
<tr>
<td align="left">attr</td>
<td align="left">一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。</td>
</tr>
<tr>
<td align="left">start_routine</td>
<td align="left">线程运行函数起始地址，一旦线程被创建就会执行。</td>
</tr>
<tr>
<td align="left">arg</td>
<td align="left">运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。</td>
</tr>
</tbody></table>
<p>创建线程成功时，函数返回 0，若返回值不为 0 则说明创建线程失败。</p>
<h2 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h2><p>使用下面的程序，我们可以用它来终止一个 POSIX 线程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span>pthread_exit (status)</span></span><br></pre></td></tr></table></figure>

<p>在这里，<strong>pthread_exit</strong> 用于显式地退出一个线程。通常情况下，pthread_exit() 函数是在线程完成工作后无需继续存在时被调用。</p>
<p>如果 main() 是在它所创建的线程之前结束，并通过 pthread_exit() 退出，那么其他线程将继续执行。否则，它们将在 main() 结束时自动被终止。</p>
<h2 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h2><p>以下简单的实例代码使用 pthread_create() 函数创建了 5 个线程，每个线程输出”Hello Runoob！”:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 必须的头文件是#include &lt;pthread.h&gt;using namespace std;#define NUM_THREADS 5// 线程的运行函数void* say_hello(void* args)&#123;</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello Runoob！&quot;</span> &lt;&lt; endl;&#125;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义线程的 id 变量，多个变量使用数组</span></span><br><span class="line">    <span class="type">pthread_t</span> tids[NUM_THREADS];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_THREADS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//参数依次是：创建的线程id，线程参数，调用的函数，传入的函数参数</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;tids[i], <span class="literal">NULL</span>, say_hello, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           cout &lt;&lt; <span class="string">&quot;pthread_create error: error_code=&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等各个线程退出后，进程才结束，否则进程强制结束了，线程可能还没反应过来；</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>使用 -lpthread 库编译下面的程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ test.cpp -lpthread -o test.o</span><br></pre></td></tr></table></figure>

<p>现在，执行程序，将产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ ./test.oHello Runoob！Hello Runoob！Hello Runoob！Hello Runoob！Hello Runoob！</span><br></pre></td></tr></table></figure>

<p>以下简单的实例代码使用 pthread_create() 函数创建了 5 个线程，并接收传入的参数。每个线程打印一个 “Hello Runoob!” 消息，并输出接收的参数，然后调用 pthread_exit() 终止线程。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件名：test.cpp#include &lt;iostream&gt;#include &lt;cstdlib&gt;#include &lt;pthread.h&gt;using namespace std;#define NUM_THREADS     5void *PrintHello(void *threadid)&#123;  </span></span><br><span class="line">   <span class="comment">// 对传入的参数进行强制类型转换，由无类型指针变为整形数指针，然后再读取</span></span><br><span class="line">   <span class="type">int</span> tid = *((<span class="type">int</span>*)threadid);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Hello Runoob! 线程 ID, &quot;</span> &lt;&lt; tid &lt;&lt; endl;</span><br><span class="line">   <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);&#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">pthread_t</span> threads[NUM_THREADS];</span><br><span class="line">   <span class="type">int</span> indexes[NUM_THREADS];<span class="comment">// 用数组来保存i的值</span></span><br><span class="line">   <span class="type">int</span> rc;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; NUM_THREADS; i++ )&#123;      </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;main() : 创建线程, &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">      indexes[i] = i; <span class="comment">//先保存i的值</span></span><br><span class="line">      <span class="comment">// 传入的时候必须强制转换为void* 类型，即无类型指针        </span></span><br><span class="line">      rc = <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>, </span><br><span class="line">                          PrintHello, (<span class="type">void</span> *)&amp;(indexes[i]));</span><br><span class="line">      <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Error:无法创建线程,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>现在编译并执行程序，将产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ test.cpp -lpthread -o test.o$ ./test.<span class="built_in">omain</span>() : 创建线程, <span class="number">0</span>main() : 创建线程, <span class="number">1</span>main() : 创建线程, <span class="number">2</span>main() : 创建线程, <span class="number">3</span>main() : 创建线程, <span class="number">4</span>Hello Runoob! 线程 ID, <span class="number">4</span>Hello Runoob! 线程 ID, <span class="number">3</span>Hello Runoob! 线程 ID, <span class="number">2</span>Hello Runoob! 线程 ID, <span class="number">1</span>Hello Runoob! 线程 ID, <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="向线程传递参数"><a href="#向线程传递参数" class="headerlink" title="向线程传递参数"></a>向线程传递参数</h2><p>这个实例演示了如何通过结构传递多个参数。您可以在线程回调中传递任意的数据类型，因为它指向 void，如下面的实例所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span>using namespace std;#<span class="keyword">define</span> NUM_THREADS     5struct thread_data&#123;   int  thread_id;   char *message;&#125;;void *PrintHello(void *threadarg)&#123;   struct thread_data *my_data;   my_data = (struct thread_data *) threadarg;   cout <span class="string">&lt;&lt; &quot;Thread ID : &quot; &lt;&lt; my_data-&gt;</span>thread_id ;   cout <span class="string">&lt;&lt; &quot; Message : &quot; &lt;&lt; my_data-&gt;</span>message &lt;&lt; endl;   pthread_exit(NULL);&#125;int main ()&#123;   pthread_t threads[NUM_THREADS];   struct thread_data td[NUM_THREADS];   int rc;   int i;   for( i=0; i &lt; NUM_THREADS; i++ )&#123;      cout &lt;&lt;<span class="string">&quot;main() : creating thread, &quot;</span> &lt;&lt; i &lt;&lt; endl;      td[i].thread_id = i;      td[i].message = <span class="string">&quot;This is message&quot;</span>;      rc = pthread_create(&amp;threads[i], NULL,                          PrintHello, (void *)&amp;td[i]);      <span class="keyword">if</span> (rc)&#123;         cout &lt;&lt; <span class="string">&quot;Error:unable to create thread,&quot;</span> &lt;&lt; rc &lt;&lt; endl;         exit(-1);      &#125;   &#125;   pthread_exit(NULL);&#125;</span></span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ g++ test.cpp -lpthread -o test.o</span><br><span class="line">$ ./test.<span class="function">o</span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span> : 创建线程, <span class="number">0</span>main() : 创建线程, <span class="number">1</span>main() : 创建线程, <span class="number">2</span>main() : 创建线程, <span class="number">3</span>main() : 创建线程, <span class="number">4</span>Hello Runoob! 线程 ID, <span class="number">4</span>Hello Runoob! 线程 ID, <span class="number">3</span>Hello Runoob! 线程 ID, <span class="number">2</span>Hello Runoob! 线程 ID, <span class="number">1</span>Hello Runoob! 线程 ID, <span class="number">0</span></span></span><br></pre></td></tr></table></figure>

<h2 id="连接和分离线程"><a href="#连接和分离线程" class="headerlink" title="连接和分离线程"></a>连接和分离线程</h2><p>我们可以使用以下两个函数来连接或分离线程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pthread_join</span> (threadid, status) <span class="built_in">pthread_detach</span> (threadid)</span><br></pre></td></tr></table></figure>

<p>pthread_join() 子程序阻碍调用程序，直到指定的 threadid 线程终止为止。当创建一个线程时，它的某个属性会定义它是否是可连接的（joinable）或可分离的（detached）。只有创建时定义为可连接的线程才可以被连接。如果线程创建时被定义为可分离的，则它永远也不能被连接。</p>
<p>这个实例演示了如何使用 pthread_join() 函数来等待线程的完成。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>using namespace std;#<span class="keyword">define</span> NUM_THREADS     5void *wait(void *t)&#123;</span></span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="type">long</span> tid;</span><br><span class="line"></span><br><span class="line">   tid = (<span class="type">long</span>)t;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Sleeping in thread &quot;</span> &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Thread with id : &quot;</span> &lt;&lt; tid &lt;&lt; <span class="string">&quot;  ...exiting &quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);&#125;<span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> rc;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="type">pthread_t</span> threads[NUM_THREADS];</span><br><span class="line">   <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">   <span class="type">void</span> *status;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化并设置线程为可连接的（joinable）</span></span><br><span class="line">   <span class="built_in">pthread_attr_init</span>(&amp;attr);</span><br><span class="line">   <span class="built_in">pthread_attr_setdetachstate</span>(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; NUM_THREADS; i++ )&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;main() : creating thread, &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">      rc = <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>, wait, (<span class="type">void</span> *)&amp;i );</span><br><span class="line">      <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Error:unable to create thread,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 删除属性，并等待其他线程</span></span><br><span class="line">   <span class="built_in">pthread_attr_destroy</span>(&amp;attr);</span><br><span class="line">   <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; NUM_THREADS; i++ )&#123;</span><br><span class="line">      rc = <span class="built_in">pthread_join</span>(threads[i], &amp;status);</span><br><span class="line">      <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Error:unable to join,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Main: completed thread id :&quot;</span> &lt;&lt; i ;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;  exiting with status :&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Main: program exiting.&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">main</span>() : creating thread, <span class="number">0</span>main() : creating thread, <span class="number">1</span>main() : creating thread, <span class="number">2</span>main() : creating thread, <span class="number">3</span>main() : creating thread, <span class="number">4</span>Sleeping in thread </span><br><span class="line">Thread with id : <span class="number">4</span>  ...exiting </span><br><span class="line">Sleeping in thread </span><br><span class="line">Thread with id : <span class="number">3</span>  ...exiting </span><br><span class="line">Sleeping in thread </span><br><span class="line">Thread with id : <span class="number">2</span>  ...exiting </span><br><span class="line">Sleeping in thread </span><br><span class="line">Thread with id : <span class="number">1</span>  ...exiting </span><br><span class="line">Sleeping in thread </span><br><span class="line">Thread with id : <span class="number">0</span>  ...exiting </span><br><span class="line">Main: completed thread id :<span class="number">0</span>  exiting with status :<span class="number">0</span>Main: completed thread id :<span class="number">1</span>  exiting with status :<span class="number">0</span>Main: completed thread id :<span class="number">2</span>  exiting with status :<span class="number">0</span>Main: completed thread id :<span class="number">3</span>  exiting with status :<span class="number">0</span>Main: completed thread id :<span class="number">4</span>  exiting with status :<span class="number">0</span>Main: program exiting.</span><br></pre></td></tr></table></figure>

<h1 id="C-Web-编程"><a href="#C-Web-编程" class="headerlink" title="C++ Web 编程"></a>C++ Web 编程</h1><h2 id="什么是-CGI？"><a href="#什么是-CGI？" class="headerlink" title="什么是 CGI？"></a>什么是 CGI？</h2><ul>
<li>公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。</li>
<li>CGI 规范目前是由 NCSA 维护的，NCSA 定义 CGI 如下：</li>
<li>公共网关接口（CGI），是一种用于外部网关程序与信息服务器（如 HTTP 服务器）对接的接口标准。</li>
<li>目前的版本是 CGI&#x2F;1.1，CGI&#x2F;1.2 版本正在推进中。</li>
</ul>
<h2 id="Web-浏览"><a href="#Web-浏览" class="headerlink" title="Web 浏览"></a>Web 浏览</h2><p>为了更好地了解 CGI 的概念，让我们点击一个超链接，浏览一个特定的网页或 URL，看看会发生什么。</p>
<ul>
<li>您的浏览器联系上 HTTP Web 服务器，并请求 URL，即文件名。</li>
<li>Web 服务器将解析 URL，并查找文件名。如果找到请求的文件，Web 服务器会把文件发送回浏览器，否则发送一条错误消息，表明您请求了一个错误的文件。</li>
<li>Web 浏览器从 Web 服务器获取响应，并根据接收到的响应来显示文件或错误消息。</li>
</ul>
<p>然而，以这种方式搭建起来的 HTTP 服务器，不管何时请求目录中的某个文件，HTTP 服务器发送回来的不是该文件，而是以程序形式执行，并把执行产生的输出发送回浏览器显示出来。</p>
<p>公共网关接口（CGI），是使得应用程序（称为 CGI 程序或 CGI 脚本）能够与 Web 服务器以及客户端进行交互的标准协议。这些 CGI 程序可以用 Python、PERL、Shell、C 或 C++ 等进行编写。</p>
<h2 id="CGI-架构图"><a href="#CGI-架构图" class="headerlink" title="CGI 架构图"></a>CGI 架构图</h2><p>下图演示了 CGI 的架构：</p>
<p><img src="https://edu.aliyun.com/files/course/2017/09-24/1655506773c2493212.gif" alt="img"></p>
<h2 id="Web-服务器配置"><a href="#Web-服务器配置" class="headerlink" title="Web 服务器配置"></a>Web 服务器配置</h2><p>在您进行 CGI 编程之前，请确保您的 Web 服务器支持 CGI，并已配置成可以处理 CGI 程序。所有由 HTTP 服务器执行的 CGI 程序，都必须在预配置的目录中。该目录称为 CGI 目录，按照惯例命名为 &#x2F;var&#x2F;www&#x2F;cgi-bin。虽然 CGI 文件是 C++ 可执行文件，但是按照惯例它的扩展名是 <strong>.cgi</strong>。</p>
<p>默认情况下，Apache Web 服务器会配置在 &#x2F;var&#x2F;www&#x2F;cgi-bin 中运行 CGI 程序。如果您想指定其他目录来运行 CGI 脚本，您可以在 httpd.conf 文件中修改以下部分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/var/www/cgi-bin&quot;</span>&gt;   AllowOverride None   Options ExecCGI   Order allow,deny   Allow from all&lt;/Directory&gt; &lt;Directory <span class="string">&quot;/var/www/cgi-bin&quot;</span>&gt;Options All&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>在这里，我们假设已经配置好 Web 服务器并能成功运行，你可以运行任意的 CGI 程序，比如 Perl 或 Shell 等。</p>
<h2 id="第一个-CGI-程序"><a href="#第一个-CGI-程序" class="headerlink" title="第一个 CGI 程序"></a>第一个 CGI 程序</h2><p>请看下面的 C++ 程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;Hello World - 第一个 CGI 程序&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;h2&gt;Hello World! 这是我的第一个 CGI 程序&lt;/h2&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>编译上面的代码，把可执行文件命名为 cplusplus.cgi，并把这个文件保存在 &#x2F;var&#x2F;www&#x2F;cgi-bin 目录中。在运行 CGI 程序之前，请使用 <strong>chmod 755 cplusplus.cgi</strong> UNIX 命令来修改文件模式，确保文件可执行。访问可执行文件，您会看到下面的输出：</p>
<h2 id="Hello-World-这是我的第一个-CGI-程序"><a href="#Hello-World-这是我的第一个-CGI-程序" class="headerlink" title="Hello World! 这是我的第一个 CGI 程序"></a>Hello World! 这是我的第一个 CGI 程序</h2><p>上面的 C++ 程序是一个简单的程序，把它的输出写在 STDOUT 文件上，即显示在屏幕上。在这里，值得注意一点，第一行输出 <strong>Content-type:text&#x2F;html\r\n\r\n</strong>。这一行发送回浏览器，并指定要显示在浏览器窗口上的内容类型。您必须理解 CGI 的基本概念，这样才能进一步使用 Python 编写更多复杂的 CGI 程序。C++ CGI 程序可以与任何其他外部的系统（如 RDBMS）进行交互。</p>
<h2 id="HTTP-头信息"><a href="#HTTP-头信息" class="headerlink" title="HTTP 头信息"></a>HTTP 头信息</h2><p>行 <strong>Content-type:text&#x2F;html\r\n\r\n</strong> 是 HTTP 头信息的组成部分，它被发送到浏览器，以便更好地理解页面内容。HTTP 头信息的形式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HTTP 字段名称: 字段内容 例如Content-type: text/html\r\n\r\n</span><br></pre></td></tr></table></figure>

<p>还有一些其他的重要的 HTTP 头信息，这些在您的 CGI 编程中都会经常被用到。</p>
<table>
<thead>
<tr>
<th align="left">头信息</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Content-type:</td>
<td align="left">MIME 字符串，定义返回的文件格式。例如 Content-type:text&#x2F;html。</td>
</tr>
<tr>
<td align="left">Expires: Date</td>
<td align="left">信息变成无效的日期。浏览器使用它来判断一个页面何时需要刷新。一个有效的日期字符串的格式应为 01 Jan 1998 12:00:00 GMT。</td>
</tr>
<tr>
<td align="left">Location: URL</td>
<td align="left">这个 URL 是指应该返回的 URL，而不是请求的 URL。你可以使用它来重定向一个请求到任意的文件。</td>
</tr>
<tr>
<td align="left">Last-modified: Date</td>
<td align="left">资源的最后修改日期。</td>
</tr>
<tr>
<td align="left">Content-length: N</td>
<td align="left">要返回的数据的长度，以字节为单位。浏览器使用这个值来表示一个文件的预计下载时间。</td>
</tr>
<tr>
<td align="left">Set-Cookie: String</td>
<td align="left">通过 <em>string</em> 设置 cookie。</td>
</tr>
</tbody></table>
<h2 id="CGI-环境变量"><a href="#CGI-环境变量" class="headerlink" title="CGI 环境变量"></a>CGI 环境变量</h2><p>所有的 CGI 程序都可以访问下列的环境变量。这些变量在编写 CGI 程序时扮演了非常重要的角色。</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONTENT_TYPE</td>
<td align="left">内容的数据类型。当客户端向服务器发送附加内容时使用。例如，文件上传等功能。</td>
</tr>
<tr>
<td align="left">CONTENT_LENGTH</td>
<td align="left">查询的信息长度。只对 POST 请求可用。</td>
</tr>
<tr>
<td align="left">HTTP_COOKIE</td>
<td align="left">以键 &amp; 值对的形式返回设置的 cookies。</td>
</tr>
<tr>
<td align="left">HTTP_USER_AGENT</td>
<td align="left">用户代理请求标头字段，递交用户发起请求的有关信息，包含了浏览器的名称、版本和其他平台性的附加信息。</td>
</tr>
<tr>
<td align="left">PATH_INFO</td>
<td align="left">CGI 脚本的路径。</td>
</tr>
<tr>
<td align="left">QUERY_STRING</td>
<td align="left">通过 GET 方法发送请求时的 URL 编码信息，包含 URL 中问号后面的参数。</td>
</tr>
<tr>
<td align="left">REMOTE_ADDR</td>
<td align="left">发出请求的远程主机的 IP 地址。这在日志记录和认证时是非常有用的。</td>
</tr>
<tr>
<td align="left">REMOTE_HOST</td>
<td align="left">发出请求的主机的完全限定名称。如果此信息不可用，则可以用 REMOTE_ADDR 来获取 IP 地址。</td>
</tr>
<tr>
<td align="left">REQUEST_METHOD</td>
<td align="left">用于发出请求的方法。最常见的方法是 GET 和 POST。</td>
</tr>
<tr>
<td align="left">SCRIPT_FILENAME</td>
<td align="left">CGI 脚本的完整路径。</td>
</tr>
<tr>
<td align="left">SCRIPT_NAME</td>
<td align="left">CGI 脚本的名称。</td>
</tr>
<tr>
<td align="left">SERVER_NAME</td>
<td align="left">服务器的主机名或 IP 地址。</td>
</tr>
<tr>
<td align="left">SERVER_SOFTWARE</td>
<td align="left">服务器上运行的软件的名称和版本。</td>
</tr>
</tbody></table>
<p>下面的 CGI 程序列出了所有的 CGI 变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>using namespace std;const string ENV[ 24 ] = &#123;                 </span></span><br><span class="line">        <span class="string">&quot;COMSPEC&quot;</span>, <span class="string">&quot;DOCUMENT_ROOT&quot;</span>, <span class="string">&quot;GATEWAY_INTERFACE&quot;</span>,   </span><br><span class="line">        <span class="string">&quot;HTTP_ACCEPT&quot;</span>, <span class="string">&quot;HTTP_ACCEPT_ENCODING&quot;</span>,    &amp;nbsnbsp;        </span><br><span class="line">        <span class="string">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span>, <span class="string">&quot;HTTP_CONNECTION&quot;</span>,         </span><br><span class="line">        <span class="string">&quot;HTTP_HOST&quot;</span>, <span class="string">&quot;HTTP_USER_AGENT&quot;</span>, <span class="string">&quot;PATH&quot;</span>,            </span><br><span class="line">        <span class="string">&quot;QUERY_STRING&quot;</span>, <span class="string">&quot;REMOTE_ADDR&quot;</span>, <span class="string">&quot;REMOTE_PORT&quot;</span>,      </span><br><span class="line">        <span class="string">&quot;REQUEST_METHOD&quot;</span>, <span class="string">&quot;REQUEST_URI&quot;</span>, <span class="string">&quot;SCRIPT_FILENAME&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SCRIPT_NAME&quot;</span>, <span class="string">&quot;SERVER_ADDR&quot;</span>, <span class="string">&quot;SERVER_ADMIN&quot;</span>,      </span><br><span class="line">        <span class="string">&quot;SERVER_NAME&quot;</span>,<span class="string">&quot;SERVER_PORT&quot;</span>,<span class="string">&quot;SERVER_PROTOCOL&quot;</span>,     </span><br><span class="line">        <span class="string">&quot;SERVER_SIGNATURE&quot;</span>,<span class="string">&quot;SERVER_SOFTWARE&quot;</span> &#125;;   <span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;CGI 环境变量&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;table border = \&quot;0\&quot; cellspacing = \&quot;2\&quot;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> &lt;&lt; ENV[ i ] &lt;&lt; <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;</span><br><span class="line">       <span class="comment">// 尝试检索环境变量的值</span></span><br><span class="line">       <span class="type">char</span> *value = <span class="built_in">getenv</span>( ENV[ i ].<span class="built_in">c_str</span>() );  </span><br><span class="line">       <span class="keyword">if</span> ( value != <span class="number">0</span> )&#123;</span><br><span class="line">         cout &lt;&lt; value;                                 </span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;环境变量不存在。&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/table&gt;&lt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-CGI-库"><a href="#C-CGI-库" class="headerlink" title="C++ CGI 库"></a>C++ CGI 库</h2><p>在真实的实例中，您需要通过 CGI 程序执行许多操作。这里有一个专为 C++ 程序而编写的 CGI 库，我们可以从 <a href="ftp://ftp.gnu.org/gnu/cgicc/">ftp://ftp.gnu.org/gnu/cgicc/</a> 上下载这个 CGI 库，并按照下面的步骤安装库：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$tar xzf cgicc-X.X.X.tar.gz $cd cgicc-X.X.X/ $./configure --prefix=/usr $make$make install</span><br></pre></td></tr></table></figure>

<p>您可以点击 C++ CGI Lib Documentation，查看相关的库文档。</p>
<h2 id="GET-和-POST-方法"><a href="#GET-和-POST-方法" class="headerlink" title="GET 和 POST 方法"></a>GET 和 POST 方法</h2><p>您可能有遇到过这样的情况，当您需要从浏览器传递一些信息到 Web 服务器，最后再传到 CGI 程序。通常浏览器会使用两种方法把这个信息传到 Web 服务器，分别是 GET 和 POST 方法。</p>
<h2 id="使用-GET-方法传递信息"><a href="#使用-GET-方法传递信息" class="headerlink" title="使用 GET 方法传递信息"></a>使用 GET 方法传递信息</h2><p>GET 方法发送已编码的用户信息追加到页面请求中。页面和已编码信息通过 ? 字符分隔开，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure>

<p>GET 方法是默认的从浏览器向 Web 服务器传信息的方法，它会在浏览器的地址栏中生成一串很长的字符串。当您向服务器传密码或其他一些敏感信息时，不要使用 GET 方法。GET 方法有大小限制，在一个请求字符串中最多可以传 1024 个字符。</p>
<p>当使用 GET 方法时，是使用 QUERY_STRING http 头来传递信息，在 CGI 程序中可使用 QUERY_STRING 环境变量来访问。</p>
<p>您可以通过在 URL 后跟上简单连接的键值对，也可以通过使用 HTML <FORM> 标签的 GET 方法来传信息。</p>
<h2 id="简单的-URL-实例：Get-方法"><a href="#简单的-URL-实例：Get-方法" class="headerlink" title="简单的 URL 实例：Get 方法"></a>简单的 URL 实例：Get 方法</h2><p>下面是一个简单的 URL，使用 GET 方法传递两个值给 hello_get.py 程序。</p>
<p>&#x2F;cgi-bin&#x2F;cpp_get.cgi?first_name&#x3D;ZARA&amp;last_name&#x3D;ALI</p>
<p>下面的实例生成 <strong>cpp_get.cgi</strong> CGI 程序，用于处理 Web 浏览器给出的输入。通过使用 C++ CGI 库，可以很容易地访问传递的信息：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span>  using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc formData;</span><br><span class="line">   </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;使用 GET 和 POST 方法&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   form_iterator fi = formData.<span class="built_in">getElement</span>(<span class="string">&quot;first_name&quot;</span>);  </span><br><span class="line">   <span class="keyword">if</span>( !fi-&gt;<span class="built_in">isEmpty</span>() &amp;&amp; fi != (*formData).<span class="built_in">end</span>()) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;名：&quot;</span> &lt;&lt; **fi &lt;&lt; endl;  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;No text entered for first name&quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   fi = formData.<span class="built_in">getElement</span>(<span class="string">&quot;last_name&quot;</span>);  </span><br><span class="line">   <span class="keyword">if</span>( !fi-&gt;<span class="built_in">isEmpty</span>() &amp;&amp;fi != (*formData).<span class="built_in">end</span>()) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;姓：&quot;</span> &lt;&lt; **fi &lt;&lt; endl;  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;No text entered for last name&quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>现在，编译上面的程序，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$g++ -o cpp_get.cgi cpp_get.cpp -lcgicc</span><br></pre></td></tr></table></figure>

<p>生成 cpp_get.cgi，并把它放在 CGI 目录中，并尝试使用下面的链接进行访问：</p>
<p>&#x2F;cgi-bin&#x2F;cpp_get.cgi?first_name&#x3D;ZARA&amp;last_name&#x3D;ALI</p>
<p>这会产生以下结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">名：ZARA 姓：ALI</span><br></pre></td></tr></table></figure>

<h2 id="简单的表单实例：GET-方法"><a href="#简单的表单实例：GET-方法" class="headerlink" title="简单的表单实例：GET 方法"></a>简单的表单实例：GET 方法</h2><p>下面是一个简单的实例，使用 HTML 表单和提交按钮传递两个值。我们将使用相同的 CGI 脚本 cpp_get.cgi 来处理输入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/cgi-bin/cpp_get.cgi&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;first_name&quot;</span>&gt;  &lt;br /&gt; 姓：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;last_name&quot;</span> /&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>下面是上述表单的实际输出，请输入名和姓，然后点击提交按钮查看结果。</p>
<h2 id="使用-POST-方法传递信息"><a href="#使用-POST-方法传递信息" class="headerlink" title="使用 POST 方法传递信息"></a>使用 POST 方法传递信息</h2><p>一个更可靠的向 CGI 程序传递信息的方法是 POST 方法。这种方法打包信息的方式与 GET 方法相同，不同的是，它不是把信息以文本字符串形式放在 URL 中的 ? 之后进行传递，而是把它以单独的消息形式进行传递。该消息是以标准输入的形式传给 CGI 脚本的。</p>
<p>我们同样使用 cpp_get.cgi 程序来处理 POST 方法。让我们以同样的例子，通过使用 HTML 表单和提交按钮来传递两个值，只不过这次我们使用的不是 GET 方法，而是 POST 方法，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/cgi-bin/cpp_get.cgi&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;first_name&quot;</span>&gt;&lt;br /&gt;姓：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;last_name&quot;</span> /&gt; &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="向-CGI-程序传递复选框数据"><a href="#向-CGI-程序传递复选框数据" class="headerlink" title="向 CGI 程序传递复选框数据"></a>向 CGI 程序传递复选框数据</h2><p>当需要选择多个选项时，我们使用复选框。</p>
<p>下面的 HTML 代码实例是一个带有两个复选框的表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/cgi-bin/cpp_checkbox.cgi&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;maths&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span> /&gt;</span> 数学<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;physics&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span> /&gt;</span> 物理<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;选择学科&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的 C++ 程序会生成 cpp_checkbox.cgi 脚本，用于处理 Web 浏览器通过复选框给出的输入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span> using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc formData;</span><br><span class="line">   <span class="type">bool</span> maths_flag, physics_flag;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;向 CGI 程序传递复选框数据&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   maths_flag = formData.<span class="built_in">queryCheckbox</span>(<span class="string">&quot;maths&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>( maths_flag ) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Maths Flag: ON &quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Maths Flag: OFF &quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   physics_flag = formData.<span class="built_in">queryCheckbox</span>(<span class="string">&quot;physics&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>( physics_flag ) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Physics Flag: ON &quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Physics Flag: OFF &quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="向-CGI-程序传递单选按钮数据"><a href="#向-CGI-程序传递单选按钮数据" class="headerlink" title="向 CGI 程序传递单选按钮数据"></a>向 CGI 程序传递单选按钮数据</h2><p>当只需要选择一个选项时，我们使用单选按钮。</p>
<p>下面的 HTML 代码实例是一个带有两个单选按钮的表单：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/cgi-bin/cpp_radiobutton.cgi&quot;</span> </span><br><span class="line">         method=<span class="string">&quot;post&quot;</span> </span><br><span class="line">         target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;subject&quot;</span> value=<span class="string">&quot;maths&quot;</span> </span><br><span class="line">                                    checked=<span class="string">&quot;checked&quot;</span>/&gt; 数学 </span><br><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;subject&quot;</span> value=<span class="string">&quot;physics&quot;</span> /&gt; 物理&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;选择学科&quot;</span> /&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>下面的 C++ 程序会生成 cpp_radiobutton.cgi 脚本，用于处理 Web 浏览器通过单选按钮给出的输入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span> using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc formData;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;向 CGI 程序传递单选按钮数据&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   form_iterator fi = formData.<span class="built_in">getElement</span>(<span class="string">&quot;subject&quot;</span>);  </span><br><span class="line">   <span class="keyword">if</span>( !fi-&gt;<span class="built_in">isEmpty</span>() &amp;&amp; fi != (*formData).<span class="built_in">end</span>()) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Radio box selected: &quot;</span> &lt;&lt; **fi &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="向-CGI-程序传递文本区域数据"><a href="#向-CGI-程序传递文本区域数据" class="headerlink" title="向 CGI 程序传递文本区域数据"></a>向 CGI 程序传递文本区域数据</h2><p>当需要向 CGI 程序传递多行文本时，我们使用 TEXTAREA 元素。</p>
<p>下面的 HTML 代码实例是一个带有 TEXTAREA 框的表单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/cgi-bin/cpp_textarea.cgi&quot; </span><br><span class="line">         method=&quot;post&quot; </span><br><span class="line">         target=&quot;_blank&quot;&gt;&lt;textarea name=&quot;textcontent&quot; cols=&quot;40&quot; rows=&quot;4&quot;&gt;请在这里输入文本...&lt;/textarea&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>下面的 C++ 程序会生成 cpp_textarea.cgi 脚本，用于处理 Web 浏览器通过文本区域给出的输入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span> using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc formData;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;向 CGI 程序传递文本区域数据&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   form_iterator fi = formData.<span class="built_in">getElement</span>(<span class="string">&quot;textcontent&quot;</span>);  </span><br><span class="line">   <span class="keyword">if</span>( !fi-&gt;<span class="built_in">isEmpty</span>() &amp;&amp; fi != (*formData).<span class="built_in">end</span>()) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Text Content: &quot;</span> &lt;&lt; **fi &lt;&lt; endl;  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;No text entered&quot;</span> &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="向-CGI-程序传递下拉框数据"><a href="#向-CGI-程序传递下拉框数据" class="headerlink" title="向 CGI 程序传递下拉框数据"></a>向 CGI 程序传递下拉框数据</h2><p>当有多个选项可用，但只能选择一个或两个选项时，我们使用下拉框。</p>
<p>下面的 HTML 代码实例是一个带有下拉框的表单：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/cgi-bin/cpp_dropdown.cgi&quot;</span> </span><br><span class="line">                       method=<span class="string">&quot;post&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;select name=<span class="string">&quot;dropdown&quot;</span>&gt;&lt;option value=<span class="string">&quot;Maths&quot;</span> selected&gt;数学&lt;/option&gt;&lt;option value=<span class="string">&quot;Physics&quot;</span>&gt;物理&lt;/option&gt;&lt;/select&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>下面的 C++ 程序会生成 cpp_dropdown.cgi 脚本，用于处理 Web 浏览器通过下拉框给出的输入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span> using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc formData;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;向 CGI 程序传递下拉框数据&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   form_iterator fi = formData.<span class="built_in">getElement</span>(<span class="string">&quot;dropdown&quot;</span>);  </span><br><span class="line">   <span class="keyword">if</span>( !fi-&gt;<span class="built_in">isEmpty</span>() &amp;&amp; fi != (*formData).<span class="built_in">end</span>()) &#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Value Selected: &quot;</span> &lt;&lt; **fi &lt;&lt; endl;  </span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在-CGI-中使用-Cookies"><a href="#在-CGI-中使用-Cookies" class="headerlink" title="在 CGI 中使用 Cookies"></a>在 CGI 中使用 Cookies</h2><p>HTTP 协议是一种无状态的协议。但对于一个商业网站，它需要在不同页面间保持会话信息。例如，一个用户在完成多个页面的步骤之后结束注册。但是，如何在所有网页中保持用户的会话信息。</p>
<p>在许多情况下，使用 cookies 是记忆和跟踪有关用户喜好、购买、佣金以及其他为追求更好的游客体验或网站统计所需信息的最有效的方法。</p>
<h3 id="它是如何工作的"><a href="#它是如何工作的" class="headerlink" title="它是如何工作的"></a>它是如何工作的</h3><p>服务器以 cookie 的形式向访客的浏览器发送一些数据。如果浏览器接受了 cookie，则 cookie 会以纯文本记录的形式存储在访客的硬盘上。现在，当访客访问网站上的另一个页面时，会检索 cookie。一旦找到 cookie，服务器就知道存储了什么。</p>
<p>cookie 是一种纯文本的数据记录，带有 5 个可变长度的字段：</p>
<ul>
<li><strong>Expires :</strong> cookie 的过期日期。如果此字段留空，cookie 会在访客退出浏览器时过期。</li>
<li><strong>Domain :</strong> 网站的域名。</li>
<li><strong>Path :</strong> 设置 cookie 的目录或网页的路径。如果您想从任意的目录或网页检索 cookie，此字段可以留空。</li>
<li><strong>Secure :</strong> 如果此字段包含单词 “secure”，那么 cookie 只能通过安全服务器进行检索。如果此字段留空，则不存在该限制。</li>
<li><strong>Name&#x3D;Value :</strong> cookie 以键值对的形式被设置和获取。</li>
</ul>
<h3 id="设置-Cookies"><a href="#设置-Cookies" class="headerlink" title="设置 Cookies"></a>设置 Cookies</h3><p>向浏览器发送 cookies 是非常简单的。这些 cookies 会在 Content-type 字段之前，与 HTTP 头一起被发送。假设您想设置 UserID 和 Password 为 cookies，设置 cookies 的步骤如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;int main ()&#123;</span></span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Set-Cookie:UserID=XYZ;\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Set-Cookie:Password=XYZ123;\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Set-Cookie:Domain=www.w3cschool.cc;\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Set-Cookie:Path=/perl;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;CGI 中的 Cookies&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;设置 cookies&quot;</span> &lt;&lt; endl;  </span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>从这个实例中，我们了解了如何设置 cookies。我们使用 <strong>Set-Cookie</strong> HTTP 头来设置 cookies。</p>
<p>在这里，有一些设置 cookies 的属性是可选的，比如 Expires、Domain 和 Path。值得注意的是，cookies 是在发送行 <strong>“Content-type:text&#x2F;html\r\n\r\n</strong> 之前被设置的。</p>
<p>编译上面的程序，生成 setcookies.cgi，并尝试使用下面的链接设置 cookies。它会在您的计算机上设置四个 cookies：</p>
<p>&#x2F;cgi-bin&#x2F;setcookies.cgi</p>
<h3 id="获取-Cookies"><a href="#获取-Cookies" class="headerlink" title="获取 Cookies"></a>获取 Cookies</h3><p>检索所有设置的 cookies 是非常简单的。cookies 被存储在 CGI 环境变量 HTTP_COOKIE 中，且它们的形式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">key1=value1;key2=value2;key3=value3....</span><br></pre></td></tr></table></figure>

<p>下面的实例演示了如何获取 cookies。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span>using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc cgi;</span><br><span class="line">   const_cookie_iterator cci;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;CGI 中的 Cookies&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;table border = \&quot;0\&quot; cellspacing = \&quot;2\&quot;&gt;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 获取环境变量</span></span><br><span class="line">   <span class="type">const</span> CgiEnvironment&amp; env = cgi.<span class="built_in">getEnvironment</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>( cci = env.<span class="built_in">getCookieList</span>().<span class="built_in">begin</span>();</span><br><span class="line">        cci != env.<span class="built_in">getCookieList</span>().<span class="built_in">end</span>(); </span><br><span class="line">        ++cci )</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> &lt;&lt; cci-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;</span><br><span class="line">      cout &lt;&lt; cci-&gt;<span class="built_in">getValue</span>();                                 </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/table&gt;&lt;\n&quot;</span>;</span><br><span class="line">  </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>现在，编译上面的程序，生成 getcookies.cgi，并尝试使用下面的链接获取您的计算机上所有可用的 cookies：</p>
<p>&#x2F;cgi-bin&#x2F;getcookies.cgi</p>
<p>这会产生一个列表，显示了上一节中设置的四个 cookies 以及您的计算机上所有其他的 cookies：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">UserID XYZ Password XYZ123 Domain www.w3cschool.cc Path /perl</span><br></pre></td></tr></table></figure>

<h2 id="文件上传实例"><a href="#文件上传实例" class="headerlink" title="文件上传实例"></a>文件上传实例</h2><p>为了上传一个文件，HTML 表单必须把 enctype 属性设置为 <strong>multipart&#x2F;form-data</strong>。带有文件类型的 input 标签会创建一个 “Browse” 按钮。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;</span><br><span class="line">   &lt;form enctype=<span class="string">&quot;multipart/form-data&quot;</span> </span><br><span class="line">            action=<span class="string">&quot;/cgi-bin/cpp_uploadfile.cgi&quot;</span> </span><br><span class="line">            method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">   &lt;p&gt;文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;userfile&quot;</span> /&gt;&lt;/p&gt;</span><br><span class="line">   &lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> /&gt;&lt;/p&gt;</span><br><span class="line">   &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码的结果是下面的表单：</p>
<p>文件：</p>
<p><strong>注意：</strong>上面的实例已经故意禁用了保存上传的文件在我们的服务器上。您可以在自己的服务器上尝试上面的代码。</p>
<p>下面是用于处理文件上传的脚本 <strong>cpp_uploadfile.cpp</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/CgiDefs.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/Cgicc.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTTPHTMLHeader.h&gt;</span> #<span class="keyword">include</span> <span class="string">&lt;cgicc/HTMLClasses.h&gt;</span>using namespace std;using namespace cgicc;int main ()&#123;</span></span><br><span class="line">   Cgicc cgi;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Content-type:text/html\r\n\r\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;html&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;title&gt;CGI 中的文件上传&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/head&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;body&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取要被上传的文件列表</span></span><br><span class="line">   const_file_iterator file = cgi.<span class="built_in">getFile</span>(<span class="string">&quot;userfile&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(file != cgi.<span class="built_in">getFiles</span>().<span class="built_in">end</span>()) &#123;</span><br><span class="line">      <span class="comment">// 在 cout 中发送数据类型</span></span><br><span class="line">      cout &lt;&lt; <span class="built_in">HTTPContentHeader</span>(file-&gt;<span class="built_in">getDataType</span>());</span><br><span class="line">      <span class="comment">// 在 cout 中写入内容</span></span><br><span class="line">      file-&gt;<span class="built_in">writeToStream</span>(cout);</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;文件上传成功&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>上面的实例是在 <strong>cout</strong> 流中写入内容，但您可以打开文件流，并把上传的文件内容保存在目标位置的某个文件中。</p>
<h1 id="C-STL-教程"><a href="#C-STL-教程" class="headerlink" title="C++ STL 教程"></a>C++ STL 教程</h1><p>在前面的章节中，我们已经学习了 C++ 模板的概念。C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p>
<p>C++ 标准模板库的核心包括以下三个组件：</p>
<table>
<thead>
<tr>
<th align="left">组件</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">容器（Containers）</td>
<td align="left">容器是用来管理某一类对象的集合。C++ 提供了各种不同类型的容器，比如 deque、list、vector、map 等。</td>
</tr>
<tr>
<td align="left">算法（Algorithms）</td>
<td align="left">算法作用于容器。它们提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作。</td>
</tr>
<tr>
<td align="left">迭代器（iterators）</td>
<td align="left">迭代器用于遍历对象集合的元素。这些集合可能是容器，也可能是容器的子集。</td>
</tr>
</tbody></table>
<p>这三个组件都带有丰富的预定义函数，帮助我们通过简单的方式处理复杂的任务。</p>
<p>下面的程序演示了向量容器（一个 C++ 标准的模板），它与数组十分相似，唯一不同的是，向量在需要扩展大小的时候，会自动处理它自己的存储需求：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>using namespace std;</span></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 创建一个向量存储 int</span></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; vec; </span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 显示 vec 的原始大小</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;vector size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 推入 5 个值到向量中</span></span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">      vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 显示 vec 扩展后的大小</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;extended vector size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 访问向量中的 5 个值</span></span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;value of vec [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; vec[i] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用迭代器 iterator 访问值</span></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt;::iterator v = vec.<span class="built_in">begin</span>();</span><br><span class="line">   <span class="keyword">while</span>( v != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;value of v = &quot;</span> &lt;&lt; *v &lt;&lt; endl;</span><br><span class="line">      v++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector size = <span class="number">0</span>extended vector size = <span class="number">5</span>value of vec [<span class="number">0</span>] = <span class="number">0</span>value of vec [<span class="number">1</span>] = <span class="number">1</span>value of vec [<span class="number">2</span>] = <span class="number">2</span>value of vec [<span class="number">3</span>] = <span class="number">3</span>value of vec [<span class="number">4</span>] = <span class="number">4</span>value of v = <span class="number">0</span>value of v = <span class="number">1</span>value of v = <span class="number">2</span>value of v = <span class="number">3</span>value of v = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>关于上面实例中所使用的各种函数，有几点要注意：</p>
<ul>
<li>push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。</li>
<li>size( ) 函数显示向量的大小。</li>
<li>begin( ) 函数返回一个指向向量开头的迭代器。</li>
<li>end( ) 函数返回一个指向向量末尾的迭代器。</li>
</ul>
<h1 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++ 标准库"></a>C++ 标准库</h1><p>C++ 标准库可以分为两部分：</p>
<ul>
<li><strong>标准函数库：</strong> 这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自 C 语言。</li>
<li><strong>面向对象类库：</strong> 这个库是类及其相关函数的集合。</li>
</ul>
<p>C++ 标准库包含了所有的 C 标准库，为了支持类型安全，做了一定的添加和修改。</p>
<h2 id="标准函数库"><a href="#标准函数库" class="headerlink" title="标准函数库"></a>标准函数库</h2><p>标准函数库分为以下几类：</p>
<ul>
<li>输入&#x2F;输出 I&#x2F;O</li>
<li>字符串和字符处理</li>
<li>数学</li>
<li>时间、日期和本地化</li>
<li>动态分配</li>
<li>其他</li>
<li>宽字符函数</li>
</ul>
<h2 id="面向对象类库"><a href="#面向对象类库" class="headerlink" title="面向对象类库"></a>面向对象类库</h2><p>标准的 C++ 面向对象类库定义了大量支持一些常见操作的类，比如输入&#x2F;输出 I&#x2F;O、字符串处理、数值处理。面向对象类库包含以下内容：</p>
<ul>
<li>标准的 C++ I&#x2F;O 类</li>
<li>String 类</li>
<li>数值类</li>
<li>STL 容器类</li>
<li>STL 算法</li>
<li>STL 函数对象</li>
<li>STL 迭代器</li>
<li>STL 分配器</li>
<li>本地化库</li>
<li>异常处理类</li>
<li>杂项支持库</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>来源：<a href="https://github.com/0voice/cpp_new_features">https://github.com/0voice/cpp_new_features</a></p>
]]></content>
      <categories>
        <category>基本功</category>
        <category>编程基础</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI/ISO七层网络</title>
    <url>/2023/08/31/OSI-ISO%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&ensp;&ensp; 七层网络的常见设备，如下图所示：<br><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B8%B8%E8%A7%81%E8%AE%BE%E5%A4%87.png?raw=true"></p>
<p>&ensp;&ensp; 七层网络的常见协议与功能，如下图所示：<br><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E.gif?raw=true"></p>
]]></content>
      <categories>
        <category>基本功</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>IP数据报</tag>
      </tags>
  </entry>
  <entry>
    <title>深入 OGNL 与  Mybatis 源代码分析一次 Mybatis 升级引发的线上事故</title>
    <url>/2023/08/31/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&ensp;&ensp;&ensp;&ensp; 项目中对 Mybatis 做了一次升级。前后版本如下，3.2.5 -&gt; 3.4.4：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/mybatis%E5%89%8D%E5%90%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7.png?raw=true" alt="mybatis前后版本升级"></p>
<p>&ensp;&ensp;&ensp;&ensp; 结果第二天巡检发现如下报错，过了两个小时业务高峰期，前台业务人员不断反馈某最核心的业务无法进行：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF.png?raw=true" alt="报错信息"></p>
<p>&ensp;&ensp;&ensp;&ensp; 我们当时定位到错误的地方，根据经验修改之后验证通过，重新上线之后得以解决。可能涉及敏感数据，所以不展示实际的报错与弥补方案。</p>
<p>&ensp;&ensp;&ensp;&ensp; 以下是我在本地的问题复现。在本地的一个标准的 SSM 工程中分别引入以下两个版本的 Mybatis 依赖:</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E5%88%86%E5%88%AB%E5%BC%95%E5%85%A5%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E4%BE%9D%E8%B5%96.png?raw=true" alt="分别引入两个版本的依赖"></p>
<p>&ensp;&ensp;&ensp;&ensp; 编写如下数据库脚本:</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC.png?raw=true" alt="数据库脚本"></p>
<p>&ensp;&ensp;&ensp;&ensp; dao 层调用方法如下：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/dao%E5%B1%82%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png?raw=true" alt="dao层方法调用"></p>
<p>&ensp;&ensp;&ensp;&ensp; 当 Mybatis 依赖为 3.2.5 的较低版本时，不会报错；当 Mybatis 依赖版本为 3.4.4 的较高版本时，则会报出上面的错误:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">invalid comparision:  java.util.HashMap and java.lang.String</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp;&ensp;&ensp; 在本地问题得到复现。问题的关键在于数据库脚本中的 if 条件编译语句的这一个子句 _parameter!&#x3D;’’ 将_parameter 与 ‘’ 做比较，_parameter 是 Mybatis 的一个内置对象，你不需要知道它的作用，只需要知道他是 Map 类型的就行了，显然 ‘’ 是 String 类型的。到这里我们其实已经猜出来了，正是因为这种不规范的比较导致数据库脚本执行失败（实际上是 Mybatis 编译 SQL 失败）。</p>
<p>&ensp;&ensp;&ensp;&ensp; 但是问题又来了，<strong>为什么 Mybatis 较低版本的时候没有问题，而较高版本则暴露出这个问题了？</strong> 我们深入源码分析一下。因为我对 Mybatis 源码比较熟悉，加上实际生产中报错的堆栈信息也很全，所以直接定位到了 Mybatis 的这个类型：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/ifnode.png?raw=true" alt="ifnode"></p>
<p>&ensp;&ensp;&ensp;&ensp; 上述代码的作用：在我们上述 SQL 脚本中，根据 if 子句的测试语句（就是 … &amp;&amp; _parameter!&#x3D;’’ 那一坨）判断，当前 if 子句所包裹的 sql 是否需要动态编译进最终的执行sql中。当我们进一步追踪，就进入到了 OGNL 的源码中，OGNL 是一套表达式解析引擎，一直定位下去就到了具体报错的方法。到这里我们补充一下版本依赖关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mybatis-3.2.5  -&gt;  ognl-2.6.9</span><br><span class="line">mybatis-3.4.4  -&gt;  ognl-3.1.14</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp;&ensp;&ensp; 高版本 OGNL 源码如下：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E9%AB%98%E7%89%88%E6%9C%ACOGNL%E4%BB%A3%E7%A0%81.png?raw=true" alt="高版本 OGNL 代码"></p>
<p>&ensp;&ensp;&ensp;&ensp; 低版本 OGNL 源码如下：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E4%BD%8E%E7%89%88%E6%9C%ACOGNL%E4%BB%A3%E7%A0%81.png?raw=true" alt="低版本 OGNL 代码"></p>
<p>&ensp;&ensp;&ensp;&ensp; 类型标识相关的源码如下：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E7%B1%BB%E5%9E%8B%E6%A0%87%E8%AE%B0.png?raw=true" alt="类型标记"></p>
<p>&ensp;&ensp;&ensp;&ensp; case 为 NONUMBERIC 的含义是当比较的值是非数值类型，所以 _parameter!&#x3D;’’ 子句的判断自然是走该分支语句的代码。t1、t2，v1、v2 的含义是两个待比值（ _parameter 和 ‘’）的类型和 value，在这个场景中分别是如下调试面板所示的（不明白的请观察为了复现问题所编写的 SQL 脚本和 dao 层语句）：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF%E5%A6%82%E4%B8%8B.png?raw=true" alt="调试信息如下"></p>
<p>&ensp;&ensp;&ensp;&ensp; 解释一下：t1 &#x3D; t2 &#x3D; 10，表示 _parameter 与 ‘’ 都是非数值类型。v1 表明了 _parameter 是个 HashMap 类型的变量，有一个 (blurname,cat) 的键值对，v2 &#x3D; ‘’。另外，类的 Class 实例中有一个 isAssignableFrom 方法，这个方法是用来判断两个类的之间的关联关系，也可以说是一个类是否可以被强制转换为另外一个实例对象。</p>
<p>&ensp;&ensp;&ensp;&ensp; 至此所需信息全部已经准备完毕，我们可以来分析高低版本 OGNL 的源码了。高版本 OGNL 中，我们直接看 case:NONUMBERIC 的分支子句。代码含义为：</p>
<p>&ensp;&ensp;&ensp;&ensp; <strong>如果 V1 是 Comparable 类型的并且 V1 可以强转为 V2 的类型，则进入 if 分支，否则进入 else 分支，而 else 分支直接报错，而且报错信息是我们实际生产环境中遇到的。显然，V1 既不是 Comparable 类型，也无法转换为 V2 的类型（HashMap -&gt; String），所以进入了 else 分支，mybatis 升级之后携带 OGNL 的升级，数据库不规范的写法导致 mybatis 编译 sql 语句报错，阻塞了业务</strong></p>
<p>&ensp;&ensp;&ensp;&ensp; 低版本的 OGNL 的 case:NONUMBERIC 的分支子句的代码逻辑说实话非常拧巴，含义是：</p>
<p>&ensp;&ensp;&ensp;&ensp; <strong>如果 v1、v2 任一变量为 null，则进入 if 分支，显然不会进入。else 先判断v1、v2 是否能互转，显然不能，直接跳过。接下来是重中之重：如果 equals 为 true ,跳出 case，否则报错。我们根据结果看，equals 必定为 true，因为我们那种不规范的 mybatis 在这个地方，它每没报错——事实上是应该将该问题抛出来的，从而引导开发者更正 mybatis 脚本。接下来我们看方法外面这个 equals 的来源：</strong></p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/equals.png?raw=true" alt="equals"></p>
<p>&ensp;&ensp;&ensp;&ensp; 我惊呆了，直接写死传经来的，至于这个 equals 意欲何为，当初作者为什么这么写，也许只有作者自己知道。反正高版本的 OGNL 已经将这部分的代码逻辑全部重构了。</p>
<p>&ensp;&ensp;&ensp;&ensp; 我们可以得到如下结论： _<em>低版本的 mybatis 依赖了低版本的 OGNL ，低版本的 OGNL 在上述分析的函数中存在一定缺陷，这个缺陷会导致我们在编写 Mybatis 脚本的时候类似于 <em>parameter!&#x3D;’’ 的不规范写法不被发现。当我们升级了 Mybatis 之后，这种不规范的写法反而兜不住暴露出来了，加上组件升级测试不充分，直接上到了生产环境。</em></em></p>
<p>&ensp;&ensp;&ensp;&ensp; <strong>反思：</strong></p>
<ul>
<li><strong>日常开发要严格要求自己，追求正规、大气的编程素养，每一行代码，每一个字符，都要过大脑，不要太随便，不要随便复制粘贴能跑就行。</strong></li>
<li><strong>组件升级要慎之又慎，测试要充分。</strong></li>
</ul>
]]></content>
      <categories>
        <category>工程</category>
        <category>问题记录与事故复盘</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>问题记录</tag>
        <tag>线上事故</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>GPM模型</title>
    <url>/2023/08/29/GPM%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>基本功</category>
        <category>编程基础</category>
        <category>Go</category>
        <category>GPM</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
        <tag>Go</tag>
        <tag>GPM</tag>
      </tags>
  </entry>
  <entry>
    <title>GC-全流程</title>
    <url>/2023/08/29/GC%E2%80%94%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、minorGC-和-Full-GC-区别"><a href="#1、minorGC-和-Full-GC-区别" class="headerlink" title="1、minorGC 和 Full GC 区别"></a><strong>1、minorGC 和 Full GC 区别</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 新生代 GC（Minor GC）：指发生新生代的的垃圾收集动作，Minor GC 非常频繁，回收速度一般也比较快。</p>
<p>&ensp;&ensp;&ensp;&ensp; 老年代 GC（Major GC&#x2F;Full GC）：指发生在老年代的 GC，出现了 Major GC 经常会伴随至少一次的 Minor GC（并非绝对），Major GC 的速度一般会比 Minor GC 的慢 10 倍以上。</p>
<h4 id="2、minorGC-过程详解"><a href="#2、minorGC-过程详解" class="headerlink" title="2、minorGC 过程详解"></a><strong>2、minorGC 过程详解</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 在初始阶段，新创建的对象被分配到 Eden 区，Survivor 的两块空间都为空。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B1.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 当Eden区满了的时候，minor garbage 被触发。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B2.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 经过扫描与标记，存活的对象被复制到S0，不存活的对象被回收， 并且存活的对象年龄都增大一岁。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B3.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 在下一次的 Minor GC 中，Eden 区的情况和上面一致，没有引用的对象被回收，存活的对象被复制到 Survivor区。当 Eden 和 s0区空间满了，S0 的所有的数据都被复制到S1，需要注意的是，在上次 Minor GC 过程中移动到S0 中的两个对象在复制到 S1 后其年龄要加1。此时 Eden 区 S0 区被清空，所有存活的数据都复制到了 S1 区，并且 S1 区存在着年龄不一样的对象，过程如下图所示：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B4.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 再下一次 Minor GC 则重复这个过程，这一次 Survivor 的两个区对换，存活的对象被复制到 S0，存活的对象年龄加1，Eden 区和另一个 Survivor 区被清空。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B5.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 再经过几次 Minor GC 之后，当存活对象的年龄达到一个阈值之后（-XX：MaxTenuringThreshold 默认是15），就会被从年轻代 Promotion 到老年代。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B6.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 随着 MinorGC 一次又一次的进行，不断会有新的对象被 Promote 到老年代。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B7.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 上面基本上覆盖了整个年轻代所有的回收过程。最终，MajorGC将会在老年代发生，老年代的空间将会被清除和压缩(标记-清除或者标记-整理)。从上面的过程可以看出，Eden 区是连续的空间，且 Survivor 总有一个为空。经过一次 GC 和复制，一个 Survivor 中保存着当前还活着的对象，而 Eden 区和另一个 Survivor 区的内容都不再需要了，可以直接清空，到下一次 GC 时，两个 Survivor 的角色再互换。因此，这种方式分配内存和清理内存的效率都极高，这种垃圾回收的方式就是著名的“停止-复制（Stop-and-copy）”清理法（将 Eden 区和一个 Survivor 中仍然存活的对象拷贝到另一个 Survivor 中），这不代表着停止复制清理法很高效，其实，它也只在这种情况下（基于大部分对象存活周期很短的事实）高效，如果在老年代采用停止复制，则是非常不合适的。</p>
<p>&ensp;&ensp;&ensp;&ensp; 老年代存储的对象比年轻代多得多，而且不乏大对象，对老年代进行内存清理时，如果使用停止-复制算法，则相当低效。一般，老年代用的算法是标记-压缩算法，即：标记出仍然存活的对象（存在引用的），将所有存活的对象向一端移动，以保证内存的连续。在发生 Minor GC 时，虚拟机会检查每次晋升进入老年代的大小是否大于老年代的剩余空间大小，如果大于，则直接触发一次 Full GC，否则，就查看是否设置了-XX:+HandlePromotionFailure（允许担保失败），如果允许，则只会进行 MinorGC，此时可以容忍内存分配失败；如果不允许，则仍然进行Full GC（ 这代表着如果设置-<br>XX:+Handle PromotionFailure，则触发MinorGC就会同时触发Full GC，哪怕老年代还有很多内存，所以，最好不要这样做）。</p>
<h4 id="3、整体描述"><a href="#3、整体描述" class="headerlink" title="3、整体描述"></a><strong>3、整体描述</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s1(“To”)，并且对象的年龄还会加 1( Eden 区 -&gt; Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。经过这次 GC 后，Eden 区和 From 区已经被清空。这个时候，From 和 To 会交换他们的角色，也就是新的 To 就是上次 GC 前的 From ，新的 From 就是上次 GC 前的 To。不管怎样，都会保证名为 To 的 Survivor 区域是空的。Minor GC 会一直重复这样的过程，直到 To 区被填满，To 区被填满之后，会将所有对象移动到年老代中。</p>
<h4 id="4、GC-触发条件"><a href="#4、GC-触发条件" class="headerlink" title="4、GC 触发条件"></a><strong>4、GC 触发条件</strong></h4><p>&ensp;&ensp;&ensp;&ensp; Minor GC 触发条件：Eden 区满时。Full GC 触发条件：</p>
<ul>
<li>调用 System.gc 时，系统建议执行 Full GC，但是不必然执行；</li>
<li>老年代空间不足；</li>
<li>方法去空间不足；</li>
<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存；</li>
<li>由 Eden 区、From Space 区向 To Space 区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</li>
</ul>
<h4 id="5、对象进入老年代的四种情况"><a href="#5、对象进入老年代的四种情况" class="headerlink" title="5、对象进入老年代的四种情况"></a><strong>5、对象进入老年代的四种情况</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 假如进行Minor GC时发现，存活的对象在ToSpace区中存不下，那么把存活的对象存入老年代。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B8.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 大对象直接进入老年代：假设新创建的对象很大，比如为5M(这个值可以通过PretenureSizeThreshold这个参数进行设置，默认3M)，那么即使Eden区有足够的空间来存放，也不会存放在Eden区，而是直接存入老年代。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B9.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; 长期存活的对象将进入老年代：此外，如果对象在Eden出生并且经过1次Minor GC后仍然存活，并且能被To区容纳，那么将被移动到To区，并且把对象的年龄设置为1，对象没”熬过”一次Minor GC(没有被回收，也没有因为To区没有空间而被移动到老年代中)，年龄就增加一岁，当它的年龄增加到一定程度(默认15岁，配置参数-XX:MaxTenuringThreshold)，就会被晋升到老年代中。</p>
<p>&ensp;&ensp;&ensp;&ensp; 动态对象年龄判定：还有一种情况，如果在From空间中，相同年龄所有对象的大小总和大于Survivor空间的一半，那么年龄大于等于该年龄的对象就会被移动到老年代，而不用等到15岁(默认)。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B10.png?raw=true"></p>
<h4 id="6、空间分配担保"><a href="#6、空间分配担保" class="headerlink" title="6、空间分配担保"></a><strong>6、空间分配担保</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。如果不成立，则虚拟机会查看 HandlerPromotionFailure 这个参数设置的值（ true 或 flase ）是否允许担保失败（如果这个值为 true，代表着 JVM 说，我允许在这种条件下尝试执行 Minor GC，出了事我负责）。</p>
<p>&ensp;&ensp;&ensp;&ensp; 如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的；如果小于，或者 HandlerPromotionFailure 为 false，那么这次 Minor GC 将升级为 Full GC。如果老年代最大可用的连续空间大于历次晋升到老年代对象的平均大小，那么 HandlerPromotionFailure 为 true 的情况下，可以尝试进行一次 Minor GC，但这是有风险的，如果本次将要晋升到老年代的对象很多，那么 Minor GC 还是无法执行，此时还得改为 Full GC。</p>
<p>&ensp;&ensp;&ensp;&ensp; 注意：JDK 6Update 24 之后，只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大 小就会进行 Minor GC，否则进行 Full GC。</p>
]]></content>
      <categories>
        <category>基本功</category>
        <category>编程基础</category>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S架构图</title>
    <url>/2023/08/29/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="K8S架构图"></p>
]]></content>
      <categories>
        <category>工程</category>
        <category>云计算</category>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>云计算领域</tag>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>本地调试Docker源码</title>
    <url>/2023/08/29/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95Docker%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>工程</category>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>云计算领域</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt简介</title>
    <url>/2023/08/29/Qt%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>工程</category>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>桌面开发</tag>
      </tags>
  </entry>
  <entry>
    <title>IP数据报</title>
    <url>/2023/08/29/IP%E6%95%B0%E6%8D%AE%E6%8A%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&ensp;&ensp;&ensp;&ensp; IP 协议控制传输的协议单元称为 IP 数据报（IP Datagram，IP数据报、IP包或IP分组）。IP协议屏蔽了下层各种物理子网的差异，能够向上层提供统一格式的IP数据报。lP数据报采用数据报分组传输的方式，提供的服务是无连接方式。IP数据报的格式能够说明lP协议具有什么功能。IPv4数据报由报头和数据两部分组成，其中，数据是高层需要传输的数据，报头是为了正确传输高层数据而增加的控制信息。报头的前一部分长度固定，共20字节，是所有IP数据报必须具有。在首部固定部分的后面是可选字段，长度可变。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP%E6%95%B0%E6%8D%AE%E6%8A%A5/IP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png?raw=true" alt="IP报文结构"></p>
<h4 id="1、固定部分"><a href="#1、固定部分" class="headerlink" title="1、固定部分"></a><strong>1、固定部分</strong></h4><ul>
<li>版本：占 4 位，指 IP 协议的版本。通信双方使用的 IP 协议版本必须一致。广泛使用的 IP 协议版本号为 4（即 IPv4）。关于 IPv6，还处于草案阶段。</li>
<li>首部长度：占 4 位，可表示的最大十进制数值是 15。请注意，这个字段所表示数的单位是 32 位字长（1 个 32 位字长是 4 字节），因此，当 IP 的首部长度为 1111 时（即十进制的 15），首部长度就达到 60 字节。当 IP 分组的首部长度不是 4 字节的整数倍时，必须利用最后的填充字段加以填充。因此数据部分永远在 4 字节的整数倍开始，这样在实现 IP 协议时较为方便。首部长度限制为 60 字节的缺点是有时可能不够用。但这样做是希望用户尽量减少开销。最常用的首部长度就是 20 字节（即首部长度为 0101），这时不使用任何选项。</li>
<li>区分服务：占 8 位，用来获得更好的服务。这个字段在旧标准中叫做服务类型，但实际上一直没有被使用过。1998 年 IETF 把这个字段改名为区分服务DS(Differentiated Services)。只有在使用区分服务时，这个字段才起作用。</li>
<li>总长度：总长度指首部和数据之和的长度，单位为字节。总长度字长为 16 位，因此数据报的最大长度为 2^16-1&#x3D;65535 字节。在 IP 层下面的每一种数据链路层都有自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元 MTU（Maximum Transfer Unit）。当一个数据报封装成链路层的帧时，此数据报的总长度（即首部加上数据部分）一定不能超过下面的数据链路层的 MTU 值。</li>
<li>标识：占 16 位。IP 软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的 MTU 而必须分片时，这个标识字段的值就被复制到所有的数据报的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。</li>
<li>标志：占 3 位，但只有 2 位有意义。标志字段中的最低位记为 MF（More Fragment）。MF&#x3D;1 即表示后面“还有分片”的数据报。MF&#x3D;0 表示这已是若干数据报片中的最后一个。标志字段中间的一位记为 DF（Don’t Fragment），意思是“不能分片”。只有当 DF&#x3D;0 时才允许分片。</li>
<li>片偏移：占 13 位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对用户数据字段的起点，该片从何处开始。片偏移以 8  个字节为偏移单位。这就是说，除了最后一个分片，每个分片的长度一定是 8 字节（64 位）的整数倍。</li>
<li>生存时间：占 8 位，生存时间字段常用的的英文缩写是 TTL（Time To Live），表明是数据报在网络中的寿命。由发出数据报的源点设置这个字段。其目的是防止无法交付的数据报无限制地在因特网中兜圈子，因而白白消耗网络资源。最初的设计是以秒作为 TTL 的单位。每经过一个路由器时，就把 TTL 减去数据报在路由器消耗掉的一段时间。若数据报在路由器消耗的时间小于 1 秒，就把 TTL 值减 1。当 TTL 值为 0 时，就丢弃这个数据报。后来把 TTL 字段的功能改为“跳数限制”（但名称不变）。路由器在转发数据报之前就把 TTL 值减 1。若 TTL 值减少到零，就丢弃这个数据报，不再转发。因此，TTL 的单位不再是秒，而是跳数。TTL 的意义是指明数据报在网络中至多可经过多少个路由器。显然，数据报在网络上经过的路由器的最大数值是 255。若把 TTL 的初始值设为 1，就表示这个数据报只能在本局域网中传送。</li>
<li>协议：占 8 位，协议字段指出此数据报携带的数据是使用何种协议，以便使目的主机的 IP 层知道应将数据部分上交给哪个处理过程。6 指 TCP 协议，17 指的是 UDP 协议。</li>
<li>首部校验和：占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和（一些字段，如生存时间、标志、片偏移等都可能发生变化）。不检验数据部分可减少计算的工作量。</li>
<li>源地址和目的地址：32位，IPV4 地址。</li>
</ul>
<h4 id="2、可变部分"><a href="#2、可变部分" class="headerlink" title="2、可变部分"></a><strong>2、可变部分</strong></h4><p>&ensp;&ensp;&ensp;&ensp; IP 首部的可变部分就是一个可选字段。选项字段用来支持排错、测量以及安全等措施，内容很丰富。此字段的长度可变，从 1 个字节到 40 个字节不等，取决于所选择的项目。某些选项项目只需要 1 个字节，它只包括 1 个字节的选项代码。但还有些选项需要多个字节，这些选项一个个拼接起来，中间不需要有分隔符，最后用全 0 的填充字段补齐成为 4 字节的整数倍。增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。新的 IP 版本 IPv6 就将 IP 数据报的首部长度做成固定的。这些任选项定义如下：</p>
<ul>
<li>安全和处理限制（用于军事领域）。</li>
<li>记录路径（让每个路由器都记下它的IP地址）。</li>
<li>时间戳（Time Stamp）（让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间）。</li>
<li>宽松的源站路由（Loose Source Route）（为数据报指定一系列必须经过的IP地址）。</li>
<li>严格的源站路由（Strict Source Route）（与宽松的源站路由类似，但是要求只能经过指定的这些地址，不能经过其他的地址）。</li>
</ul>
<p>&ensp;&ensp;&ensp;&ensp; 这些选项很少被使用，并非所有主机和路由器都支持这些选项。</p>
]]></content>
      <categories>
        <category>基本功</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>IP数据报</tag>
      </tags>
  </entry>
  <entry>
    <title>Innodb中的事务隔离级别和锁实现</title>
    <url>/2023/08/29/Innodb%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%92%8C%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>工程</category>
        <category>服务端</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring全景</title>
    <url>/2023/08/29/Spring%E5%85%A8%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%B7%A5%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Spring/Spring%E5%85%A8%E6%99%AF/Spring%E5%85%A8%E6%99%AF.png?raw=true" alt="Spring 全景图"></p>
]]></content>
      <categories>
        <category>工程</category>
        <category>服务端</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java EE</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>保持敬畏之心</title>
    <url>/2023/08/29/%E4%BF%9D%E6%8C%81%E6%95%AC%E7%95%8F%E4%B9%8B%E5%BF%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&ensp;&ensp;&ensp;&ensp; 世界何其广大，能人异士很多。 搞清楚自己的能力边界很重要。对未知或者模糊不清的事物保持敬畏之心，不鲁莽下结论， 避免盲目自负也很重要。</p>
]]></content>
      <categories>
        <category>思考</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>回调</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行常用指令</title>
    <url>/2023/08/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&ensp;&ensp; MySQL 创建数据库并指定字符集：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop schema if exists `test`;</span><br><span class="line">CREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp; Brew 相关的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 先卸载Homebrew</span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br><span class="line">// 然后在安装</span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line">// 搜索包</span><br><span class="line">brew search mysql</span><br><span class="line">// 安装包</span><br><span class="line">brew install mysql</span><br><span class="line">// 查看包信息，比如目前的版本，依赖，安装后注意事项等</span><br><span class="line">brew info mysql</span><br><span class="line">// 卸载包</span><br><span class="line">brew uninstall wget</span><br><span class="line">// 显示已安装的包</span><br><span class="line">brew list</span><br><span class="line">// 查看brew的帮助</span><br><span class="line">brew –help</span><br><span class="line">// 更新， 这会更新 Homebrew 自己</span><br><span class="line">brew update</span><br><span class="line">// 检查过时（是否有新版本），这会列出所有安装的包里，哪些可以升级</span><br><span class="line">brew outdated</span><br><span class="line">brew outdated mysql</span><br><span class="line">// 升级所有可以升级的软件们</span><br><span class="line">brew upgrade</span><br><span class="line">brew upgrade mysql</span><br><span class="line">// 清理不需要的版本极其安装包缓存</span><br><span class="line">brew cleanup</span><br><span class="line">brew cleanup mysql</span><br></pre></td></tr></table></figure>
<p>&ensp;&ensp; MySQL 源码构建参数(将目录修改为你自己的)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">-DWITH_BOOST=/Users/setsunayang/Documents/learning/mysql/boost_1_77_0</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/Users/setsunayang/Documents/learning/mysql/build</span><br><span class="line">-DWITH_SSL=system</span><br><span class="line"></span><br><span class="line">./mysqld --basedir=/Users/setsunayang/Documents/learning/mysql/build \</span><br><span class="line">--datadir=/Users/setsunayang/Documents/learning/mysql/build/data \</span><br><span class="line">--initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp; Git重新关联远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm origin </span><br><span class="line">git remote add origin [url]</span><br><span class="line">git config --global user.name &quot;杨海波&quot;</span><br><span class="line">git config --global user.email “3546514206@QQ.COM&quot;</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp; 设置主机名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo scutil --set HostName SetsunaYang</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat启动流程</title>
    <url>/2023/08/29/Tomcat%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>工程</category>
        <category>服务端</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Java Web</tag>
        <tag>Servlet</tag>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>C++程序内存分区</title>
    <url>/2023/08/29/C-%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>代码区：</strong> 程序被操作系统加载到内存时，所有可执⾏的代码被加载到代码区，也叫代码段，存储程序的代码指令。程序运⾏时，代码区是共享只读的。</p>
<p><strong>静态区：</strong> 程序中的静态变量、全局变量存放在此区域（初始化的全局变量和静态变量在⼀块区域）。代码执⾏期间⼀直占⽤内存！</p>
<p><strong>堆：</strong> 堆是不连续的内存区域，获得的空间⽐较灵活，也⽐较⼤，⼀般速度⽐较慢，⽽且容易产⽣内存碎⽚,不过⽤起来最⽅便。需要程序员申请的内存空间，空间的释放⼀般由程序员控制(⽐如new, delete, malloc, free)。当程序员没有释放该内存空间的时候，程序运⾏完毕时操作系统会对该内存空间进⾏回收。</p>
<p><strong>栈：</strong> 栈是⼀块连续的内存的区域，⼀般栈的⼤⼩都是预先设置好的，如果申请的空间超过栈的剩余空间时，将提⽰overflow。存放的通常是变量通常是局部变量、函数参数等。</p>
<p><strong>常量区：</strong> 常量字符串就是放在这⾥的。 程序结束后由系统释放。</p>
<p><strong>BSS段：</strong> 定义⽽没有赋初值的全局变量和静态变量,放在这个区域，通常只是记录变量名和⼤⼩，相当于⼀个占位符。⼀个程序本质上都是由.bss段、.data段、.text段三个组成的。.data段包含三个部分：heap(堆)、stack(栈)和静态数据区。.text段存放代码区。.bss ⾥⾯装载了未被初始化的数据。如图：</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++/C++%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/C++%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA.png?raw=true"></p>
<p>&ensp;&ensp;&ensp;&ensp; ⽰例代码及注释如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区（静态区）</span></span><br><span class="line"><span class="type">char</span> *p1; <span class="comment">//全局未初始化区 （BSS段）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> b; <span class="comment">//栈 6 char s[] = &quot;abc&quot;; //栈 7 char *p2; //栈 8 char *p3 = &quot;123456&quot;; //123456/0在常量区，p3在栈上。</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>; <span class="comment">//全局（静态）初始化区 （静态区）</span></span><br><span class="line">    p1 = (<span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">//分配得10和20字节的区域就在堆区。</span></span><br><span class="line">    <span class="comment">// p2 = (char *) malloc(20);</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">//123456/0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成⼀块。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基本功</category>
        <category>编程基础</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>回调机制</title>
    <url>/2023/08/29/%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、C语言中的回调"><a href="#1、C语言中的回调" class="headerlink" title="1、C语言中的回调"></a><strong>1、C语言中的回调</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 函数指针是指向函数的指针变量。通常我们说的指针变量是指向一个整型、字符型或数 组等变量，而函数指针是指向函数。函数指针可以像一般函数一样，用于调用函数、传递参 数。函数指针变量的声明： typedef int (*fun_ptr)(int,int); &#x2F;&#x2F; 声明一个指向同样参数、返回值的函数指针类型 以下实例声明了函数指针变量 p，指向函数 max：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* p 是函数指针 */</span></span><br><span class="line">    <span class="built_in">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>) = &amp;max; <span class="comment">// &amp;可以省略 </span></span><br><span class="line">    <span class="type">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入三个数字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span></span><br><span class="line">    d = <span class="built_in">p</span>(<span class="built_in">p</span>(a, b), c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大的数字是: %d\n&quot;</span>, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp;&ensp;&ensp; 输出的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请输入三个数字:1 2 3 </span><br><span class="line">最大的数字是: 3</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp;&ensp;&ensp; 函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用 的函数。下面的实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指 针，通过该函数来设置数组的值。实例中我们定义了回调函数 getNextRandomValue，它返 回一个随机值，它作为一个函数指针传递给 populate_array 函数。populate_array 将调 用 10 次回调函数，并将回调函数的返回值赋值给数组。编译执行，输出结果如下： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709</span><br></pre></td></tr></table></figure>

<h4 id="2、什么是回调"><a href="#2、什么是回调" class="headerlink" title="2、什么是回调"></a><strong>2、什么是回调</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 软件模块之间总是存在着一定的接口，从调用方式上，可以把他们分为三类：同步调 用、回调和异步调用。回调是一种双向调用的模式，也就是说，被调用方在接口被调用时也 会调用对方的接口。 </p>
<p>&ensp;&ensp;&ensp;&ensp; 同步调用：一种阻塞式调用，调用方要等待对方执行完毕才能返回，它是一种单向调 用。</p>
<p>&ensp;&ensp;&ensp;&ensp; 回调：一种双向调用模式，也就是说，被调用方在接口被调用时也会调用对方的接口。 </p>
<p>&ensp;&ensp;&ensp;&ensp; 异步调用：一种类似消息或事件的机制，不过它的调用方向刚好相反，接口的服务在收 到某种讯息或发生某种事件时，会主动通知客户方（即调用客户方的接口）。 回调和异步调用的关系非常紧密：通常可以使用回调来实现异步消息的注册，通过异步 调用来实现消息的通知。</p>
<p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6.jpg?raw=true" alt="程序调用的几种方式"></p>
<p>&ensp;&ensp;&ensp;&ensp; 回调机制的实现通常需要实现一个回调函数，回调函数，顾名思义，用于回调的函数。回调函数只是一个功能片段，由用户按照回调函数调用约定来实现的一个函数。回调函数是一个工作流的一部分，由工作流来决定函数的调用（回调）时机。回调函数包含下面几个特性：</p>
<ul>
<li><p>属于工作流的一个部分； </p>
</li>
<li><p>必须按照工作流指定的调用约定来申明（定义）； </p>
</li>
<li><p>他的调用时机由工作流决定，回调函数的实现者不能直接调用回调 函数来实现工作流的功能。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>基本功</category>
        <category>编程基础</category>
        <category>编程理论</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>回调</tag>
      </tags>
  </entry>
  <entry>
    <title>GC—基础知识</title>
    <url>/2023/08/28/GC%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&ensp;&ensp;&ensp;&ensp; JVM 的 GC 是指垃圾回收，主要是对堆内存的回收。本文将介绍 JVM 中一次完整的 GC 流程是怎样<br>的，首先抛出第一个问题，什么样的对象会是 JVM 回收的目标？</p>
<h4 id="1、可达性分析算法（GC-Roots）"><a href="#1、可达性分析算法（GC-Roots）" class="headerlink" title="1、可达性分析算法（GC Roots）"></a><strong>1、可达性分析算法（GC Roots）</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 有一种引用计数法，可以用来判断对象被引用的次数，如果引用次数为0，则代表可以被回收。这种实现<br>方式比较简单，但对于循环引用的情况束手无策，所以 Java 采用了可达性分析算法。即判断某个对象是否与 GC Roots 的这类对象之<br>间的路径可达，若不可达，则有可能成为回收对象，被判定为不可达的对象要成为可回收对象必须至少经历两次标记过程，如果在这两次标<br>记过程中仍然没有逃脱成为可回收对象的可能性，则基本上就真的成为可回收对象了。在 Java 中，可作为 GC Roots 的对象包括以下<br>几种：</p>
<ul>
<li>虚拟机栈（本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中引用的对象</li>
</ul>
<h4 id="2、JVM中的堆结构"><a href="#2、JVM中的堆结构" class="headerlink" title="2、JVM中的堆结构"></a><strong>2、JVM中的堆结构</strong></h4><p>&ensp;&ensp;&ensp;&ensp; JVM 中的堆可划分为两大部分，新生代和老年代，大小比例为1:2，如下：<br><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A0%86%E5%8C%BA%E7%9A%84%E5%88%92%E5%88%86%E6%AF%94%E4%BE%8B.png?raw=true" alt="JVM 分代比例"></p>
<p>&ensp;&ensp;&ensp;&ensp; 其中，新生代分为 Eden 区和 Survivor 区， Survivor 幸存者区又分为大小相等的两块 from 和 to<br>区。这便是 JVM 中堆的结构和各部分默认的比例，当然这些比例都可通过对应 JVM 参数来调整。完整的 JMM 如下：<br><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java/JVM/GC%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JVM%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="JVM 内存模型全景"></p>
<h4 id="2-1、为何新生代要分为三个区"><a href="#2-1、为何新生代要分为三个区" class="headerlink" title="2.1、为何新生代要分为三个区"></a><strong>2.1、为何新生代要分为三个区</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 这里需要介绍新生代的垃圾回收算法——复制算法。该算法的核心是将可用内存按容量划分为大小<br>相等的两块，每次回收周期只用其中一块，当这一块的内存用完，就将还存活的对象复制到另一块上面，然后把已使用过的内存空间清理掉。</p>
<p>&ensp;&ensp;&ensp;&ensp; 优点：不必考虑内存碎片问题；效率高。</p>
<p>&ensp;&ensp;&ensp;&ensp; 缺点：可用容量减少为原来的一半，比较浪费。</p>
<p>&ensp;&ensp;&ensp;&ensp; 最优设置：根据权威数据分析，90%的对象都是朝生夕死的，所以采用10%的空间用作交换区，因为交换区必须要有等量的两个，所以采用复制算法中新生代中三个区默认分配比例为8:1:1。</p>
<h4 id="2-2、新生代对象的分配和回收"><a href="#2-2、新生代对象的分配和回收" class="headerlink" title="2.2、新生代对象的分配和回收"></a><strong>2.2、新生代对象的分配和回收</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 基本上新的对象优先在 Eden 区分配；</p>
<p>&ensp;&ensp;&ensp;&ensp; 当 Eden 区没有足够空间时，会发起一次 Minor GC；</p>
<p>&ensp;&ensp;&ensp;&ensp; Minor GC 回收新生代采用复制回收算法的改进版本。即：<br>from 区和 to 区的两个交换区，这两个区只有一个区有数据。采用8:1:1的默认分配比例（-XX:SurvivorRatio默认为8，代表 Eden 区与 Survivor 区的大小比例）</p>
<h4 id="2-3、老年代对象的分配和回收"><a href="#2-3、老年代对象的分配和回收" class="headerlink" title="2.3、老年代对象的分配和回收"></a><strong>2.3、老年代对象的分配和回收</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 老年代的对象一般来自于新生代中的长期存活对象。这里有一概念叫做年龄阈值，每个对象定义了年龄计数器，经<br>过一次 Minor GC （在交换区）后年龄加1，对象年龄达到15次后将会晋升到老年代，老年代空间不够时进行 Full GC。当然这个参数仍是可以通过 JVM 参数（-XX:MaxTenuringThreshold，默认15）来调整。</p>
<p>&ensp;&ensp;&ensp;&ensp; 大对象直接进入老年代。即超过 Eden 区空间，或超过一个参数值（-<br>XX:PretenureSizeThreshold&#x3D;30m，无默认值）。这样做的目的是避免在Eden区及两个Survivor区之间发生大量的内存复制。</p>
<p>&ensp;&ensp;&ensp;&ensp; 对象提前晋升到老年代（组团）。动态年龄判定：如果在 Survivor 区中相同年龄所有对象大小总和<br>大于 Survivor 区大小的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，而无须等到自己<br>的晋升年龄。</p>
<h4 id="3、JVM完整的GC流程"><a href="#3、JVM完整的GC流程" class="headerlink" title="3、JVM完整的GC流程"></a><strong>3、JVM完整的GC流程</strong></h4><p>&ensp;&ensp;&ensp;&ensp; 对象的正常流程：Eden 区 -&gt; Survivor 区 -&gt; 老年代。</p>
<p>&ensp;&ensp;&ensp;&ensp; 新生代GC：Minor GC；老年代GC：Full GC，比 Minor GC 慢10倍，JVM 会“stop the world”，严重<br>影响性能。</p>
<p>&ensp;&ensp;&ensp;&ensp; 总结：内存区域不够用了，就会引发GC。Minor GC 避免不了，Full GC 尽量避免。<br>处理方式：保存堆栈快照日志、分析内存泄漏、调整内存设置控制垃圾回收频率，选择合适的垃圾<br>回收器等。</p>
]]></content>
      <categories>
        <category>基本功</category>
        <category>编程基础</category>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>内核页表设计</title>
    <url>/2023/08/28/%E5%86%85%E6%A0%B8%E9%A1%B5%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8%E9%A1%B5%E8%A1%A8%E8%AE%BE%E8%AE%A1/%E5%86%85%E6%A0%B8%E9%A1%B5%E8%A1%A8%E8%AE%BE%E8%AE%A1.png?raw=true" alt="内核页表设计"></p>
]]></content>
      <categories>
        <category>基本功</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
